
Tof with motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  080075c0  080075c0  000085c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d4  080084d4  0000a080  2**0
                  CONTENTS
  4 .ARM          00000000  080084d4  080084d4  0000a080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084d4  080084d4  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d4  080084d4  000094d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080084dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000080  0800855c  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c20  0800855c  0000ac20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f07c  00000000  00000000  0000a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa4  00000000  00000000  00019125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c56  00000000  00000000  0001cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c81  00000000  00000000  0001d816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e9  00000000  00000000  00037497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2f6  00000000  00000000  0004b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c68  00000000  00000000  000d89bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000dd624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080075a8 	.word	0x080075a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080075a8 	.word	0x080075a8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <WriteReg>:
//    uint8_t data[2] = {reg, value};
//    return HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, data, 2, HAL_MAX_DELAY);
//}

HAL_StatusTypeDef WriteReg(uint8_t deviceAddress, uint8_t reg, uint8_t value)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	460b      	mov	r3, r1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	717b      	strb	r3, [r7, #5]
    uint8_t array[2];
    array[0] = reg;    // Register address
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	733b      	strb	r3, [r7, #12]
    array[1] = value;  // Value to write
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, (deviceAddress << 1), array, 2, HAL_MAX_DELAY)!= HAL_OK){
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	b29b      	uxth	r3, r3
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	b299      	uxth	r1, r3
 8000676:	f107 020c 	add.w	r2, r7, #12
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2302      	movs	r3, #2
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <WriteReg+0x48>)
 8000684:	f001 fe82 	bl	800238c <HAL_I2C_Master_Transmit>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <WriteReg+0x3e>
    	return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <WriteReg+0x40>
    }
    else{
    	return HAL_OK;
 8000692:	2300      	movs	r3, #0
    }

}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000009c 	.word	0x2000009c

080006a0 <ReadReg>:

// Read function to receive data from a specific register
HAL_StatusTypeDef ReadReg(uint8_t deviceAddress, uint8_t reg, uint8_t *value)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	4603      	mov	r3, r0
 80006a8:	603a      	str	r2, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	460b      	mov	r3, r1
 80006ae:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, (deviceAddress << 1)|1, &reg, 1, HAL_MAX_DELAY) != HAL_OK)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	b299      	uxth	r1, r3
 80006be:	1dba      	adds	r2, r7, #6
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2301      	movs	r3, #1
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <ReadReg+0x60>)
 80006ca:	f001 fe5f 	bl	800238c <HAL_I2C_Master_Transmit>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <ReadReg+0x38>
    {
        return HAL_ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e00f      	b.n	80006f8 <ReadReg+0x58>
    }
    return HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1)|1, value, 1, HAL_MAX_DELAY);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	b21b      	sxth	r3, r3
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	b299      	uxth	r1, r3
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2301      	movs	r3, #1
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <ReadReg+0x60>)
 80006f2:	f001 ff49 	bl	8002588 <HAL_I2C_Master_Receive>
 80006f6:	4603      	mov	r3, r0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000009c 	.word	0x2000009c

08000704 <VL53L0X_Init>:
    return HAL_OK;
}

// Function to initialize VL53L0X sensor with timing budget
HAL_StatusTypeDef VL53L0X_Init(uint8_t sensor_addr)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	73fb      	strb	r3, [r7, #15]

    // Step 1: Validate I2C interface using reference registers
    if (ReadReg(sensor_addr, REG_REFERENCE_C0, &value) != HAL_OK || value != 0xEE)
 8000712:	f107 020f 	add.w	r2, r7, #15
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	21c0      	movs	r1, #192	@ 0xc0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffc0 	bl	80006a0 <ReadReg>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d102      	bne.n	800072c <VL53L0X_Init+0x28>
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2bee      	cmp	r3, #238	@ 0xee
 800072a:	d001      	beq.n	8000730 <VL53L0X_Init+0x2c>
    {
        return HAL_ERROR; // Validation failed for REG_REFERENCE_C0
 800072c:	2301      	movs	r3, #1
 800072e:	e03f      	b.n	80007b0 <VL53L0X_Init+0xac>
    }
    if (ReadReg(sensor_addr, REG_REFERENCE_C1, &value) != HAL_OK || value != 0xAA)
 8000730:	f107 020f 	add.w	r2, r7, #15
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	21c1      	movs	r1, #193	@ 0xc1
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ffb1 	bl	80006a0 <ReadReg>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <VL53L0X_Init+0x46>
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2baa      	cmp	r3, #170	@ 0xaa
 8000748:	d001      	beq.n	800074e <VL53L0X_Init+0x4a>
    {
        return HAL_ERROR; // Validation failed for REG_REFERENCE_C1
 800074a:	2301      	movs	r3, #1
 800074c:	e030      	b.n	80007b0 <VL53L0X_Init+0xac>
    }
    if (ReadReg(sensor_addr, REG_REFERENCE_C2, &value) != HAL_OK || value != 0x10)
 800074e:	f107 020f 	add.w	r2, r7, #15
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	21c2      	movs	r1, #194	@ 0xc2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffa2 	bl	80006a0 <ReadReg>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d102      	bne.n	8000768 <VL53L0X_Init+0x64>
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	2b10      	cmp	r3, #16
 8000766:	d001      	beq.n	800076c <VL53L0X_Init+0x68>
    {
        return HAL_ERROR; // Validation failed for REG_REFERENCE_C2
 8000768:	2301      	movs	r3, #1
 800076a:	e021      	b.n	80007b0 <VL53L0X_Init+0xac>
    }

    // Step 2: Write default/reset values to other reference registers (if needed)
    if (WriteReg(sensor_addr, REG_REFERENCE_51, 0x00) != HAL_OK) // Reset 0x51 to default
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2200      	movs	r2, #0
 8000770:	2151      	movs	r1, #81	@ 0x51
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff6e 	bl	8000654 <WriteReg>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <VL53L0X_Init+0x7e>
    {
        return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e016      	b.n	80007b0 <VL53L0X_Init+0xac>
    }
    if (WriteReg(sensor_addr, REG_REFERENCE_61, 0x00) != HAL_OK) // Reset 0x61 to default
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2200      	movs	r2, #0
 8000786:	2161      	movs	r1, #97	@ 0x61
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff63 	bl	8000654 <WriteReg>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <VL53L0X_Init+0x94>
    {
        return HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e00b      	b.n	80007b0 <VL53L0X_Init+0xac>
    }

    // Step 3: Start measurement (default configuration)
    if (WriteReg(sensor_addr, 0x00, 0x01) != HAL_OK) // Start the measurement
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2201      	movs	r2, #1
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff58 	bl	8000654 <WriteReg>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <VL53L0X_Init+0xaa>
    {
        return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <VL53L0X_Init+0xac>
    }

    return HAL_OK; // Initialization successful
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <SetAddress>:

HAL_StatusTypeDef SetAddress(uint8_t NewAddress){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	if(WriteReg(CurrentAddress, 0x8A, NewAddress & 0x7F)!=HAL_OK){
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	218a      	movs	r1, #138	@ 0x8a
 80007ce:	2029      	movs	r0, #41	@ 0x29
 80007d0:	f7ff ff40 	bl	8000654 <WriteReg>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SetAddress+0x26>
		return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <SetAddress+0x28>
	}
	else {
		return HAL_OK;
 80007de:	2300      	movs	r3, #0
	}
	//HAL_Delay(10);
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <readDistance>:

uint16_t readDistance(uint8_t deviceAddress) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af04      	add	r7, sp, #16
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    uint8_t reg = 0x1E;          // RESULT_RANGE_STATUS register address
 80007f2:	231e      	movs	r3, #30
 80007f4:	757b      	strb	r3, [r7, #21]
    uint8_t buffer[2] = {0};     // Buffer to store received data
 80007f6:	2300      	movs	r3, #0
 80007f8:	823b      	strh	r3, [r7, #16]
    uint16_t distance = 0;       // Variable to hold the distance value
 80007fa:	2300      	movs	r3, #0
 80007fc:	82fb      	strh	r3, [r7, #22]

    // Trigger a new measurement
    uint8_t startMeasurementCmd = 0x01;  // Trigger new measurement
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
    	if (HAL_I2C_Mem_Write(&hi2c1, (deviceAddress << 1), 0x00, 1, &startMeasurementCmd, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	b29b      	uxth	r3, r3
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	b299      	uxth	r1, r3
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	f107 030f 	add.w	r3, r7, #15
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2301      	movs	r3, #1
 800081c:	2200      	movs	r2, #0
 800081e:	481f      	ldr	r0, [pc, #124]	@ (800089c <readDistance+0xb4>)
 8000820:	f002 f91e 	bl	8002a60 <HAL_I2C_Mem_Write>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <readDistance+0x48>
    		return 0xFFFF;  // Error
 800082a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800082e:	e031      	b.n	8000894 <readDistance+0xac>
        }

    // Transmit the register address
    if (HAL_I2C_Master_Transmit(&hi2c1, (deviceAddress << 1), &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	b29b      	uxth	r3, r3
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b299      	uxth	r1, r3
 8000838:	f107 0215 	add.w	r2, r7, #21
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	4815      	ldr	r0, [pc, #84]	@ (800089c <readDistance+0xb4>)
 8000846:	f001 fda1 	bl	800238c <HAL_I2C_Master_Transmit>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <readDistance+0x6e>
        // Handle error (e.g., return 0 or a specific error code)
        return 0xFFFF;  // Return 0xFFFF to indicate an error
 8000850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000854:	e01e      	b.n	8000894 <readDistance+0xac>
    }

    // Receive the 2-byte distance data
    if (HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1) | 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	b21b      	sxth	r3, r3
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	b21b      	sxth	r3, r3
 8000862:	b299      	uxth	r1, r3
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2302      	movs	r3, #2
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <readDistance+0xb4>)
 8000872:	f001 fe89 	bl	8002588 <HAL_I2C_Master_Receive>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <readDistance+0x9a>
        // Handle error (e.g., return 0 or a specific error code)
        return 0xFFFF;  // Return 0xFFFF to indicate an error
 800087c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000880:	e008      	b.n	8000894 <readDistance+0xac>
    }

    // Combine MSB and LSB to form the 16-bit distance value
    distance = (buffer[0] << 8) | buffer[1];
 8000882:	7c3b      	ldrb	r3, [r7, #16]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	b21a      	sxth	r2, r3
 8000888:	7c7b      	ldrb	r3, [r7, #17]
 800088a:	b21b      	sxth	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b21b      	sxth	r3, r3
 8000890:	82fb      	strh	r3, [r7, #22]

    return distance;
 8000892:	8afb      	ldrh	r3, [r7, #22]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000009c 	.word	0x2000009c

080008a0 <scanI2CBus>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void scanI2CBus(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
    char buffer[16];
    SSD1306_Clear();
 80008a6:	f000 fdf4 	bl	8001492 <SSD1306_Clear>
    SSD1306_GotoXY(0, 0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fd37 	bl	8001320 <SSD1306_GotoXY>
    SSD1306_Puts("I2C Scan:", &Font_11x18, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	491b      	ldr	r1, [pc, #108]	@ (8000924 <scanI2CBus+0x84>)
 80008b6:	481c      	ldr	r0, [pc, #112]	@ (8000928 <scanI2CBus+0x88>)
 80008b8:	f000 fdc6 	bl	8001448 <SSD1306_Puts>

    for (uint8_t address = 1; address < 128; address++) {
 80008bc:	2301      	movs	r3, #1
 80008be:	75fb      	strb	r3, [r7, #23]
 80008c0:	e024      	b.n	800090c <scanI2CBus+0x6c>
        // Perform an I2C write operation to check if the device responds
        if (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 1, 10) == HAL_OK) {
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	b299      	uxth	r1, r3
 80008ca:	230a      	movs	r3, #10
 80008cc:	2201      	movs	r2, #1
 80008ce:	4817      	ldr	r0, [pc, #92]	@ (800092c <scanI2CBus+0x8c>)
 80008d0:	f002 f9c0 	bl	8002c54 <HAL_I2C_IsDeviceReady>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d115      	bne.n	8000906 <scanI2CBus+0x66>
            snprintf(buffer, sizeof(buffer), "Found: 0x%02X", address);
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	1d38      	adds	r0, r7, #4
 80008de:	4a14      	ldr	r2, [pc, #80]	@ (8000930 <scanI2CBus+0x90>)
 80008e0:	2110      	movs	r1, #16
 80008e2:	f006 f843 	bl	800696c <sniprintf>
            SSD1306_GotoXY(0, 30);
 80008e6:	211e      	movs	r1, #30
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fd19 	bl	8001320 <SSD1306_GotoXY>
            SSD1306_Puts(buffer, &Font_11x18, 1);
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2201      	movs	r2, #1
 80008f2:	490c      	ldr	r1, [pc, #48]	@ (8000924 <scanI2CBus+0x84>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fda7 	bl	8001448 <SSD1306_Puts>
            SSD1306_UpdateScreen();
 80008fa:	f000 fc6d 	bl	80011d8 <SSD1306_UpdateScreen>
            HAL_Delay(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000902:	f001 f931 	bl	8001b68 <HAL_Delay>
    for (uint8_t address = 1; address < 128; address++) {
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	3301      	adds	r3, #1
 800090a:	75fb      	strb	r3, [r7, #23]
 800090c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dad6      	bge.n	80008c2 <scanI2CBus+0x22>
            //SD1306_Clear();// Delay to display each address found
        }
    }
    HAL_Delay(2000);  // Delay at the end of the scan
 8000914:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000918:	f001 f926 	bl	8001b68 <HAL_Delay>
}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	080075c0 	.word	0x080075c0
 800092c:	2000009c 	.word	0x2000009c
 8000930:	080075cc 	.word	0x080075cc

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b09e      	sub	sp, #120	@ 0x78
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f001 f8b3 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f983 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 fb3f 	bl	8000fc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000946:	f000 f9bb 	bl	8000cc0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800094a:	f000 f9e7 	bl	8000d1c <MX_TIM1_Init>
  MX_TIM2_Init();
 800094e:	f000 fa91 	bl	8000e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000952:	f000 fae3 	bl	8000f1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000956:	f000 fb7b 	bl	8001050 <SSD1306_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);  // Enable Sensor 1
 800095a:	2201      	movs	r2, #1
 800095c:	2108      	movs	r1, #8
 800095e:	48b2      	ldr	r0, [pc, #712]	@ (8000c28 <main+0x2f4>)
 8000960:	f001 fbb8 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);  // Disable Sensor 2
 8000964:	2200      	movs	r2, #0
 8000966:	2110      	movs	r1, #16
 8000968:	48af      	ldr	r0, [pc, #700]	@ (8000c28 <main+0x2f4>)
 800096a:	f001 fbb3 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	48ad      	ldr	r0, [pc, #692]	@ (8000c28 <main+0x2f4>)
 8000974:	f001 fbae 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000978:	2032      	movs	r0, #50	@ 0x32
 800097a:	f001 f8f5 	bl	8001b68 <HAL_Delay>
  if (VL53L0X_Init(0x29) == HAL_OK)
 800097e:	2029      	movs	r0, #41	@ 0x29
 8000980:	f7ff fec0 	bl	8000704 <VL53L0X_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d10f      	bne.n	80009aa <main+0x76>
  {
	  SSD1306_GotoXY(0, 30);
 800098a:	211e      	movs	r1, #30
 800098c:	2000      	movs	r0, #0
 800098e:	f000 fcc7 	bl	8001320 <SSD1306_GotoXY>
  	  SSD1306_Puts("Success", &Font_11x18, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	49a5      	ldr	r1, [pc, #660]	@ (8000c2c <main+0x2f8>)
 8000996:	48a6      	ldr	r0, [pc, #664]	@ (8000c30 <main+0x2fc>)
 8000998:	f000 fd56 	bl	8001448 <SSD1306_Puts>
  	  HAL_Delay(2000);
 800099c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009a0:	f001 f8e2 	bl	8001b68 <HAL_Delay>
  	  SSD1306_UpdateScreen();
 80009a4:	f000 fc18 	bl	80011d8 <SSD1306_UpdateScreen>
 80009a8:	e00e      	b.n	80009c8 <main+0x94>
    }
  else
  {
  	  SSD1306_GotoXY(0, 30);
 80009aa:	211e      	movs	r1, #30
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fcb7 	bl	8001320 <SSD1306_GotoXY>
  	  SSD1306_Puts("Faild8", &Font_11x18, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	499d      	ldr	r1, [pc, #628]	@ (8000c2c <main+0x2f8>)
 80009b6:	489f      	ldr	r0, [pc, #636]	@ (8000c34 <main+0x300>)
 80009b8:	f000 fd46 	bl	8001448 <SSD1306_Puts>
  	  HAL_Delay(2000);
 80009bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009c0:	f001 f8d2 	bl	8001b68 <HAL_Delay>
  	  SSD1306_UpdateScreen();
 80009c4:	f000 fc08 	bl	80011d8 <SSD1306_UpdateScreen>
  }

  if (SetAddress(0x31) == HAL_OK)
 80009c8:	2031      	movs	r0, #49	@ 0x31
 80009ca:	f7ff fef5 	bl	80007b8 <SetAddress>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10f      	bne.n	80009f4 <main+0xc0>
  {
	  SSD1306_GotoXY(0, 30);
 80009d4:	211e      	movs	r1, #30
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fca2 	bl	8001320 <SSD1306_GotoXY>
  	  SSD1306_Puts("Success", &Font_11x18, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	4993      	ldr	r1, [pc, #588]	@ (8000c2c <main+0x2f8>)
 80009e0:	4893      	ldr	r0, [pc, #588]	@ (8000c30 <main+0x2fc>)
 80009e2:	f000 fd31 	bl	8001448 <SSD1306_Puts>
  	  HAL_Delay(2000);
 80009e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ea:	f001 f8bd 	bl	8001b68 <HAL_Delay>
  	  SSD1306_UpdateScreen();
 80009ee:	f000 fbf3 	bl	80011d8 <SSD1306_UpdateScreen>
 80009f2:	e00e      	b.n	8000a12 <main+0xde>
   }
   else
   {
  	  SSD1306_GotoXY(0, 30);
 80009f4:	211e      	movs	r1, #30
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fc92 	bl	8001320 <SSD1306_GotoXY>
  	  SSD1306_Puts("Faild8", &Font_11x18, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	498b      	ldr	r1, [pc, #556]	@ (8000c2c <main+0x2f8>)
 8000a00:	488c      	ldr	r0, [pc, #560]	@ (8000c34 <main+0x300>)
 8000a02:	f000 fd21 	bl	8001448 <SSD1306_Puts>
  	  HAL_Delay(2000);
 8000a06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a0a:	f001 f8ad 	bl	8001b68 <HAL_Delay>
  	  SSD1306_UpdateScreen();
 8000a0e:	f000 fbe3 	bl	80011d8 <SSD1306_UpdateScreen>
   }

    HAL_Delay(10);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f001 f8a8 	bl	8001b68 <HAL_Delay>

    SSD1306_GotoXY(0, 30);
 8000a18:	211e      	movs	r1, #30
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 fc80 	bl	8001320 <SSD1306_GotoXY>
    SSD1306_Puts("Initialized1", &Font_11x18, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	4982      	ldr	r1, [pc, #520]	@ (8000c2c <main+0x2f8>)
 8000a24:	4884      	ldr	r0, [pc, #528]	@ (8000c38 <main+0x304>)
 8000a26:	f000 fd0f 	bl	8001448 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000a2a:	f000 fbd5 	bl	80011d8 <SSD1306_UpdateScreen>
    HAL_Delay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a32:	f001 f899 	bl	8001b68 <HAL_Delay>
    SSD1306_Clear();
 8000a36:	f000 fd2c 	bl	8001492 <SSD1306_Clear>

    //scanI2CBus();
    SSD1306_Clear();
 8000a3a:	f000 fd2a 	bl	8001492 <SSD1306_Clear>

      // Enable Sensor 1
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);  // Disable Sensor 2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2110      	movs	r1, #16
 8000a42:	4879      	ldr	r0, [pc, #484]	@ (8000c28 <main+0x2f4>)
 8000a44:	f001 fb46 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	4876      	ldr	r0, [pc, #472]	@ (8000c28 <main+0x2f4>)
 8000a4e:	f001 fb41 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000a52:	2032      	movs	r0, #50	@ 0x32
 8000a54:	f001 f888 	bl	8001b68 <HAL_Delay>
    if (VL53L0X_Init(0x29) == HAL_OK)
 8000a58:	2029      	movs	r0, #41	@ 0x29
 8000a5a:	f7ff fe53 	bl	8000704 <VL53L0X_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10f      	bne.n	8000a84 <main+0x150>
    {
    	SSD1306_GotoXY(0, 30);
 8000a64:	211e      	movs	r1, #30
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 fc5a 	bl	8001320 <SSD1306_GotoXY>
      	SSD1306_Puts("Success", &Font_11x18, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	496f      	ldr	r1, [pc, #444]	@ (8000c2c <main+0x2f8>)
 8000a70:	486f      	ldr	r0, [pc, #444]	@ (8000c30 <main+0x2fc>)
 8000a72:	f000 fce9 	bl	8001448 <SSD1306_Puts>
      	HAL_Delay(2000);
 8000a76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a7a:	f001 f875 	bl	8001b68 <HAL_Delay>
      	SSD1306_UpdateScreen();
 8000a7e:	f000 fbab 	bl	80011d8 <SSD1306_UpdateScreen>
 8000a82:	e00e      	b.n	8000aa2 <main+0x16e>
     }
    else
     {
    	SSD1306_GotoXY(0, 30);
 8000a84:	211e      	movs	r1, #30
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 fc4a 	bl	8001320 <SSD1306_GotoXY>
      	SSD1306_Puts("Faild8", &Font_11x18, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4967      	ldr	r1, [pc, #412]	@ (8000c2c <main+0x2f8>)
 8000a90:	4868      	ldr	r0, [pc, #416]	@ (8000c34 <main+0x300>)
 8000a92:	f000 fcd9 	bl	8001448 <SSD1306_Puts>
      	HAL_Delay(2000);
 8000a96:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a9a:	f001 f865 	bl	8001b68 <HAL_Delay>
      	SSD1306_UpdateScreen();
 8000a9e:	f000 fb9b 	bl	80011d8 <SSD1306_UpdateScreen>
      }

    if (SetAddress(0x32) == HAL_OK)
 8000aa2:	2032      	movs	r0, #50	@ 0x32
 8000aa4:	f7ff fe88 	bl	80007b8 <SetAddress>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10f      	bne.n	8000ace <main+0x19a>
      {
    	SSD1306_GotoXY(0, 30);
 8000aae:	211e      	movs	r1, #30
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 fc35 	bl	8001320 <SSD1306_GotoXY>
      	SSD1306_Puts("Success", &Font_11x18, 1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	495c      	ldr	r1, [pc, #368]	@ (8000c2c <main+0x2f8>)
 8000aba:	485d      	ldr	r0, [pc, #372]	@ (8000c30 <main+0x2fc>)
 8000abc:	f000 fcc4 	bl	8001448 <SSD1306_Puts>
      	HAL_Delay(2000);
 8000ac0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ac4:	f001 f850 	bl	8001b68 <HAL_Delay>
      	SSD1306_UpdateScreen();
 8000ac8:	f000 fb86 	bl	80011d8 <SSD1306_UpdateScreen>
 8000acc:	e00e      	b.n	8000aec <main+0x1b8>
       }
    else
       {
      	SSD1306_GotoXY(0, 30);
 8000ace:	211e      	movs	r1, #30
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 fc25 	bl	8001320 <SSD1306_GotoXY>
      	SSD1306_Puts("Faild8", &Font_11x18, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4954      	ldr	r1, [pc, #336]	@ (8000c2c <main+0x2f8>)
 8000ada:	4856      	ldr	r0, [pc, #344]	@ (8000c34 <main+0x300>)
 8000adc:	f000 fcb4 	bl	8001448 <SSD1306_Puts>
      	HAL_Delay(2000);
 8000ae0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae4:	f001 f840 	bl	8001b68 <HAL_Delay>
      	SSD1306_UpdateScreen();
 8000ae8:	f000 fb76 	bl	80011d8 <SSD1306_UpdateScreen>
        }

    HAL_Delay(10);
 8000aec:	200a      	movs	r0, #10
 8000aee:	f001 f83b 	bl	8001b68 <HAL_Delay>

    SSD1306_GotoXY(0, 30);
 8000af2:	211e      	movs	r1, #30
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 fc13 	bl	8001320 <SSD1306_GotoXY>
    SSD1306_Puts("Initialized1", &Font_11x18, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	494b      	ldr	r1, [pc, #300]	@ (8000c2c <main+0x2f8>)
 8000afe:	484e      	ldr	r0, [pc, #312]	@ (8000c38 <main+0x304>)
 8000b00:	f000 fca2 	bl	8001448 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000b04:	f000 fb68 	bl	80011d8 <SSD1306_UpdateScreen>
    HAL_Delay(1000);
 8000b08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b0c:	f001 f82c 	bl	8001b68 <HAL_Delay>
    SSD1306_Clear();
 8000b10:	f000 fcbf 	bl	8001492 <SSD1306_Clear>

    //scanI2CBus();
    SSD1306_Clear();
 8000b14:	f000 fcbd 	bl	8001492 <SSD1306_Clear>


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	4842      	ldr	r0, [pc, #264]	@ (8000c28 <main+0x2f4>)
 8000b1e:	f001 fad9 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000b22:	2032      	movs	r0, #50	@ 0x32
 8000b24:	f001 f820 	bl	8001b68 <HAL_Delay>
    if (VL53L0X_Init(0x29) == HAL_OK)
 8000b28:	2029      	movs	r0, #41	@ 0x29
 8000b2a:	f7ff fdeb 	bl	8000704 <VL53L0X_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10f      	bne.n	8000b54 <main+0x220>
    {
    	SSD1306_GotoXY(0, 30);
 8000b34:	211e      	movs	r1, #30
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 fbf2 	bl	8001320 <SSD1306_GotoXY>
        SSD1306_Puts("Success", &Font_11x18, 1);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	493b      	ldr	r1, [pc, #236]	@ (8000c2c <main+0x2f8>)
 8000b40:	483b      	ldr	r0, [pc, #236]	@ (8000c30 <main+0x2fc>)
 8000b42:	f000 fc81 	bl	8001448 <SSD1306_Puts>
        HAL_Delay(2000);
 8000b46:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b4a:	f001 f80d 	bl	8001b68 <HAL_Delay>
        SSD1306_UpdateScreen();
 8000b4e:	f000 fb43 	bl	80011d8 <SSD1306_UpdateScreen>
 8000b52:	e00e      	b.n	8000b72 <main+0x23e>
     }
    else
     {
    	SSD1306_GotoXY(0, 30);
 8000b54:	211e      	movs	r1, #30
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 fbe2 	bl	8001320 <SSD1306_GotoXY>
        SSD1306_Puts("Faild8", &Font_11x18, 1);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4933      	ldr	r1, [pc, #204]	@ (8000c2c <main+0x2f8>)
 8000b60:	4834      	ldr	r0, [pc, #208]	@ (8000c34 <main+0x300>)
 8000b62:	f000 fc71 	bl	8001448 <SSD1306_Puts>
        HAL_Delay(2000);
 8000b66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b6a:	f000 fffd 	bl	8001b68 <HAL_Delay>
        SSD1306_UpdateScreen();
 8000b6e:	f000 fb33 	bl	80011d8 <SSD1306_UpdateScreen>
      }

    if (SetAddress(0x33) == HAL_OK)
 8000b72:	2033      	movs	r0, #51	@ 0x33
 8000b74:	f7ff fe20 	bl	80007b8 <SetAddress>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10f      	bne.n	8000b9e <main+0x26a>
       {
    	SSD1306_GotoXY(0, 30);
 8000b7e:	211e      	movs	r1, #30
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 fbcd 	bl	8001320 <SSD1306_GotoXY>
        SSD1306_Puts("Success", &Font_11x18, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	4928      	ldr	r1, [pc, #160]	@ (8000c2c <main+0x2f8>)
 8000b8a:	4829      	ldr	r0, [pc, #164]	@ (8000c30 <main+0x2fc>)
 8000b8c:	f000 fc5c 	bl	8001448 <SSD1306_Puts>
        HAL_Delay(2000);
 8000b90:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b94:	f000 ffe8 	bl	8001b68 <HAL_Delay>
        SSD1306_UpdateScreen();
 8000b98:	f000 fb1e 	bl	80011d8 <SSD1306_UpdateScreen>
 8000b9c:	e00e      	b.n	8000bbc <main+0x288>
        }
    else
        {
    	SSD1306_GotoXY(0, 30);
 8000b9e:	211e      	movs	r1, #30
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 fbbd 	bl	8001320 <SSD1306_GotoXY>
        SSD1306_Puts("Faild8", &Font_11x18, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4920      	ldr	r1, [pc, #128]	@ (8000c2c <main+0x2f8>)
 8000baa:	4822      	ldr	r0, [pc, #136]	@ (8000c34 <main+0x300>)
 8000bac:	f000 fc4c 	bl	8001448 <SSD1306_Puts>
        HAL_Delay(2000);
 8000bb0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bb4:	f000 ffd8 	bl	8001b68 <HAL_Delay>
        SSD1306_UpdateScreen();
 8000bb8:	f000 fb0e 	bl	80011d8 <SSD1306_UpdateScreen>
         }

    HAL_Delay(10);
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f000 ffd3 	bl	8001b68 <HAL_Delay>

    SSD1306_GotoXY(0, 30);
 8000bc2:	211e      	movs	r1, #30
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 fbab 	bl	8001320 <SSD1306_GotoXY>
    SSD1306_Puts("Initialized1", &Font_11x18, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4917      	ldr	r1, [pc, #92]	@ (8000c2c <main+0x2f8>)
 8000bce:	481a      	ldr	r0, [pc, #104]	@ (8000c38 <main+0x304>)
 8000bd0:	f000 fc3a 	bl	8001448 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000bd4:	f000 fb00 	bl	80011d8 <SSD1306_UpdateScreen>
    HAL_Delay(1000);
 8000bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bdc:	f000 ffc4 	bl	8001b68 <HAL_Delay>
    SSD1306_Clear();
 8000be0:	f000 fc57 	bl	8001492 <SSD1306_Clear>

    scanI2CBus();
 8000be4:	f7ff fe5c 	bl	80008a0 <scanI2CBus>
    SSD1306_Clear();
 8000be8:	f000 fc53 	bl	8001492 <SSD1306_Clear>
    char buffer1[16];
    char buffer2[16];
    char buffer3[16];


  int counterValueLeft=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	677b      	str	r3, [r7, #116]	@ 0x74
  int counterValueRight=0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	673b      	str	r3, [r7, #112]	@ 0x70

  int precounterValueLeft=0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int precounterValueRight=0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
//  SSD1306_ScrollRight(0,7);
//  HAL_Delay(3000);
//  SSD1306_ScrollLeft(0,7);
//  HAL_Delay(3000);
//  SSD1306_Stopscroll();
  SSD1306_Clear();
 8000bfc:	f000 fc49 	bl	8001492 <SSD1306_Clear>

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8000c00:	213c      	movs	r1, #60	@ 0x3c
 8000c02:	480e      	ldr	r0, [pc, #56]	@ (8000c3c <main+0x308>)
 8000c04:	f003 fb58 	bl	80042b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000c08:	213c      	movs	r1, #60	@ 0x3c
 8000c0a:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <main+0x30c>)
 8000c0c:	f003 fb54 	bl	80042b8 <HAL_TIM_Encoder_Start>

  TIM2->CNT=0;
 8000c10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT=0;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <main+0x310>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24

//	  	  leftPWM = constrain(leftPWM, 0, 200);
//	  	  rightPWM = constrain(rightPWM, 0, 200);
//
//	  	  foward();
	  solver();
 8000c1e:	f005 fb91 	bl	8006344 <solver>
  {
 8000c22:	bf00      	nop
 8000c24:	e7fb      	b.n	8000c1e <main+0x2ea>
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	080075dc 	.word	0x080075dc
 8000c34:	080075e4 	.word	0x080075e4
 8000c38:	080075ec 	.word	0x080075ec
 8000c3c:	20000548 	.word	0x20000548
 8000c40:	20000590 	.word	0x20000590
 8000c44:	40000400 	.word	0x40000400

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	@ 0x40
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2228      	movs	r2, #40	@ 0x28
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f005 ffb4 	bl	8006bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c72:	2310      	movs	r3, #16
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fd32 	bl	80036e8 <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f9db 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8e:	230f      	movs	r3, #15
 8000c90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 ffa0 	bl	8003bec <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 f9c7 	bl	8001044 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3740      	adds	r7, #64	@ 0x40
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cc6:	4a13      	ldr	r2, [pc, #76]	@ (8000d14 <MX_I2C1_Init+0x54>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000ccc:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <MX_I2C1_Init+0x58>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ce2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cfe:	f001 fa01 	bl	8002104 <HAL_I2C_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d08:	f000 f99c 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000009c 	.word	0x2000009c
 8000d14:	40005400 	.word	0x40005400
 8000d18:	00061a80 	.word	0x00061a80

08000d1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	@ 0x58
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 ff35 	bl	8006bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5a:	4b44      	ldr	r3, [pc, #272]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d5c:	4a44      	ldr	r2, [pc, #272]	@ (8000e70 <MX_TIM1_Init+0x154>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d60:	4b42      	ldr	r3, [pc, #264]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b41      	ldr	r3, [pc, #260]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d6e:	22c7      	movs	r2, #199	@ 0xc7
 8000d70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d72:	4b3e      	ldr	r3, [pc, #248]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d78:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d84:	4839      	ldr	r0, [pc, #228]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000d86:	f003 f8ab 	bl	8003ee0 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d90:	f000 f958 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d98:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4832      	ldr	r0, [pc, #200]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000da2:	f003 fcc9 	bl	8004738 <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000dac:	f000 f94a 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000db0:	482e      	ldr	r0, [pc, #184]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000db2:	f003 f8e4 	bl	8003f7e <HAL_TIM_PWM_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000dbc:	f000 f942 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4827      	ldr	r0, [pc, #156]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000dd0:	f004 f856 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dda:	f000 f933 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	@ 0x60
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	481a      	ldr	r0, [pc, #104]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000e04:	f003 fbd6 	bl	80045b4 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e0e:	f000 f919 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000e1c:	f003 fbca 	bl	80045b4 <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000e26:	f000 f90d 	bl	8001044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000e4e:	f004 f875 	bl	8004f3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000e58:	f000 f8f4 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <MX_TIM1_Init+0x150>)
 8000e5e:	f000 fcbf 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3758      	adds	r7, #88	@ 0x58
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000500 	.word	0x20000500
 8000e70:	40012c00 	.word	0x40012c00

08000e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	@ 0x30
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2224      	movs	r2, #36	@ 0x24
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fe9e 	bl	8006bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000e92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000ed8:	2305      	movs	r3, #5
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000ee4:	f003 f946 	bl	8004174 <HAL_TIM_Encoder_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eee:	f000 f8a9 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <MX_TIM2_Init+0xa4>)
 8000f00:	f003 ffbe 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f0a:	f000 f89b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	@ 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000548 	.word	0x20000548

08000f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	@ 0x30
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2224      	movs	r2, #36	@ 0x24
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fe4a 	bl	8006bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f38:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000f3a:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <MX_TIM3_Init+0xa4>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f76:	2301      	movs	r3, #1
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000f7e:	2305      	movs	r3, #5
 8000f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000f8a:	f003 f8f3 	bl	8004174 <HAL_TIM_Encoder_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f000 f856 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_TIM3_Init+0xa0>)
 8000fa6:	f003 ff6b 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fb0:	f000 f848 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3730      	adds	r7, #48	@ 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000590 	.word	0x20000590
 8000fc0:	40000400 	.word	0x40000400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <MX_GPIO_Init+0x78>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <MX_GPIO_Init+0x78>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_GPIO_Init+0x78>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_GPIO_Init+0x78>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a11      	ldr	r2, [pc, #68]	@ (800103c <MX_GPIO_Init+0x78>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_GPIO_Init+0x78>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001008:	2200      	movs	r2, #0
 800100a:	f649 413c 	movw	r1, #39996	@ 0x9c3c
 800100e:	480c      	ldr	r0, [pc, #48]	@ (8001040 <MX_GPIO_Init+0x7c>)
 8001010:	f001 f860 	bl	80020d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001014:	f649 433c 	movw	r3, #39996	@ 0x9c3c
 8001018:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2302      	movs	r3, #2
 8001024:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_GPIO_Init+0x7c>)
 800102e:	f000 fecd 	bl	8001dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <Error_Handler+0x8>

08001050 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001056:	f000 fa25 	bl	80014a4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800105a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800105e:	2201      	movs	r2, #1
 8001060:	2178      	movs	r1, #120	@ 0x78
 8001062:	485b      	ldr	r0, [pc, #364]	@ (80011d0 <SSD1306_Init+0x180>)
 8001064:	f001 fdf6 	bl	8002c54 <HAL_I2C_IsDeviceReady>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800106e:	2300      	movs	r3, #0
 8001070:	e0a9      	b.n	80011c6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001072:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001076:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001078:	e002      	b.n	8001080 <SSD1306_Init+0x30>
		p--;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3b01      	subs	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f9      	bne.n	800107a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001086:	22ae      	movs	r2, #174	@ 0xae
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	@ 0x78
 800108c:	f000 fa84 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001090:	2220      	movs	r2, #32
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	@ 0x78
 8001096:	f000 fa7f 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800109a:	2210      	movs	r2, #16
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	@ 0x78
 80010a0:	f000 fa7a 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010a4:	22b0      	movs	r2, #176	@ 0xb0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	@ 0x78
 80010aa:	f000 fa75 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010ae:	22c8      	movs	r2, #200	@ 0xc8
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	@ 0x78
 80010b4:	f000 fa70 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	@ 0x78
 80010be:	f000 fa6b 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010c2:	2210      	movs	r2, #16
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	@ 0x78
 80010c8:	f000 fa66 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010cc:	2240      	movs	r2, #64	@ 0x40
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	@ 0x78
 80010d2:	f000 fa61 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010d6:	2281      	movs	r2, #129	@ 0x81
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	@ 0x78
 80010dc:	f000 fa5c 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010e0:	22ff      	movs	r2, #255	@ 0xff
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	@ 0x78
 80010e6:	f000 fa57 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010ea:	22a1      	movs	r2, #161	@ 0xa1
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	@ 0x78
 80010f0:	f000 fa52 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010f4:	22a6      	movs	r2, #166	@ 0xa6
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	@ 0x78
 80010fa:	f000 fa4d 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010fe:	22a8      	movs	r2, #168	@ 0xa8
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	@ 0x78
 8001104:	f000 fa48 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001108:	223f      	movs	r2, #63	@ 0x3f
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	@ 0x78
 800110e:	f000 fa43 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001112:	22a4      	movs	r2, #164	@ 0xa4
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	@ 0x78
 8001118:	f000 fa3e 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800111c:	22d3      	movs	r2, #211	@ 0xd3
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	@ 0x78
 8001122:	f000 fa39 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	@ 0x78
 800112c:	f000 fa34 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001130:	22d5      	movs	r2, #213	@ 0xd5
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	@ 0x78
 8001136:	f000 fa2f 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800113a:	22f0      	movs	r2, #240	@ 0xf0
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	@ 0x78
 8001140:	f000 fa2a 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001144:	22d9      	movs	r2, #217	@ 0xd9
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	@ 0x78
 800114a:	f000 fa25 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800114e:	2222      	movs	r2, #34	@ 0x22
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	@ 0x78
 8001154:	f000 fa20 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001158:	22da      	movs	r2, #218	@ 0xda
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	@ 0x78
 800115e:	f000 fa1b 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001162:	2212      	movs	r2, #18
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	@ 0x78
 8001168:	f000 fa16 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800116c:	22db      	movs	r2, #219	@ 0xdb
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	@ 0x78
 8001172:	f000 fa11 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001176:	2220      	movs	r2, #32
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	@ 0x78
 800117c:	f000 fa0c 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001180:	228d      	movs	r2, #141	@ 0x8d
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	@ 0x78
 8001186:	f000 fa07 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800118a:	2214      	movs	r2, #20
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	@ 0x78
 8001190:	f000 fa02 	bl	8001598 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001194:	22af      	movs	r2, #175	@ 0xaf
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	@ 0x78
 800119a:	f000 f9fd 	bl	8001598 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800119e:	222e      	movs	r2, #46	@ 0x2e
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	@ 0x78
 80011a4:	f000 f9f8 	bl	8001598 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f843 	bl	8001234 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011ae:	f000 f813 	bl	80011d8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <SSD1306_Init+0x184>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <SSD1306_Init+0x184>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SSD1306_Init+0x184>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000009c 	.word	0x2000009c
 80011d4:	200004f0 	.word	0x200004f0

080011d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e01d      	b.n	8001220 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3b50      	subs	r3, #80	@ 0x50
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	@ 0x78
 80011f0:	f000 f9d2 	bl	8001598 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2078      	movs	r0, #120	@ 0x78
 80011fa:	f000 f9cd 	bl	8001598 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011fe:	2210      	movs	r2, #16
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	@ 0x78
 8001204:	f000 f9c8 	bl	8001598 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	01db      	lsls	r3, r3, #7
 800120c:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <SSD1306_UpdateScreen+0x58>)
 800120e:	441a      	add	r2, r3
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	2140      	movs	r1, #64	@ 0x40
 8001214:	2078      	movs	r0, #120	@ 0x78
 8001216:	f000 f959 	bl	80014cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3301      	adds	r3, #1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b07      	cmp	r3, #7
 8001224:	d9de      	bls.n	80011e4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000f0 	.word	0x200000f0

08001234 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <SSD1306_Fill+0x14>
 8001244:	2300      	movs	r3, #0
 8001246:	e000      	b.n	800124a <SSD1306_Fill+0x16>
 8001248:	23ff      	movs	r3, #255	@ 0xff
 800124a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800124e:	4619      	mov	r1, r3
 8001250:	4803      	ldr	r0, [pc, #12]	@ (8001260 <SSD1306_Fill+0x2c>)
 8001252:	f005 fcb7 	bl	8006bc4 <memset>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000f0 	.word	0x200000f0

08001264 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	460b      	mov	r3, r1
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	70fb      	strb	r3, [r7, #3]
	if (
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	2b7f      	cmp	r3, #127	@ 0x7f
 800127a:	d848      	bhi.n	800130e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001280:	d845      	bhi.n	800130e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001282:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <SSD1306_DrawPixel+0xb4>)
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d11a      	bne.n	80012d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800129e:	88fa      	ldrh	r2, [r7, #6]
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	b298      	uxth	r0, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	01db      	lsls	r3, r3, #7
 80012aa:	4413      	add	r3, r2
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <SSD1306_DrawPixel+0xb8>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	88bb      	ldrh	r3, [r7, #4]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	2101      	movs	r1, #1
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b259      	sxtb	r1, r3
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	4603      	mov	r3, r0
 80012c8:	01db      	lsls	r3, r3, #7
 80012ca:	4413      	add	r3, r2
 80012cc:	b2c9      	uxtb	r1, r1
 80012ce:	4a13      	ldr	r2, [pc, #76]	@ (800131c <SSD1306_DrawPixel+0xb8>)
 80012d0:	54d1      	strb	r1, [r2, r3]
 80012d2:	e01d      	b.n	8001310 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012d4:	88fa      	ldrh	r2, [r7, #6]
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	b298      	uxth	r0, r3
 80012dc:	4603      	mov	r3, r0
 80012de:	01db      	lsls	r3, r3, #7
 80012e0:	4413      	add	r3, r2
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <SSD1306_DrawPixel+0xb8>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	4013      	ands	r3, r2
 80012fc:	b259      	sxtb	r1, r3
 80012fe:	88fa      	ldrh	r2, [r7, #6]
 8001300:	4603      	mov	r3, r0
 8001302:	01db      	lsls	r3, r3, #7
 8001304:	4413      	add	r3, r2
 8001306:	b2c9      	uxtb	r1, r1
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <SSD1306_DrawPixel+0xb8>)
 800130a:	54d1      	strb	r1, [r2, r3]
 800130c:	e000      	b.n	8001310 <SSD1306_DrawPixel+0xac>
		return;
 800130e:	bf00      	nop
	}
}
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	200004f0 	.word	0x200004f0
 800131c:	200000f0 	.word	0x200000f0

08001320 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	460a      	mov	r2, r1
 800132a:	80fb      	strh	r3, [r7, #6]
 800132c:	4613      	mov	r3, r2
 800132e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001330:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <SSD1306_GotoXY+0x28>)
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <SSD1306_GotoXY+0x28>)
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	8053      	strh	r3, [r2, #2]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200004f0 	.word	0x200004f0

0800134c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	4613      	mov	r3, r2
 800135a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800135c:	4b39      	ldr	r3, [pc, #228]	@ (8001444 <SSD1306_Putc+0xf8>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
	if (
 8001368:	2b7f      	cmp	r3, #127	@ 0x7f
 800136a:	dc07      	bgt.n	800137c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800136c:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <SSD1306_Putc+0xf8>)
 800136e:	885b      	ldrh	r3, [r3, #2]
 8001370:	461a      	mov	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	785b      	ldrb	r3, [r3, #1]
 8001376:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001378:	2b3f      	cmp	r3, #63	@ 0x3f
 800137a:	dd01      	ble.n	8001380 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800137c:	2300      	movs	r3, #0
 800137e:	e05d      	b.n	800143c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e04b      	b.n	800141e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	3b20      	subs	r3, #32
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	7849      	ldrb	r1, [r1, #1]
 8001392:	fb01 f303 	mul.w	r3, r1, r3
 8001396:	4619      	mov	r1, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	440b      	add	r3, r1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	e030      	b.n	800140c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d010      	beq.n	80013dc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013ba:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <SSD1306_Putc+0xf8>)
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b298      	uxth	r0, r3
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <SSD1306_Putc+0xf8>)
 80013c8:	885a      	ldrh	r2, [r3, #2]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	79ba      	ldrb	r2, [r7, #6]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff ff45 	bl	8001264 <SSD1306_DrawPixel>
 80013da:	e014      	b.n	8001406 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <SSD1306_Putc+0xf8>)
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b298      	uxth	r0, r3
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <SSD1306_Putc+0xf8>)
 80013ea:	885a      	ldrh	r2, [r3, #2]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b299      	uxth	r1, r3
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	f7ff ff2f 	bl	8001264 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4293      	cmp	r3, r2
 8001416:	d3c8      	bcc.n	80013aa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	461a      	mov	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	4293      	cmp	r3, r2
 8001428:	d3ad      	bcc.n	8001386 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SSD1306_Putc+0xf8>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	4413      	add	r3, r2
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <SSD1306_Putc+0xf8>)
 8001438:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800143a:	79fb      	ldrb	r3, [r7, #7]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200004f0 	.word	0x200004f0

08001448 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	4613      	mov	r3, r2
 8001454:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001456:	e012      	b.n	800147e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff73 	bl	800134c <SSD1306_Putc>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d002      	beq.n	8001478 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	e008      	b.n	800148a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1e8      	bne.n	8001458 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	781b      	ldrb	r3, [r3, #0]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fecc 	bl	8001234 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800149c:	f7ff fe9c 	bl	80011d8 <SSD1306_UpdateScreen>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <ssd1306_I2C_Init+0x24>)
 80014ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ae:	e002      	b.n	80014b6 <ssd1306_I2C_Init+0x12>
		p--;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f9      	bne.n	80014b0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	0003d090 	.word	0x0003d090

080014cc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b0c7      	sub	sp, #284	@ 0x11c
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014da:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80014de:	600a      	str	r2, [r1, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014e6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80014ea:	4622      	mov	r2, r4
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014f2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80014f6:	4602      	mov	r2, r0
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001502:	460a      	mov	r2, r1
 8001504:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800150a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800150e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001512:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001520:	e015      	b.n	800154e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001522:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001526:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800152a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	441a      	add	r2, r3
 8001532:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001536:	3301      	adds	r3, #1
 8001538:	7811      	ldrb	r1, [r2, #0]
 800153a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800153e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001542:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001544:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001548:	3301      	adds	r3, #1
 800154a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800154e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001552:	b29b      	uxth	r3, r3
 8001554:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001558:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800155c:	8812      	ldrh	r2, [r2, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d8df      	bhi.n	8001522 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001562:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001566:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b299      	uxth	r1, r3
 800156e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001572:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	b29b      	uxth	r3, r3
 800157c:	f107 020c 	add.w	r2, r7, #12
 8001580:	200a      	movs	r0, #10
 8001582:	9000      	str	r0, [sp, #0]
 8001584:	4803      	ldr	r0, [pc, #12]	@ (8001594 <ssd1306_I2C_WriteMulti+0xc8>)
 8001586:	f000 ff01 	bl	800238c <HAL_I2C_Master_Transmit>
}
 800158a:	bf00      	nop
 800158c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	2000009c 	.word	0x2000009c

08001598 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015ae:	797b      	ldrb	r3, [r7, #5]
 80015b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	b299      	uxth	r1, r3
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	230a      	movs	r3, #10
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2302      	movs	r3, #2
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <ssd1306_I2C_Write+0x38>)
 80015c2:	f000 fee3 	bl	800238c <HAL_I2C_Master_Transmit>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000009c 	.word	0x2000009c

080015d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_MspInit+0x5c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <HAL_MspInit+0x5c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_MspInit+0x5c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_MspInit+0x5c>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <HAL_MspInit+0x5c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <HAL_MspInit+0x5c>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_MspInit+0x60>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <HAL_MspInit+0x60>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000

08001638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a15      	ldr	r2, [pc, #84]	@ (80016a8 <HAL_I2C_MspInit+0x70>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d123      	bne.n	80016a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_I2C_MspInit+0x74>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <HAL_I2C_MspInit+0x74>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_I2C_MspInit+0x74>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23c0      	movs	r3, #192	@ 0xc0
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	480b      	ldr	r0, [pc, #44]	@ (80016b0 <HAL_I2C_MspInit+0x78>)
 8001684:	f000 fba2 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <HAL_I2C_MspInit+0x74>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <HAL_I2C_MspInit+0x74>)
 800168e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001692:	61d3      	str	r3, [r2, #28]
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <HAL_I2C_MspInit+0x74>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010c00 	.word	0x40010c00

080016b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <HAL_TIM_Base_MspInit+0x34>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10b      	bne.n	80016de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_TIM_Base_MspInit+0x38>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <HAL_TIM_Base_MspInit+0x38>)
 80016cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_TIM_Base_MspInit+0x38>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800170e:	d12c      	bne.n	800176a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	4a2f      	ldr	r2, [pc, #188]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	61d3      	str	r3, [r2, #28]
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a29      	ldr	r2, [pc, #164]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001740:	2303      	movs	r3, #3
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4619      	mov	r1, r3
 8001752:	4821      	ldr	r0, [pc, #132]	@ (80017d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001754:	f000 fb3a 	bl	8001dcc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	201c      	movs	r0, #28
 800175e:	f000 fafe 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001762:	201c      	movs	r0, #28
 8001764:	f000 fb17 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001768:	e030      	b.n	80017cc <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1b      	ldr	r2, [pc, #108]	@ (80017dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d12b      	bne.n	80017cc <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001774:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	61d3      	str	r3, [r2, #28]
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a4:	23c0      	movs	r3, #192	@ 0xc0
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0318 	add.w	r3, r7, #24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80017b8:	f000 fb08 	bl	8001dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	201d      	movs	r0, #29
 80017c2:	f000 facc 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c6:	201d      	movs	r0, #29
 80017c8:	f000 fae5 	bl	8001d96 <HAL_NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	@ 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010800 	.word	0x40010800
 80017dc:	40000400 	.word	0x40000400

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a10      	ldr	r2, [pc, #64]	@ (800183c <HAL_TIM_MspPostInit+0x5c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d118      	bne.n	8001832 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <HAL_TIM_MspPostInit+0x60>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <HAL_TIM_MspPostInit+0x60>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <HAL_TIM_MspPostInit+0x60>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001818:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800181c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <HAL_TIM_MspPostInit+0x64>)
 800182e:	f000 facd 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40012c00 	.word	0x40012c00
 8001840:	40021000 	.word	0x40021000
 8001844:	40010800 	.word	0x40010800

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <MemManage_Handler+0x4>

08001860 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f94a 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <TIM2_IRQHandler+0x10>)
 80018a6:	f002 fd95 	bl	80043d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000548 	.word	0x20000548

080018b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <TIM3_IRQHandler+0x10>)
 80018ba:	f002 fd8b 	bl	80043d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000590 	.word	0x20000590

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <_kill>:

int _kill(int pid, int sig)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e0:	f005 fa12 	bl	8006d08 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2216      	movs	r2, #22
 80018e8:	601a      	str	r2, [r3, #0]
  return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_exit>:

void _exit (int status)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffe7 	bl	80018d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
  }

  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
  }
  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a4:	605a      	str	r2, [r3, #4]
  return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <_isatty>:

int _isatty(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f005 f97a 	bl	8006d08 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20005000 	.word	0x20005000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	200004f8 	.word	0x200004f8
 8001a48:	20000c20 	.word	0x20000c20

08001a4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a58:	f7ff fff8 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a5c:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a5e:	490c      	ldr	r1, [pc, #48]	@ (8001a90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a60:	4a0c      	ldr	r2, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a09      	ldr	r2, [pc, #36]	@ (8001a98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a74:	4c09      	ldr	r4, [pc, #36]	@ (8001a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a82:	f005 f947 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a86:	f7fe ff55 	bl	8000934 <main>
  bx lr
 8001a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a94:	080084dc 	.word	0x080084dc
  ldr r2, =_sbss
 8001a98:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a9c:	20000c20 	.word	0x20000c20

08001aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC1_2_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_Init+0x28>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_Init+0x28>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 f947 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aba:	200f      	movs	r0, #15
 8001abc:	f000 f808 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac0:	f7ff fd88 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0x54>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_InitTick+0x58>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f95f 	bl	8001db2 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 f927 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <HAL_InitTick+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	2000000c 	.word	0x2000000c

08001b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_IncTick+0x1c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a03      	ldr	r2, [pc, #12]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000010 	.word	0x20000010
 8001b50:	200004fc 	.word	0x200004fc

08001b54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b02      	ldr	r3, [pc, #8]	@ (8001b64 <HAL_GetTick+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	200004fc 	.word	0x200004fc

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffe0 	bl	8001b54 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000010 	.word	0x20000010

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4906      	ldr	r1, [pc, #24]	@ (8001c48 <__NVIC_EnableIRQ+0x34>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff90 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff2d 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff42 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff90 	bl	8001ca0 <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5f 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff35 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b08b      	sub	sp, #44	@ 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e169      	b.n	80020b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de0:	2201      	movs	r2, #1
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8158 	bne.w	80020ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a9a      	ldr	r2, [pc, #616]	@ (800206c <HAL_GPIO_Init+0x2a0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05e      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e08:	4a98      	ldr	r2, [pc, #608]	@ (800206c <HAL_GPIO_Init+0x2a0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d875      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e0e:	4a98      	ldr	r2, [pc, #608]	@ (8002070 <HAL_GPIO_Init+0x2a4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d058      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e14:	4a96      	ldr	r2, [pc, #600]	@ (8002070 <HAL_GPIO_Init+0x2a4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d86f      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e1a:	4a96      	ldr	r2, [pc, #600]	@ (8002074 <HAL_GPIO_Init+0x2a8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d052      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e20:	4a94      	ldr	r2, [pc, #592]	@ (8002074 <HAL_GPIO_Init+0x2a8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d869      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e26:	4a94      	ldr	r2, [pc, #592]	@ (8002078 <HAL_GPIO_Init+0x2ac>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04c      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a92      	ldr	r2, [pc, #584]	@ (8002078 <HAL_GPIO_Init+0x2ac>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d863      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e32:	4a92      	ldr	r2, [pc, #584]	@ (800207c <HAL_GPIO_Init+0x2b0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d046      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e38:	4a90      	ldr	r2, [pc, #576]	@ (800207c <HAL_GPIO_Init+0x2b0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d85d      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d82a      	bhi.n	8001e98 <HAL_GPIO_Init+0xcc>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d859      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e46:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <HAL_GPIO_Init+0x80>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ea1 	.word	0x08001ea1
 8001e54:	08001eb3 	.word	0x08001eb3
 8001e58:	08001ef5 	.word	0x08001ef5
 8001e5c:	08001efb 	.word	0x08001efb
 8001e60:	08001efb 	.word	0x08001efb
 8001e64:	08001efb 	.word	0x08001efb
 8001e68:	08001efb 	.word	0x08001efb
 8001e6c:	08001efb 	.word	0x08001efb
 8001e70:	08001efb 	.word	0x08001efb
 8001e74:	08001efb 	.word	0x08001efb
 8001e78:	08001efb 	.word	0x08001efb
 8001e7c:	08001efb 	.word	0x08001efb
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001efb 	.word	0x08001efb
 8001e88:	08001efb 	.word	0x08001efb
 8001e8c:	08001efb 	.word	0x08001efb
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001ebd 	.word	0x08001ebd
 8001e98:	4a79      	ldr	r2, [pc, #484]	@ (8002080 <HAL_GPIO_Init+0x2b4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9e:	e02c      	b.n	8001efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e029      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	3304      	adds	r3, #4
 8001eae:	623b      	str	r3, [r7, #32]
          break;
 8001eb0:	e024      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	3308      	adds	r3, #8
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e01f      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e01a      	b.n	8001efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e013      	b.n	8001efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001edc:	2308      	movs	r3, #8
 8001ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	611a      	str	r2, [r3, #16]
          break;
 8001ee6:	e009      	b.n	8001efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	615a      	str	r2, [r3, #20]
          break;
 8001ef2:	e003      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e000      	b.n	8001efc <HAL_GPIO_Init+0x130>
          break;
 8001efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	@ 0xff
 8001f00:	d801      	bhi.n	8001f06 <HAL_GPIO_Init+0x13a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_Init+0x13e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	@ 0xff
 8001f10:	d802      	bhi.n	8001f18 <HAL_GPIO_Init+0x14c>
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x152>
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	3b08      	subs	r3, #8
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	210f      	movs	r1, #15
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80b1 	beq.w	80020ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	@ (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b4a      	ldr	r3, [pc, #296]	@ (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f64:	4a48      	ldr	r2, [pc, #288]	@ (8002088 <HAL_GPIO_Init+0x2bc>)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a40      	ldr	r2, [pc, #256]	@ (800208c <HAL_GPIO_Init+0x2c0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3f      	ldr	r2, [pc, #252]	@ (8002090 <HAL_GPIO_Init+0x2c4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00d      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002094 <HAL_GPIO_Init+0x2c8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8002098 <HAL_GPIO_Init+0x2cc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_GPIO_Init+0x1e0>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fac:	2304      	movs	r3, #4
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fca:	492f      	ldr	r1, [pc, #188]	@ (8002088 <HAL_GPIO_Init+0x2bc>)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	492c      	ldr	r1, [pc, #176]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4928      	ldr	r1, [pc, #160]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800200c:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4922      	ldr	r1, [pc, #136]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	491e      	ldr	r1, [pc, #120]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8002024:	4013      	ands	r3, r2
 8002026:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4918      	ldr	r1, [pc, #96]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002042:	4b16      	ldr	r3, [pc, #88]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4914      	ldr	r1, [pc, #80]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 800204c:	4013      	ands	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d021      	beq.n	80020a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	490e      	ldr	r1, [pc, #56]	@ (800209c <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e021      	b.n	80020ae <HAL_GPIO_Init+0x2e2>
 800206a:	bf00      	nop
 800206c:	10320000 	.word	0x10320000
 8002070:	10310000 	.word	0x10310000
 8002074:	10220000 	.word	0x10220000
 8002078:	10210000 	.word	0x10210000
 800207c:	10120000 	.word	0x10120000
 8002080:	10110000 	.word	0x10110000
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	40010800 	.word	0x40010800
 8002090:	40010c00 	.word	0x40010c00
 8002094:	40011000 	.word	0x40011000
 8002098:	40011400 	.word	0x40011400
 800209c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4909      	ldr	r1, [pc, #36]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	3301      	adds	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f47f ae8e 	bne.w	8001de0 <HAL_GPIO_Init+0x14>
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	372c      	adds	r7, #44	@ 0x2c
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e12b      	b.n	800236e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fa84 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	@ 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002168:	f001 fe88 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 800216c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a81      	ldr	r2, [pc, #516]	@ (8002378 <HAL_I2C_Init+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d807      	bhi.n	8002188 <HAL_I2C_Init+0x84>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a80      	ldr	r2, [pc, #512]	@ (800237c <HAL_I2C_Init+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	bf94      	ite	ls
 8002180:	2301      	movls	r3, #1
 8002182:	2300      	movhi	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e006      	b.n	8002196 <HAL_I2C_Init+0x92>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a7d      	ldr	r2, [pc, #500]	@ (8002380 <HAL_I2C_Init+0x27c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0e7      	b.n	800236e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a78      	ldr	r2, [pc, #480]	@ (8002384 <HAL_I2C_Init+0x280>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002378 <HAL_I2C_Init+0x274>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d802      	bhi.n	80021d8 <HAL_I2C_Init+0xd4>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3301      	adds	r3, #1
 80021d6:	e009      	b.n	80021ec <HAL_I2C_Init+0xe8>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a69      	ldr	r2, [pc, #420]	@ (8002388 <HAL_I2C_Init+0x284>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	3301      	adds	r3, #1
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	495c      	ldr	r1, [pc, #368]	@ (8002378 <HAL_I2C_Init+0x274>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d819      	bhi.n	8002240 <HAL_I2C_Init+0x13c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e59      	subs	r1, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fbb1 f3f3 	udiv	r3, r1, r3
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002220:	400b      	ands	r3, r1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_I2C_Init+0x138>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e59      	subs	r1, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fbb1 f3f3 	udiv	r3, r1, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223a:	e051      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800223c:	2304      	movs	r3, #4
 800223e:	e04f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_I2C_Init+0x168>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e012      	b.n	8002292 <HAL_I2C_Init+0x18e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	0099      	lsls	r1, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Init+0x196>
 8002296:	2301      	movs	r3, #1
 8002298:	e022      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <HAL_I2C_Init+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e58      	subs	r0, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	440b      	add	r3, r1
 80022b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022be:	e00f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	6809      	ldr	r1, [r1, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800230e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6911      	ldr	r1, [r2, #16]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68d2      	ldr	r2, [r2, #12]
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	000186a0 	.word	0x000186a0
 800237c:	001e847f 	.word	0x001e847f
 8002380:	003d08ff 	.word	0x003d08ff
 8002384:	431bde83 	.word	0x431bde83
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	461a      	mov	r2, r3
 8002398:	460b      	mov	r3, r1
 800239a:	817b      	strh	r3, [r7, #10]
 800239c:	4613      	mov	r3, r2
 800239e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff fbd8 	bl	8001b54 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	f040 80e0 	bne.w	8002574 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2319      	movs	r3, #25
 80023ba:	2201      	movs	r2, #1
 80023bc:	4970      	ldr	r1, [pc, #448]	@ (8002580 <HAL_I2C_Master_Transmit+0x1f4>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 ff5c 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0d3      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_I2C_Master_Transmit+0x50>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0cc      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d007      	beq.n	8002402 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2221      	movs	r2, #33	@ 0x21
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2210      	movs	r2, #16
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	893a      	ldrh	r2, [r7, #8]
 8002432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a50      	ldr	r2, [pc, #320]	@ (8002584 <HAL_I2C_Master_Transmit+0x1f8>)
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fd30 	bl	8002eb0 <I2C_MasterRequestWrite>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e08d      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002470:	e066      	b.n	8002540 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f001 f81a 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2b04      	cmp	r3, #4
 8002488:	d107      	bne.n	800249a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06b      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d11b      	bne.n	8002514 <HAL_I2C_Master_Transmit+0x188>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d017      	beq.n	8002514 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6a39      	ldr	r1, [r7, #32]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f001 f811 	bl	8003540 <I2C_WaitOnBTFFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2b04      	cmp	r3, #4
 800252a:	d107      	bne.n	800253c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e01a      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d194      	bne.n	8002472 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000

08002588 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	461a      	mov	r2, r3
 8002594:	460b      	mov	r3, r1
 8002596:	817b      	strh	r3, [r7, #10]
 8002598:	4613      	mov	r3, r2
 800259a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff fad8 	bl	8001b54 <HAL_GetTick>
 80025a4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	f040 824b 	bne.w	8002a4a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2319      	movs	r3, #25
 80025ba:	2201      	movs	r2, #1
 80025bc:	497f      	ldr	r1, [pc, #508]	@ (80027bc <HAL_I2C_Master_Receive+0x234>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fe5c 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	e23e      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_I2C_Master_Receive+0x54>
 80025d8:	2302      	movs	r3, #2
 80025da:	e237      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d007      	beq.n	8002602 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2222      	movs	r2, #34	@ 0x22
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2210      	movs	r2, #16
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	893a      	ldrh	r2, [r7, #8]
 8002632:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a5f      	ldr	r2, [pc, #380]	@ (80027c0 <HAL_I2C_Master_Receive+0x238>)
 8002642:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fcb2 	bl	8002fb4 <I2C_MasterRequestRead>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1f8      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265e:	2b00      	cmp	r3, #0
 8002660:	d113      	bne.n	800268a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e1cc      	b.n	8002a24 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268e:	2b01      	cmp	r3, #1
 8002690:	d11e      	bne.n	80026d0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026a2:	b672      	cpsid	i
}
 80026a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026cc:	b662      	cpsie	i
}
 80026ce:	e035      	b.n	800273c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d11e      	bne.n	8002716 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002710:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002712:	b662      	cpsie	i
}
 8002714:	e012      	b.n	800273c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800273c:	e172      	b.n	8002a24 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	2b03      	cmp	r3, #3
 8002744:	f200 811f 	bhi.w	8002986 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	2b01      	cmp	r3, #1
 800274e:	d123      	bne.n	8002798 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002752:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 ff3b 	bl	80035d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e173      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002796:	e145      	b.n	8002a24 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279c:	2b02      	cmp	r3, #2
 800279e:	d152      	bne.n	8002846 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	2200      	movs	r2, #0
 80027a8:	4906      	ldr	r1, [pc, #24]	@ (80027c4 <HAL_I2C_Master_Receive+0x23c>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fd66 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e148      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
 80027ba:	bf00      	nop
 80027bc:	00100002 	.word	0x00100002
 80027c0:	ffff0000 	.word	0xffff0000
 80027c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80027c8:	b672      	cpsid	i
}
 80027ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800280e:	b662      	cpsie	i
}
 8002810:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002844:	e0ee      	b.n	8002a24 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	2200      	movs	r2, #0
 800284e:	4981      	ldr	r1, [pc, #516]	@ (8002a54 <HAL_I2C_Master_Receive+0x4cc>)
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fd13 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0f5      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800286e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a58 <HAL_I2C_Master_Receive+0x4d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	08db      	lsrs	r3, r3, #3
 80028ac:	4a6b      	ldr	r2, [pc, #428]	@ (8002a5c <HAL_I2C_Master_Receive+0x4d4>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0a1a      	lsrs	r2, r3, #8
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00da      	lsls	r2, r3, #3
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d118      	bne.n	80028fe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80028ee:	b662      	cpsie	i
}
 80028f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0a6      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d1d9      	bne.n	80028c0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800294e:	b662      	cpsie	i
}
 8002950:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002984:	e04e      	b.n	8002a24 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002988:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fe20 	bl	80035d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e058      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d124      	bne.n	8002a24 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f ae88 	bne.w	800273e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3728      	adds	r7, #40	@ 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	00010004 	.word	0x00010004
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	14f8b589 	.word	0x14f8b589

08002a60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7a:	f7ff f86b 	bl	8001b54 <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	f040 80d9 	bne.w	8002c40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2319      	movs	r3, #25
 8002a94:	2201      	movs	r2, #1
 8002a96:	496d      	ldr	r1, [pc, #436]	@ (8002c4c <HAL_I2C_Mem_Write+0x1ec>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fbef 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0cc      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Mem_Write+0x56>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e0c5      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d007      	beq.n	8002adc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	@ 0x21
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c50 <HAL_I2C_Mem_Write+0x1f0>)
 8002b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1e:	88f8      	ldrh	r0, [r7, #6]
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fb0e 	bl	8003150 <I2C_RequestMemoryWrite>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d052      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e081      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fcb4 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06b      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d11b      	bne.n	8002be0 <HAL_I2C_Mem_Write+0x180>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d017      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1aa      	bne.n	8002b3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fca7 	bl	8003540 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e016      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000

08002c54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	460b      	mov	r3, r1
 8002c62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7fe ff76 	bl	8001b54 <HAL_GetTick>
 8002c68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	f040 8111 	bne.w	8002e9e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2319      	movs	r3, #25
 8002c82:	2201      	movs	r2, #1
 8002c84:	4988      	ldr	r1, [pc, #544]	@ (8002ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 faf8 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	e104      	b.n	8002ea0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2C_IsDeviceReady+0x50>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0fd      	b.n	8002ea0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d007      	beq.n	8002cca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2224      	movs	r2, #36	@ 0x24
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a70      	ldr	r2, [pc, #448]	@ (8002eac <HAL_I2C_IsDeviceReady+0x258>)
 8002cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fab6 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d24:	d103      	bne.n	8002d2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0b6      	b.n	8002ea0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d42:	f7fe ff07 	bl	8001b54 <HAL_GetTick>
 8002d46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	bf0c      	ite	eq
 8002d56:	2301      	moveq	r3, #1
 8002d58:	2300      	movne	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d76:	e025      	b.n	8002dc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d78:	f7fe feec 	bl	8001b54 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <HAL_I2C_IsDeviceReady+0x13a>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	22a0      	movs	r2, #160	@ 0xa0
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dce:	d005      	beq.n	8002ddc <HAL_I2C_IsDeviceReady+0x188>
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_I2C_IsDeviceReady+0x188>
 8002dd6:	7dbb      	ldrb	r3, [r7, #22]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0cd      	beq.n	8002d78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d129      	bne.n	8002e46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e00:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2319      	movs	r3, #25
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4921      	ldr	r1, [pc, #132]	@ (8002ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fa2a 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e036      	b.n	8002ea0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e02c      	b.n	8002ea0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e54:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e5e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2319      	movs	r3, #25
 8002e66:	2201      	movs	r2, #1
 8002e68:	490f      	ldr	r1, [pc, #60]	@ (8002ea8 <HAL_I2C_IsDeviceReady+0x254>)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fa06 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e012      	b.n	8002ea0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f4ff af32 	bcc.w	8002cee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	00100002 	.word	0x00100002
 8002eac:	ffff0000 	.word	0xffff0000

08002eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d006      	beq.n	8002eda <I2C_MasterRequestWrite+0x2a>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d003      	beq.n	8002eda <I2C_MasterRequestWrite+0x2a>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ed8:	d108      	bne.n	8002eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e00b      	b.n	8002f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	2b12      	cmp	r3, #18
 8002ef2:	d107      	bne.n	8002f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f9b3 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2a:	d103      	bne.n	8002f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e035      	b.n	8002fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f40:	d108      	bne.n	8002f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f50:	611a      	str	r2, [r3, #16]
 8002f52:	e01b      	b.n	8002f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f54:	897b      	ldrh	r3, [r7, #10]
 8002f56:	11db      	asrs	r3, r3, #7
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 0306 	and.w	r3, r3, #6
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f063 030f 	orn	r3, r3, #15
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	490e      	ldr	r1, [pc, #56]	@ (8002fac <I2C_MasterRequestWrite+0xfc>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f9fc 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e010      	b.n	8002fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f82:	897b      	ldrh	r3, [r7, #10]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4907      	ldr	r1, [pc, #28]	@ (8002fb0 <I2C_MasterRequestWrite+0x100>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f9ec 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	00010008 	.word	0x00010008
 8002fb0:	00010002 	.word	0x00010002

08002fb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d006      	beq.n	8002fee <I2C_MasterRequestRead+0x3a>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d003      	beq.n	8002fee <I2C_MasterRequestRead+0x3a>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fec:	d108      	bne.n	8003000 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e00b      	b.n	8003018 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	2b11      	cmp	r3, #17
 8003006:	d107      	bne.n	8003018 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f929 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303e:	d103      	bne.n	8003048 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e079      	b.n	8003140 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003054:	d108      	bne.n	8003068 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003056:	897b      	ldrh	r3, [r7, #10]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	611a      	str	r2, [r3, #16]
 8003066:	e05f      	b.n	8003128 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	11db      	asrs	r3, r3, #7
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0306 	and.w	r3, r3, #6
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f063 030f 	orn	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4930      	ldr	r1, [pc, #192]	@ (8003148 <I2C_MasterRequestRead+0x194>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f972 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e054      	b.n	8003140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4929      	ldr	r1, [pc, #164]	@ (800314c <I2C_MasterRequestRead+0x198>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f962 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e044      	b.n	8003140 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8c7 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003102:	d103      	bne.n	800310c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e017      	b.n	8003140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	11db      	asrs	r3, r3, #7
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f003 0306 	and.w	r3, r3, #6
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f063 030e 	orn	r3, r3, #14
 8003120:	b2da      	uxtb	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4907      	ldr	r1, [pc, #28]	@ (800314c <I2C_MasterRequestRead+0x198>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f91e 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	00010008 	.word	0x00010008
 800314c:	00010002 	.word	0x00010002

08003150 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	817b      	strh	r3, [r7, #10]
 8003162:	460b      	mov	r3, r1
 8003164:	813b      	strh	r3, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	2200      	movs	r2, #0
 8003182:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f878 	bl	800327c <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031a0:	d103      	bne.n	80031aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e05f      	b.n	800326e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	492d      	ldr	r1, [pc, #180]	@ (8003278 <I2C_RequestMemoryWrite+0x128>)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f8d3 	bl	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e04c      	b.n	800326e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ec:	6a39      	ldr	r1, [r7, #32]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f95e 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d107      	bne.n	8003212 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e02b      	b.n	800326e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	e021      	b.n	800326c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003228:	893b      	ldrh	r3, [r7, #8]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	b29b      	uxth	r3, r3
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f938 	bl	80034b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b04      	cmp	r3, #4
 800324c:	d107      	bne.n	800325e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e005      	b.n	800326e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003262:	893b      	ldrh	r3, [r7, #8]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	00010002 	.word	0x00010002

0800327c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800328c:	e048      	b.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d044      	beq.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fe fc5d 	bl	8001b54 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d139      	bne.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10d      	bne.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	43da      	mvns	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	e00c      	b.n	80032ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	43da      	mvns	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d116      	bne.n	8003320 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e023      	b.n	8003368 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	0c1b      	lsrs	r3, r3, #16
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10d      	bne.n	8003346 <I2C_WaitOnFlagUntilTimeout+0xca>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	e00c      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	43da      	mvns	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	429a      	cmp	r2, r3
 8003364:	d093      	beq.n	800328e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800337e:	e071      	b.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338e:	d123      	bne.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f043 0204 	orr.w	r2, r3, #4
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e067      	b.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d041      	beq.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e0:	f7fe fbb8 	bl	8001b54 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d302      	bcc.n	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d136      	bne.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10c      	bne.n	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	43da      	mvns	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e00b      	b.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	43da      	mvns	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4013      	ands	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d016      	beq.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e021      	b.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10c      	bne.n	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e00b      	b.n	80034a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f47f af6d 	bne.w	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034bc:	e034      	b.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f8e3 	bl	800368a <I2C_IsAcknowledgeFailed>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e034      	b.n	8003538 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d028      	beq.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fe fb3d 	bl	8001b54 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11d      	bne.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	2b80      	cmp	r3, #128	@ 0x80
 80034f8:	d016      	beq.n	8003528 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	2b80      	cmp	r3, #128	@ 0x80
 8003534:	d1c3      	bne.n	80034be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800354c:	e034      	b.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f89b 	bl	800368a <I2C_IsAcknowledgeFailed>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e034      	b.n	80035c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d028      	beq.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fe faf5 	bl	8001b54 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d11d      	bne.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d016      	beq.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e007      	b.n	80035c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d1c3      	bne.n	800354e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035dc:	e049      	b.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d119      	bne.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0210 	mvn.w	r2, #16
 80035f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e030      	b.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003620:	f7fe fa98 	bl	8001b54 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11d      	bne.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b40      	cmp	r3, #64	@ 0x40
 8003642:	d016      	beq.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e007      	b.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	d1ae      	bne.n	80035de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a0:	d11b      	bne.n	80036da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f043 0204 	orr.w	r2, r3, #4
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e272      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8087 	beq.w	8003816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003708:	4b92      	ldr	r3, [pc, #584]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b04      	cmp	r3, #4
 8003712:	d00c      	beq.n	800372e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003714:	4b8f      	ldr	r3, [pc, #572]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	d112      	bne.n	8003746 <HAL_RCC_OscConfig+0x5e>
 8003720:	4b8c      	ldr	r3, [pc, #560]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372c:	d10b      	bne.n	8003746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372e:	4b89      	ldr	r3, [pc, #548]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d06c      	beq.n	8003814 <HAL_RCC_OscConfig+0x12c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d168      	bne.n	8003814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e24c      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x76>
 8003750:	4b80      	ldr	r3, [pc, #512]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a7f      	ldr	r2, [pc, #508]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e02e      	b.n	80037bc <HAL_RCC_OscConfig+0xd4>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x98>
 8003766:	4b7b      	ldr	r3, [pc, #492]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a7a      	ldr	r2, [pc, #488]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b78      	ldr	r3, [pc, #480]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a77      	ldr	r2, [pc, #476]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0xd4>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0xbc>
 800378a:	4b72      	ldr	r3, [pc, #456]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a71      	ldr	r2, [pc, #452]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b6f      	ldr	r3, [pc, #444]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6e      	ldr	r2, [pc, #440]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xd4>
 80037a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b68      	ldr	r3, [pc, #416]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a67      	ldr	r2, [pc, #412]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe f9c6 	bl	8001b54 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe f9c2 	bl	8001b54 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	@ 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e200      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b5d      	ldr	r3, [pc, #372]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0xe4>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe f9b2 	bl	8001b54 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe f9ae 	bl	8001b54 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	@ 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1ec      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x10c>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d063      	beq.n	80038ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003822:	4b4c      	ldr	r3, [pc, #304]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800382e:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b08      	cmp	r3, #8
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x18c>
 800383a:	4b46      	ldr	r3, [pc, #280]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x176>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1c0      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b3d      	ldr	r3, [pc, #244]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4939      	ldr	r1, [pc, #228]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e03a      	b.n	80038ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b36      	ldr	r3, [pc, #216]	@ (8003958 <HAL_RCC_OscConfig+0x270>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fe f967 	bl	8001b54 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388a:	f7fe f963 	bl	8001b54 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1a1      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4927      	ldr	r1, [pc, #156]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <HAL_RCC_OscConfig+0x270>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe f946 	bl	8001b54 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fe f942 	bl	8001b54 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e180      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03a      	beq.n	800396c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d019      	beq.n	8003932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b17      	ldr	r3, [pc, #92]	@ (800395c <HAL_RCC_OscConfig+0x274>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003904:	f7fe f926 	bl	8001b54 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fe f922 	bl	8001b54 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e160      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <HAL_RCC_OscConfig+0x26c>)
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800392a:	2001      	movs	r0, #1
 800392c:	f000 faba 	bl	8003ea4 <RCC_Delay>
 8003930:	e01c      	b.n	800396c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003932:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <HAL_RCC_OscConfig+0x274>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003938:	f7fe f90c 	bl	8001b54 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393e:	e00f      	b.n	8003960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003940:	f7fe f908 	bl	8001b54 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d908      	bls.n	8003960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e146      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	42420000 	.word	0x42420000
 800395c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	4b92      	ldr	r3, [pc, #584]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e9      	bne.n	8003940 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a6 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	4b88      	ldr	r3, [pc, #544]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4a87      	ldr	r2, [pc, #540]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003994:	61d3      	str	r3, [r2, #28]
 8003996:	4b85      	ldr	r3, [pc, #532]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a6:	4b82      	ldr	r3, [pc, #520]	@ (8003bb0 <HAL_RCC_OscConfig+0x4c8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d118      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb0 <HAL_RCC_OscConfig+0x4c8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a7e      	ldr	r2, [pc, #504]	@ (8003bb0 <HAL_RCC_OscConfig+0x4c8>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039be:	f7fe f8c9 	bl	8001b54 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c6:	f7fe f8c5 	bl	8001b54 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b64      	cmp	r3, #100	@ 0x64
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e103      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d8:	4b75      	ldr	r3, [pc, #468]	@ (8003bb0 <HAL_RCC_OscConfig+0x4c8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x312>
 80039ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6213      	str	r3, [r2, #32]
 80039f8:	e02d      	b.n	8003a56 <HAL_RCC_OscConfig+0x36e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x334>
 8003a02:	4b6a      	ldr	r3, [pc, #424]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a69      	ldr	r2, [pc, #420]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6213      	str	r3, [r2, #32]
 8003a0e:	4b67      	ldr	r3, [pc, #412]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a66      	ldr	r2, [pc, #408]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCC_OscConfig+0x36e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x356>
 8003a24:	4b61      	ldr	r3, [pc, #388]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4a60      	ldr	r2, [pc, #384]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	6213      	str	r3, [r2, #32]
 8003a30:	4b5e      	ldr	r3, [pc, #376]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4a5d      	ldr	r2, [pc, #372]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6213      	str	r3, [r2, #32]
 8003a3c:	e00b      	b.n	8003a56 <HAL_RCC_OscConfig+0x36e>
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4a5a      	ldr	r2, [pc, #360]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6213      	str	r3, [r2, #32]
 8003a4a:	4b58      	ldr	r3, [pc, #352]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a57      	ldr	r2, [pc, #348]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d015      	beq.n	8003a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5e:	f7fe f879 	bl	8001b54 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fe f875 	bl	8001b54 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0b1      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ee      	beq.n	8003a66 <HAL_RCC_OscConfig+0x37e>
 8003a88:	e014      	b.n	8003ab4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7fe f863 	bl	8001b54 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fe f85f 	bl	8001b54 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e09b      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	4b40      	ldr	r3, [pc, #256]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ee      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	4b3c      	ldr	r3, [pc, #240]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	4a3b      	ldr	r2, [pc, #236]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8087 	beq.w	8003bde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad0:	4b36      	ldr	r3, [pc, #216]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d061      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d146      	bne.n	8003b72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b33      	ldr	r3, [pc, #204]	@ (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe f833 	bl	8001b54 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fe f82f 	bl	8001b54 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e06d      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b04:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b18:	d108      	bne.n	8003b2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b1a:	4b24      	ldr	r3, [pc, #144]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	4921      	ldr	r1, [pc, #132]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a19      	ldr	r1, [r3, #32]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	491b      	ldr	r1, [pc, #108]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fe f803 	bl	8001b54 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fd ffff 	bl	8001b54 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e03d      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b64:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x46a>
 8003b70:	e035      	b.n	8003bde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b10      	ldr	r3, [pc, #64]	@ (8003bb4 <HAL_RCC_OscConfig+0x4cc>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fd ffec 	bl	8001b54 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd ffe8 	bl	8001b54 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e026      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b92:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x498>
 8003b9e:	e01e      	b.n	8003bde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e019      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_RCC_OscConfig+0x500>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0d0      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b6a      	ldr	r3, [pc, #424]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d910      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b67      	ldr	r3, [pc, #412]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0207 	bic.w	r2, r3, #7
 8003c16:	4965      	ldr	r1, [pc, #404]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a52      	ldr	r2, [pc, #328]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d040      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d115      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b41      	ldr	r3, [pc, #260]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e073      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3d      	ldr	r3, [pc, #244]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06b      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b39      	ldr	r3, [pc, #228]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4936      	ldr	r1, [pc, #216]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd ff3a 	bl	8001b54 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd ff36 	bl	8001b54 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e053      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d210      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0207 	bic.w	r2, r3, #7
 8003d22:	4922      	ldr	r1, [pc, #136]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d66:	4b12      	ldr	r3, [pc, #72]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	490a      	ldr	r1, [pc, #40]	@ (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	@ (8003db8 <HAL_RCC_ClockConfig+0x1cc>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_ClockConfig+0x1d0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fe98 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40022000 	.word	0x40022000
 8003db0:	40021000 	.word	0x40021000
 8003db4:	08008474 	.word	0x08008474
 8003db8:	20000008 	.word	0x20000008
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dda:	4b1e      	ldr	r3, [pc, #120]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d002      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x30>
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dee:	e027      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003df0:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003df2:	613b      	str	r3, [r7, #16]
      break;
 8003df4:	e027      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	0c9b      	lsrs	r3, r3, #18
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	4a17      	ldr	r2, [pc, #92]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e0e:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0c5b      	lsrs	r3, r3, #17
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	4a11      	ldr	r2, [pc, #68]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a0d      	ldr	r2, [pc, #52]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e22:	fb03 f202 	mul.w	r2, r3, r2
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e004      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a0c      	ldr	r2, [pc, #48]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	613b      	str	r3, [r7, #16]
      break;
 8003e3e:	e002      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e42:	613b      	str	r3, [r7, #16]
      break;
 8003e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e46:	693b      	ldr	r3, [r7, #16]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	007a1200 	.word	0x007a1200
 8003e5c:	0800848c 	.word	0x0800848c
 8003e60:	0800849c 	.word	0x0800849c
 8003e64:	003d0900 	.word	0x003d0900

08003e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b02      	ldr	r3, [pc, #8]	@ (8003e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	20000008 	.word	0x20000008

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff2 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	08008484 	.word	0x08008484

08003ea4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <RCC_Delay+0x34>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8003edc <RCC_Delay+0x38>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	0a5b      	lsrs	r3, r3, #9
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ec0:	bf00      	nop
  }
  while (Delay --);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1e5a      	subs	r2, r3, #1
 8003ec6:	60fa      	str	r2, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f9      	bne.n	8003ec0 <RCC_Delay+0x1c>
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	20000008 	.word	0x20000008
 8003edc:	10624dd3 	.word	0x10624dd3

08003ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd fbd4 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fcfe 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e041      	b.n	8004014 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f839 	bl	800401c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fcaf 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
	...

08004030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_TIM_PWM_Start+0x24>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e022      	b.n	800409a <HAL_TIM_PWM_Start+0x6a>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d109      	bne.n	800406e <HAL_TIM_PWM_Start+0x3e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e015      	b.n	800409a <HAL_TIM_PWM_Start+0x6a>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d109      	bne.n	8004088 <HAL_TIM_PWM_Start+0x58>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e008      	b.n	800409a <HAL_TIM_PWM_Start+0x6a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e05e      	b.n	8004160 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_PWM_Start+0x82>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b0:	e013      	b.n	80040da <HAL_TIM_PWM_Start+0xaa>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_PWM_Start+0x92>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c0:	e00b      	b.n	80040da <HAL_TIM_PWM_Start+0xaa>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d0:	e003      	b.n	80040da <HAL_TIM_PWM_Start+0xaa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2201      	movs	r2, #1
 80040e0:	6839      	ldr	r1, [r7, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fea8 	bl	8004e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004168 <HAL_TIM_PWM_Start+0x138>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d107      	bne.n	8004102 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <HAL_TIM_PWM_Start+0x138>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_TIM_PWM_Start+0xfa>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004114:	d009      	beq.n	800412a <HAL_TIM_PWM_Start+0xfa>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a14      	ldr	r2, [pc, #80]	@ (800416c <HAL_TIM_PWM_Start+0x13c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIM_PWM_Start+0xfa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a12      	ldr	r2, [pc, #72]	@ (8004170 <HAL_TIM_PWM_Start+0x140>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d111      	bne.n	800414e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d010      	beq.n	800415e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	e007      	b.n	800415e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800

08004174 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e093      	b.n	80042b0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fd faa7 	bl	80016f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041b8:	f023 0307 	bic.w	r3, r3, #7
 80041bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f000 fba9 	bl	8004920 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	4313      	orrs	r3, r2
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004214:	f023 030c 	bic.w	r3, r3, #12
 8004218:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004220:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	4313      	orrs	r3, r2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	011a      	lsls	r2, r3, #4
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	031b      	lsls	r3, r3, #12
 8004244:	4313      	orrs	r3, r2
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	4313      	orrs	r3, r2
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80042e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d110      	bne.n	800430a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d102      	bne.n	80042f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ee:	7b7b      	ldrb	r3, [r7, #13]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d001      	beq.n	80042f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e069      	b.n	80043cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004308:	e031      	b.n	800436e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d110      	bne.n	8004332 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004310:	7bbb      	ldrb	r3, [r7, #14]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004316:	7b3b      	ldrb	r3, [r7, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d001      	beq.n	8004320 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e055      	b.n	80043cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004330:	e01d      	b.n	800436e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d108      	bne.n	800434a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004338:	7bbb      	ldrb	r3, [r7, #14]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d105      	bne.n	800434a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	7b7b      	ldrb	r3, [r7, #13]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d102      	bne.n	800434a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004344:	7b3b      	ldrb	r3, [r7, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e03e      	b.n	80043cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_TIM_Encoder_Start+0xc4>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b04      	cmp	r3, #4
 8004378:	d008      	beq.n	800438c <HAL_TIM_Encoder_Start+0xd4>
 800437a:	e00f      	b.n	800439c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2201      	movs	r2, #1
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fd57 	bl	8004e38 <TIM_CCxChannelCmd>
      break;
 800438a:	e016      	b.n	80043ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	2104      	movs	r1, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd4f 	bl	8004e38 <TIM_CCxChannelCmd>
      break;
 800439a:	e00e      	b.n	80043ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd47 	bl	8004e38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	2104      	movs	r1, #4
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fd40 	bl	8004e38 <TIM_CCxChannelCmd>
      break;
 80043b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d020      	beq.n	8004438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0202 	mvn.w	r2, #2
 8004408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa63 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa56 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fa65 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d020      	beq.n	8004484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01b      	beq.n	8004484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0204 	mvn.w	r2, #4
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa3d 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa30 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fa3f 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d020      	beq.n	80044d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0208 	mvn.w	r2, #8
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2204      	movs	r2, #4
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa17 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fa0a 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fa19 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d020      	beq.n	800451c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0210 	mvn.w	r2, #16
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2208      	movs	r2, #8
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9f1 	bl	80048ea <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9e4 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9f3 	bl	80048fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00c      	beq.n	8004540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0201 	mvn.w	r2, #1
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9c3 	bl	80048c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fd46 	bl	8004ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9c3 	bl	800490e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0220 	mvn.w	r2, #32
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fd19 	bl	8004fde <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e0ae      	b.n	8004730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	f200 809f 	bhi.w	8004720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	08004721 	.word	0x08004721
 80045f0:	08004721 	.word	0x08004721
 80045f4:	08004721 	.word	0x08004721
 80045f8:	0800465d 	.word	0x0800465d
 80045fc:	08004721 	.word	0x08004721
 8004600:	08004721 	.word	0x08004721
 8004604:	08004721 	.word	0x08004721
 8004608:	0800469f 	.word	0x0800469f
 800460c:	08004721 	.word	0x08004721
 8004610:	08004721 	.word	0x08004721
 8004614:	08004721 	.word	0x08004721
 8004618:	080046df 	.word	0x080046df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f9ea 	bl	80049fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0208 	orr.w	r2, r2, #8
 8004636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0204 	bic.w	r2, r2, #4
 8004646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	619a      	str	r2, [r3, #24]
      break;
 800465a:	e064      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fa30 	bl	8004ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6999      	ldr	r1, [r3, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	021a      	lsls	r2, r3, #8
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	619a      	str	r2, [r3, #24]
      break;
 800469c:	e043      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fa79 	bl	8004b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0208 	orr.w	r2, r2, #8
 80046b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0204 	bic.w	r2, r2, #4
 80046c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	61da      	str	r2, [r3, #28]
      break;
 80046dc:	e023      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fac3 	bl	8004c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69d9      	ldr	r1, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	021a      	lsls	r2, r3, #8
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	61da      	str	r2, [r3, #28]
      break;
 800471e:	e002      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
      break;
 8004724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x1c>
 8004750:	2302      	movs	r3, #2
 8004752:	e0b4      	b.n	80048be <HAL_TIM_ConfigClockSource+0x186>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800477a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478c:	d03e      	beq.n	800480c <HAL_TIM_ConfigClockSource+0xd4>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004792:	f200 8087 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	f000 8086 	beq.w	80048aa <HAL_TIM_ConfigClockSource+0x172>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	d87f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d01a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xa6>
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d87b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d050      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x11a>
 80047b0:	2b60      	cmp	r3, #96	@ 0x60
 80047b2:	d877      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d03c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xfa>
 80047b8:	2b50      	cmp	r3, #80	@ 0x50
 80047ba:	d873      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d058      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x13a>
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d86f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d064      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047c8:	2b30      	cmp	r3, #48	@ 0x30
 80047ca:	d86b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d060      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d867      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d05a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	e062      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	f000 fb04 	bl	8004dfa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e04f      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481c:	f000 faed 	bl	8004dfa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482e:	609a      	str	r2, [r3, #8]
      break;
 8004830:	e03c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fa64 	bl	8004d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2150      	movs	r1, #80	@ 0x50
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fabb 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004850:	e02c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	461a      	mov	r2, r3
 8004860:	f000 fa82 	bl	8004d68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2160      	movs	r1, #96	@ 0x60
 800486a:	4618      	mov	r0, r3
 800486c:	f000 faab 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004870:	e01c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fa44 	bl	8004d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fa9b 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 8004890:	e00c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 fa92 	bl	8004dc6 <TIM_ITRx_SetConfig>
      break;
 80048a2:	e003      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      break;
 80048a8:	e000      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a2f      	ldr	r2, [pc, #188]	@ (80049f0 <TIM_Base_SetConfig+0xd0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00b      	beq.n	8004950 <TIM_Base_SetConfig+0x30>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493e:	d007      	beq.n	8004950 <TIM_Base_SetConfig+0x30>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a2c      	ldr	r2, [pc, #176]	@ (80049f4 <TIM_Base_SetConfig+0xd4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_Base_SetConfig+0x30>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a2b      	ldr	r2, [pc, #172]	@ (80049f8 <TIM_Base_SetConfig+0xd8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a22      	ldr	r2, [pc, #136]	@ (80049f0 <TIM_Base_SetConfig+0xd0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_Base_SetConfig+0x62>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004970:	d007      	beq.n	8004982 <TIM_Base_SetConfig+0x62>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1f      	ldr	r2, [pc, #124]	@ (80049f4 <TIM_Base_SetConfig+0xd4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_Base_SetConfig+0x62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1e      	ldr	r2, [pc, #120]	@ (80049f8 <TIM_Base_SetConfig+0xd8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a0d      	ldr	r2, [pc, #52]	@ (80049f0 <TIM_Base_SetConfig+0xd0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d103      	bne.n	80049c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]
  }
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800

080049fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f023 0201 	bic.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0302 	bic.w	r3, r3, #2
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <TIM_OC1_SetConfig+0xc8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10c      	bne.n	8004a72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0308 	bic.w	r3, r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a13      	ldr	r2, [pc, #76]	@ (8004ac4 <TIM_OC1_SetConfig+0xc8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d111      	bne.n	8004a9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00

08004ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f023 0210 	bic.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0320 	bic.w	r3, r3, #32
 8004b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <TIM_OC2_SetConfig+0xd0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10d      	bne.n	8004b44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <TIM_OC2_SetConfig+0xd0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d113      	bne.n	8004b74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00

08004b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <TIM_OC3_SetConfig+0xd0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10d      	bne.n	8004c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a14      	ldr	r2, [pc, #80]	@ (8004c6c <TIM_OC3_SetConfig+0xd0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d113      	bne.n	8004c46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	621a      	str	r2, [r3, #32]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40012c00 	.word	0x40012c00

08004c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a0f      	ldr	r2, [pc, #60]	@ (8004d08 <TIM_OC4_SetConfig+0x98>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d109      	bne.n	8004ce4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	019b      	lsls	r3, r3, #6
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00

08004d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f023 030a 	bic.w	r3, r3, #10
 8004d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0210 	bic.w	r2, r3, #16
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	031b      	lsls	r3, r3, #12
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004da4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr

08004dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f043 0307 	orr.w	r3, r3, #7
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	609a      	str	r2, [r3, #8]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr

08004dfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	021a      	lsls	r2, r3, #8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	609a      	str	r2, [r3, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	431a      	orrs	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e046      	b.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee4:	d009      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a12      	ldr	r2, [pc, #72]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a10      	ldr	r2, [pc, #64]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d10c      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800

08004f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e03d      	b.n	8004fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
	...

08005004 <foward>:
//    }
//}



void foward(){
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
	counterValueRight = 0;
 8005008:	4b5d      	ldr	r3, [pc, #372]	@ (8005180 <foward+0x17c>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
	counterValueLeft = 0;
 800500e:	4b5d      	ldr	r3, [pc, #372]	@ (8005184 <foward+0x180>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
	targetSpeed = 130;
 8005014:	4b5c      	ldr	r3, [pc, #368]	@ (8005188 <foward+0x184>)
 8005016:	2282      	movs	r2, #130	@ 0x82
 8005018:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800501a:	2200      	movs	r2, #0
 800501c:	2104      	movs	r1, #4
 800501e:	485b      	ldr	r0, [pc, #364]	@ (800518c <foward+0x188>)
 8005020:	f7fd f858 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8005024:	2032      	movs	r0, #50	@ 0x32
 8005026:	f7fc fd9f 	bl	8001b68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800502a:	2201      	movs	r2, #1
 800502c:	2104      	movs	r1, #4
 800502e:	4857      	ldr	r0, [pc, #348]	@ (800518c <foward+0x188>)
 8005030:	f7fd f850 	bl	80020d4 <HAL_GPIO_WritePin>


	counterValueRight = TIM3->CNT;
 8005034:	4b56      	ldr	r3, [pc, #344]	@ (8005190 <foward+0x18c>)
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	461a      	mov	r2, r3
 800503a:	4b51      	ldr	r3, [pc, #324]	@ (8005180 <foward+0x17c>)
 800503c:	601a      	str	r2, [r3, #0]
	counterValueLeft = TIM2->CNT;
 800503e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	461a      	mov	r2, r3
 8005046:	4b4f      	ldr	r3, [pc, #316]	@ (8005184 <foward+0x180>)
 8005048:	601a      	str	r2, [r3, #0]

	distance1 = readDistance(0x31);
 800504a:	2031      	movs	r0, #49	@ 0x31
 800504c:	f7fb fbcc 	bl	80007e8 <readDistance>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	4b4f      	ldr	r3, [pc, #316]	@ (8005194 <foward+0x190>)
 8005056:	801a      	strh	r2, [r3, #0]
	distance2 = readDistance(0x32);
 8005058:	2032      	movs	r0, #50	@ 0x32
 800505a:	f7fb fbc5 	bl	80007e8 <readDistance>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	4b4d      	ldr	r3, [pc, #308]	@ (8005198 <foward+0x194>)
 8005064:	801a      	strh	r2, [r3, #0]

	Correction = calculateCorrection(distance1,distance2,Kpencoder,Kdencoder);
 8005066:	4b4b      	ldr	r3, [pc, #300]	@ (8005194 <foward+0x190>)
 8005068:	8818      	ldrh	r0, [r3, #0]
 800506a:	4b4b      	ldr	r3, [pc, #300]	@ (8005198 <foward+0x194>)
 800506c:	8819      	ldrh	r1, [r3, #0]
 800506e:	4b4b      	ldr	r3, [pc, #300]	@ (800519c <foward+0x198>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b4b      	ldr	r3, [pc, #300]	@ (80051a0 <foward+0x19c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f001 f9b7 	bl	80063e8 <calculateCorrection>
 800507a:	4603      	mov	r3, r0
 800507c:	4a49      	ldr	r2, [pc, #292]	@ (80051a4 <foward+0x1a0>)
 800507e:	6013      	str	r3, [r2, #0]

	leftPWM = targetSpeed+Correction;
 8005080:	4b41      	ldr	r3, [pc, #260]	@ (8005188 <foward+0x184>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b47      	ldr	r3, [pc, #284]	@ (80051a4 <foward+0x1a0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4413      	add	r3, r2
 800508a:	4a47      	ldr	r2, [pc, #284]	@ (80051a8 <foward+0x1a4>)
 800508c:	6013      	str	r3, [r2, #0]
	rightPWM = targetSpeed-Correction;
 800508e:	4b3e      	ldr	r3, [pc, #248]	@ (8005188 <foward+0x184>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b44      	ldr	r3, [pc, #272]	@ (80051a4 <foward+0x1a0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	4a44      	ldr	r2, [pc, #272]	@ (80051ac <foward+0x1a8>)
 800509a:	6013      	str	r3, [r2, #0]

	leftPWM = constrain(leftPWM, 0, 200);
 800509c:	4b42      	ldr	r3, [pc, #264]	@ (80051a8 <foward+0x1a4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	22c8      	movs	r2, #200	@ 0xc8
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fb39 	bl	800571c <constrain>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a3e      	ldr	r2, [pc, #248]	@ (80051a8 <foward+0x1a4>)
 80050ae:	6013      	str	r3, [r2, #0]
	rightPWM = constrain(rightPWM, 0, 200);
 80050b0:	4b3e      	ldr	r3, [pc, #248]	@ (80051ac <foward+0x1a8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	22c8      	movs	r2, #200	@ 0xc8
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fb2f 	bl	800571c <constrain>
 80050be:	4603      	mov	r3, r0
 80050c0:	4a3a      	ldr	r2, [pc, #232]	@ (80051ac <foward+0x1a8>)
 80050c2:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80050c4:	2200      	movs	r2, #0
 80050c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050ca:	4830      	ldr	r0, [pc, #192]	@ (800518c <foward+0x188>)
 80050cc:	f7fd f802 	bl	80020d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80050d0:	2201      	movs	r2, #1
 80050d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050d6:	482d      	ldr	r0, [pc, #180]	@ (800518c <foward+0x188>)
 80050d8:	f7fc fffc 	bl	80020d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80050dc:	2201      	movs	r2, #1
 80050de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050e2:	482a      	ldr	r0, [pc, #168]	@ (800518c <foward+0x188>)
 80050e4:	f7fc fff6 	bl	80020d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80050e8:	2200      	movs	r2, #0
 80050ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050ee:	4827      	ldr	r0, [pc, #156]	@ (800518c <foward+0x188>)
 80050f0:	f7fc fff0 	bl	80020d4 <HAL_GPIO_WritePin>
		TIM1->CCR1 = leftPWM;
 80050f4:	4b2c      	ldr	r3, [pc, #176]	@ (80051a8 <foward+0x1a4>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b2d      	ldr	r3, [pc, #180]	@ (80051b0 <foward+0x1ac>)
 80050fa:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = rightPWM;
 80050fc:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <foward+0x1a8>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b2b      	ldr	r3, [pc, #172]	@ (80051b0 <foward+0x1ac>)
 8005102:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005104:	2100      	movs	r1, #0
 8005106:	482b      	ldr	r0, [pc, #172]	@ (80051b4 <foward+0x1b0>)
 8005108:	f7fe ff92 	bl	8004030 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800510c:	2104      	movs	r1, #4
 800510e:	4829      	ldr	r0, [pc, #164]	@ (80051b4 <foward+0x1b0>)
 8005110:	f7fe ff8e 	bl	8004030 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8005114:	213c      	movs	r1, #60	@ 0x3c
 8005116:	4828      	ldr	r0, [pc, #160]	@ (80051b8 <foward+0x1b4>)
 8005118:	f7ff f8ce 	bl	80042b8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800511c:	213c      	movs	r1, #60	@ 0x3c
 800511e:	4827      	ldr	r0, [pc, #156]	@ (80051bc <foward+0x1b8>)
 8005120:	f7ff f8ca 	bl	80042b8 <HAL_TIM_Encoder_Start>

	 if (counterValueRight > 1275 || counterValueLeft > 1275) {
 8005124:	4b16      	ldr	r3, [pc, #88]	@ (8005180 <foward+0x17c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f240 42fb 	movw	r2, #1275	@ 0x4fb
 800512c:	4293      	cmp	r3, r2
 800512e:	dc05      	bgt.n	800513c <foward+0x138>
 8005130:	4b14      	ldr	r3, [pc, #80]	@ (8005184 <foward+0x180>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f240 42fb 	movw	r2, #1275	@ 0x4fb
 8005138:	4293      	cmp	r3, r2
 800513a:	dd1f      	ble.n	800517c <foward+0x178>
		    	  	  	  	  	stop();
 800513c:	f000 f844 	bl	80051c8 <stop>
		      	      	  		TIM3->CNT = 0;
 8005140:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <foward+0x18c>)
 8005142:	2200      	movs	r2, #0
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24
		      	      	  		TIM2->CNT = 0;
 8005146:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800514a:	2200      	movs	r2, #0
 800514c:	625a      	str	r2, [r3, #36]	@ 0x24

		      	      	  	SSD1306_Clear();
 800514e:	f7fc f9a0 	bl	8001492 <SSD1306_Clear>
		      	      	  			SSD1306_GotoXY(0, 30);
 8005152:	211e      	movs	r1, #30
 8005154:	2000      	movs	r0, #0
 8005156:	f7fc f8e3 	bl	8001320 <SSD1306_GotoXY>
		      	      	  			    SSD1306_Puts("Done", &Font_11x18, 1);
 800515a:	2201      	movs	r2, #1
 800515c:	4918      	ldr	r1, [pc, #96]	@ (80051c0 <foward+0x1bc>)
 800515e:	4819      	ldr	r0, [pc, #100]	@ (80051c4 <foward+0x1c0>)
 8005160:	f7fc f972 	bl	8001448 <SSD1306_Puts>
		      	      	  			    SSD1306_UpdateScreen();
 8005164:	f7fc f838 	bl	80011d8 <SSD1306_UpdateScreen>
		      	      	  			    HAL_Delay(1000);
 8005168:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800516c:	f7fc fcfc 	bl	8001b68 <HAL_Delay>
		      	      	  			    SSD1306_Clear();
 8005170:	f7fc f98f 	bl	8001492 <SSD1306_Clear>
		      	      	  			    HAL_Delay(3000);
 8005174:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005178:	f7fc fcf6 	bl	8001b68 <HAL_Delay>
		 }
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000634 	.word	0x20000634
 8005184:	20000638 	.word	0x20000638
 8005188:	200005e4 	.word	0x200005e4
 800518c:	40010800 	.word	0x40010800
 8005190:	40000400 	.word	0x40000400
 8005194:	20000ac8 	.word	0x20000ac8
 8005198:	20000aca 	.word	0x20000aca
 800519c:	20000014 	.word	0x20000014
 80051a0:	20000018 	.word	0x20000018
 80051a4:	200005d8 	.word	0x200005d8
 80051a8:	200005dc 	.word	0x200005dc
 80051ac:	200005e0 	.word	0x200005e0
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	20000500 	.word	0x20000500
 80051b8:	20000548 	.word	0x20000548
 80051bc:	20000590 	.word	0x20000590
 80051c0:	20000000 	.word	0x20000000
 80051c4:	080075fc 	.word	0x080075fc

080051c8 <stop>:

void stop(){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80051d2:	480b      	ldr	r0, [pc, #44]	@ (8005200 <stop+0x38>)
 80051d4:	f7fc ff7e 	bl	80020d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80051d8:	2200      	movs	r2, #0
 80051da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051de:	4808      	ldr	r0, [pc, #32]	@ (8005200 <stop+0x38>)
 80051e0:	f7fc ff78 	bl	80020d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80051e4:	2200      	movs	r2, #0
 80051e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051ea:	4805      	ldr	r0, [pc, #20]	@ (8005200 <stop+0x38>)
 80051ec:	f7fc ff72 	bl	80020d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80051f0:	2200      	movs	r2, #0
 80051f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051f6:	4802      	ldr	r0, [pc, #8]	@ (8005200 <stop+0x38>)
 80051f8:	f7fc ff6c 	bl	80020d4 <HAL_GPIO_WritePin>
}
 80051fc:	bf00      	nop
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40010800 	.word	0x40010800

08005204 <Turnright>:

void Turnright(){
 8005204:	b598      	push	{r3, r4, r7, lr}
 8005206:	af00      	add	r7, sp, #0
	TIM2->CNT=0;
 8005208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800520c:	2200      	movs	r2, #0
 800520e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT=0;
 8005210:	4b89      	ldr	r3, [pc, #548]	@ (8005438 <Turnright+0x234>)
 8005212:	2200      	movs	r2, #0
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24
	errorT = 0;
 8005216:	4b89      	ldr	r3, [pc, #548]	@ (800543c <Turnright+0x238>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
	integralT = 0;
 800521c:	4b88      	ldr	r3, [pc, #544]	@ (8005440 <Turnright+0x23c>)
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
	derivativeT = 0;
 8005224:	4b87      	ldr	r3, [pc, #540]	@ (8005444 <Turnright+0x240>)
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
	prevErrorT = 0;
 800522c:	4b86      	ldr	r3, [pc, #536]	@ (8005448 <Turnright+0x244>)
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
	pidOutputT = 0;
 8005234:	4b85      	ldr	r3, [pc, #532]	@ (800544c <Turnright+0x248>)
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
	TargetCount = 315;
 800523c:	4b84      	ldr	r3, [pc, #528]	@ (8005450 <Turnright+0x24c>)
 800523e:	f240 123b 	movw	r2, #315	@ 0x13b
 8005242:	601a      	str	r2, [r3, #0]
	targetSpeed = 150;
 8005244:	4b83      	ldr	r3, [pc, #524]	@ (8005454 <Turnright+0x250>)
 8005246:	2296      	movs	r2, #150	@ 0x96
 8005248:	601a      	str	r2, [r3, #0]

	while(1>0){
		  counterValueRight = TIM3->CNT;
 800524a:	4b7b      	ldr	r3, [pc, #492]	@ (8005438 <Turnright+0x234>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	461a      	mov	r2, r3
 8005250:	4b81      	ldr	r3, [pc, #516]	@ (8005458 <Turnright+0x254>)
 8005252:	601a      	str	r2, [r3, #0]
		  counterValueLeft = TIM2->CNT;
 8005254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	461a      	mov	r2, r3
 800525c:	4b7f      	ldr	r3, [pc, #508]	@ (800545c <Turnright+0x258>)
 800525e:	601a      	str	r2, [r3, #0]

		  errorT = TargetCount - (counterValueRight);
 8005260:	4b7b      	ldr	r3, [pc, #492]	@ (8005450 <Turnright+0x24c>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b7c      	ldr	r3, [pc, #496]	@ (8005458 <Turnright+0x254>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	4a74      	ldr	r2, [pc, #464]	@ (800543c <Turnright+0x238>)
 800526c:	6013      	str	r3, [r2, #0]
		  integralT += errorT;
 800526e:	4b73      	ldr	r3, [pc, #460]	@ (800543c <Turnright+0x238>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f824 	bl	80002c0 <__aeabi_i2f>
 8005278:	4602      	mov	r2, r0
 800527a:	4b71      	ldr	r3, [pc, #452]	@ (8005440 <Turnright+0x23c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7fa ff69 	bl	8000158 <__addsf3>
 8005286:	4603      	mov	r3, r0
 8005288:	461a      	mov	r2, r3
 800528a:	4b6d      	ldr	r3, [pc, #436]	@ (8005440 <Turnright+0x23c>)
 800528c:	601a      	str	r2, [r3, #0]
		  derivativeT = errorT - prevErrorT;
 800528e:	4b6b      	ldr	r3, [pc, #428]	@ (800543c <Turnright+0x238>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fb f814 	bl	80002c0 <__aeabi_i2f>
 8005298:	4602      	mov	r2, r0
 800529a:	4b6b      	ldr	r3, [pc, #428]	@ (8005448 <Turnright+0x244>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7fa ff57 	bl	8000154 <__aeabi_fsub>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461a      	mov	r2, r3
 80052aa:	4b66      	ldr	r3, [pc, #408]	@ (8005444 <Turnright+0x240>)
 80052ac:	601a      	str	r2, [r3, #0]

		  pidOutputT = (KpTurn * errorT + KiTurn * integralT + KdTurn * derivativeT)/2;
 80052ae:	4b63      	ldr	r3, [pc, #396]	@ (800543c <Turnright+0x238>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb f804 	bl	80002c0 <__aeabi_i2f>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b69      	ldr	r3, [pc, #420]	@ (8005460 <Turnright+0x25c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fb f851 	bl	8000368 <__aeabi_fmul>
 80052c6:	4603      	mov	r3, r0
 80052c8:	461c      	mov	r4, r3
 80052ca:	4b66      	ldr	r3, [pc, #408]	@ (8005464 <Turnright+0x260>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005440 <Turnright+0x23c>)
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fb f847 	bl	8000368 <__aeabi_fmul>
 80052da:	4603      	mov	r3, r0
 80052dc:	4619      	mov	r1, r3
 80052de:	4620      	mov	r0, r4
 80052e0:	f7fa ff3a 	bl	8000158 <__addsf3>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461c      	mov	r4, r3
 80052e8:	4b5f      	ldr	r3, [pc, #380]	@ (8005468 <Turnright+0x264>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a55      	ldr	r2, [pc, #340]	@ (8005444 <Turnright+0x240>)
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb f838 	bl	8000368 <__aeabi_fmul>
 80052f8:	4603      	mov	r3, r0
 80052fa:	4619      	mov	r1, r3
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7fa ff2b 	bl	8000158 <__addsf3>
 8005302:	4603      	mov	r3, r0
 8005304:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005308:	4618      	mov	r0, r3
 800530a:	f7fb f8e1 	bl	80004d0 <__aeabi_fdiv>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	4b4e      	ldr	r3, [pc, #312]	@ (800544c <Turnright+0x248>)
 8005314:	601a      	str	r2, [r3, #0]
		  targetSpeed = constrain(abs(pidOutputT), 0, 150);
 8005316:	4b4d      	ldr	r3, [pc, #308]	@ (800544c <Turnright+0x248>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f974 	bl	8000608 <__aeabi_f2iz>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfb8      	it	lt
 8005326:	425b      	neglt	r3, r3
 8005328:	2296      	movs	r2, #150	@ 0x96
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f9f5 	bl	800571c <constrain>
 8005332:	4603      	mov	r3, r0
 8005334:	4a47      	ldr	r2, [pc, #284]	@ (8005454 <Turnright+0x250>)
 8005336:	6013      	str	r3, [r2, #0]

		  sprintf(leftEncoder, "%d", countValLeftCorr);
 8005338:	4b4c      	ldr	r3, [pc, #304]	@ (800546c <Turnright+0x268>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	494c      	ldr	r1, [pc, #304]	@ (8005470 <Turnright+0x26c>)
 8005340:	484c      	ldr	r0, [pc, #304]	@ (8005474 <Turnright+0x270>)
 8005342:	f001 fb47 	bl	80069d4 <siprintf>
		  sprintf(rightEncoder, "%d", counterValueRight);
 8005346:	4b44      	ldr	r3, [pc, #272]	@ (8005458 <Turnright+0x254>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	4948      	ldr	r1, [pc, #288]	@ (8005470 <Turnright+0x26c>)
 800534e:	484a      	ldr	r0, [pc, #296]	@ (8005478 <Turnright+0x274>)
 8005350:	f001 fb40 	bl	80069d4 <siprintf>
		  sprintf(strError, "%d", errorT);
 8005354:	4b39      	ldr	r3, [pc, #228]	@ (800543c <Turnright+0x238>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	4945      	ldr	r1, [pc, #276]	@ (8005470 <Turnright+0x26c>)
 800535c:	4847      	ldr	r0, [pc, #284]	@ (800547c <Turnright+0x278>)
 800535e:	f001 fb39 	bl	80069d4 <siprintf>

				  SSD1306_Clear();
 8005362:	f7fc f896 	bl	8001492 <SSD1306_Clear>
				  SSD1306_GotoXY (0, 0);
 8005366:	2100      	movs	r1, #0
 8005368:	2000      	movs	r0, #0
 800536a:	f7fb ffd9 	bl	8001320 <SSD1306_GotoXY>
				  SSD1306_Puts (leftEncoder, &Font_11x18, 1);
 800536e:	2201      	movs	r2, #1
 8005370:	4943      	ldr	r1, [pc, #268]	@ (8005480 <Turnright+0x27c>)
 8005372:	4840      	ldr	r0, [pc, #256]	@ (8005474 <Turnright+0x270>)
 8005374:	f7fc f868 	bl	8001448 <SSD1306_Puts>
				  SSD1306_GotoXY (0, 20);
 8005378:	2114      	movs	r1, #20
 800537a:	2000      	movs	r0, #0
 800537c:	f7fb ffd0 	bl	8001320 <SSD1306_GotoXY>
				  SSD1306_Puts (rightEncoder, &Font_11x18, 1);
 8005380:	2201      	movs	r2, #1
 8005382:	493f      	ldr	r1, [pc, #252]	@ (8005480 <Turnright+0x27c>)
 8005384:	483c      	ldr	r0, [pc, #240]	@ (8005478 <Turnright+0x274>)
 8005386:	f7fc f85f 	bl	8001448 <SSD1306_Puts>
				  SSD1306_GotoXY (0, 40);
 800538a:	2128      	movs	r1, #40	@ 0x28
 800538c:	2000      	movs	r0, #0
 800538e:	f7fb ffc7 	bl	8001320 <SSD1306_GotoXY>
				  SSD1306_Puts (strError, &Font_11x18, 1);
 8005392:	2201      	movs	r2, #1
 8005394:	493a      	ldr	r1, [pc, #232]	@ (8005480 <Turnright+0x27c>)
 8005396:	4839      	ldr	r0, [pc, #228]	@ (800547c <Turnright+0x278>)
 8005398:	f7fc f856 	bl	8001448 <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 800539c:	f7fb ff1c 	bl	80011d8 <SSD1306_UpdateScreen>

		  if (errorT > 0){
 80053a0:	4b26      	ldr	r3, [pc, #152]	@ (800543c <Turnright+0x238>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dd28      	ble.n	80053fa <Turnright+0x1f6>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);  // Enable motor LEFT
 80053a8:	2200      	movs	r2, #0
 80053aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80053ae:	4835      	ldr	r0, [pc, #212]	@ (8005484 <Turnright+0x280>)
 80053b0:	f7fc fe90 	bl	80020d4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80053b4:	2201      	movs	r2, #1
 80053b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053ba:	4832      	ldr	r0, [pc, #200]	@ (8005484 <Turnright+0x280>)
 80053bc:	f7fc fe8a 	bl	80020d4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80053c0:	2200      	movs	r2, #0
 80053c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053c6:	482f      	ldr	r0, [pc, #188]	@ (8005484 <Turnright+0x280>)
 80053c8:	f7fc fe84 	bl	80020d4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80053cc:	2201      	movs	r2, #1
 80053ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053d2:	482c      	ldr	r0, [pc, #176]	@ (8005484 <Turnright+0x280>)
 80053d4:	f7fc fe7e 	bl	80020d4 <HAL_GPIO_WritePin>
				  TIM1->CCR1 = targetSpeed;
 80053d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <Turnright+0x250>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <Turnright+0x284>)
 80053de:	635a      	str	r2, [r3, #52]	@ 0x34
				  TIM1->CCR2 = targetSpeed;// 50% duty cycle for TIM_CHANNEL_1
 80053e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005454 <Turnright+0x250>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b28      	ldr	r3, [pc, #160]	@ (8005488 <Turnright+0x284>)
 80053e6:	639a      	str	r2, [r3, #56]	@ 0x38
			  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80053e8:	2100      	movs	r1, #0
 80053ea:	4828      	ldr	r0, [pc, #160]	@ (800548c <Turnright+0x288>)
 80053ec:	f7fe fe20 	bl	8004030 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80053f0:	2104      	movs	r1, #4
 80053f2:	4826      	ldr	r0, [pc, #152]	@ (800548c <Turnright+0x288>)
 80053f4:	f7fe fe1c 	bl	8004030 <HAL_TIM_PWM_Start>
		  counterValueRight = TIM3->CNT;
 80053f8:	e727      	b.n	800524a <Turnright+0x46>
		  }

		  else{
			  break;
 80053fa:	bf00      	nop
		  }
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);  // Enable motor LEFT
 80053fc:	2200      	movs	r2, #0
 80053fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005402:	4820      	ldr	r0, [pc, #128]	@ (8005484 <Turnright+0x280>)
 8005404:	f7fc fe66 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800540e:	481d      	ldr	r0, [pc, #116]	@ (8005484 <Turnright+0x280>)
 8005410:	f7fc fe60 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800541a:	481a      	ldr	r0, [pc, #104]	@ (8005484 <Turnright+0x280>)
 800541c:	f7fc fe5a 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8005420:	2200      	movs	r2, #0
 8005422:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005426:	4817      	ldr	r0, [pc, #92]	@ (8005484 <Turnright+0x280>)
 8005428:	f7fc fe54 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800542c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005430:	f7fc fb9a 	bl	8001b68 <HAL_Delay>
}
 8005434:	bf00      	nop
 8005436:	bd98      	pop	{r3, r4, r7, pc}
 8005438:	40000400 	.word	0x40000400
 800543c:	20000614 	.word	0x20000614
 8005440:	20000618 	.word	0x20000618
 8005444:	2000061c 	.word	0x2000061c
 8005448:	20000624 	.word	0x20000624
 800544c:	20000628 	.word	0x20000628
 8005450:	20000620 	.word	0x20000620
 8005454:	200005e4 	.word	0x200005e4
 8005458:	20000634 	.word	0x20000634
 800545c:	20000638 	.word	0x20000638
 8005460:	2000001c 	.word	0x2000001c
 8005464:	2000062c 	.word	0x2000062c
 8005468:	20000630 	.word	0x20000630
 800546c:	2000060c 	.word	0x2000060c
 8005470:	08007604 	.word	0x08007604
 8005474:	200005e8 	.word	0x200005e8
 8005478:	200005f4 	.word	0x200005f4
 800547c:	20000600 	.word	0x20000600
 8005480:	20000000 	.word	0x20000000
 8005484:	40010800 	.word	0x40010800
 8005488:	40012c00 	.word	0x40012c00
 800548c:	20000500 	.word	0x20000500

08005490 <Turnleft>:

void Turnleft(){
 8005490:	b598      	push	{r3, r4, r7, lr}
 8005492:	af00      	add	r7, sp, #0
	TIM2->CNT=0;
 8005494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005498:	2200      	movs	r2, #0
 800549a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT=0;
 800549c:	4b89      	ldr	r3, [pc, #548]	@ (80056c4 <Turnleft+0x234>)
 800549e:	2200      	movs	r2, #0
 80054a0:	625a      	str	r2, [r3, #36]	@ 0x24
	errorT = 0;
 80054a2:	4b89      	ldr	r3, [pc, #548]	@ (80056c8 <Turnleft+0x238>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
	integralT = 0;
 80054a8:	4b88      	ldr	r3, [pc, #544]	@ (80056cc <Turnleft+0x23c>)
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
	derivativeT = 0;
 80054b0:	4b87      	ldr	r3, [pc, #540]	@ (80056d0 <Turnleft+0x240>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
	prevErrorT = 0;
 80054b8:	4b86      	ldr	r3, [pc, #536]	@ (80056d4 <Turnleft+0x244>)
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
	pidOutputT = 0;
 80054c0:	4b85      	ldr	r3, [pc, #532]	@ (80056d8 <Turnleft+0x248>)
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
	TargetCount = 320;
 80054c8:	4b84      	ldr	r3, [pc, #528]	@ (80056dc <Turnleft+0x24c>)
 80054ca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80054ce:	601a      	str	r2, [r3, #0]
	targetSpeed = 150;
 80054d0:	4b83      	ldr	r3, [pc, #524]	@ (80056e0 <Turnleft+0x250>)
 80054d2:	2296      	movs	r2, #150	@ 0x96
 80054d4:	601a      	str	r2, [r3, #0]

	while(1>0){
		  counterValueRight = TIM3->CNT;
 80054d6:	4b7b      	ldr	r3, [pc, #492]	@ (80056c4 <Turnleft+0x234>)
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	461a      	mov	r2, r3
 80054dc:	4b81      	ldr	r3, [pc, #516]	@ (80056e4 <Turnleft+0x254>)
 80054de:	601a      	str	r2, [r3, #0]
		  counterValueLeft = TIM2->CNT;
 80054e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80054e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e6:	461a      	mov	r2, r3
 80054e8:	4b7f      	ldr	r3, [pc, #508]	@ (80056e8 <Turnleft+0x258>)
 80054ea:	601a      	str	r2, [r3, #0]

		  errorT = TargetCount - (counterValueLeft);
 80054ec:	4b7b      	ldr	r3, [pc, #492]	@ (80056dc <Turnleft+0x24c>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b7d      	ldr	r3, [pc, #500]	@ (80056e8 <Turnleft+0x258>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	4a74      	ldr	r2, [pc, #464]	@ (80056c8 <Turnleft+0x238>)
 80054f8:	6013      	str	r3, [r2, #0]
		  integralT += errorT;
 80054fa:	4b73      	ldr	r3, [pc, #460]	@ (80056c8 <Turnleft+0x238>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fa fede 	bl	80002c0 <__aeabi_i2f>
 8005504:	4602      	mov	r2, r0
 8005506:	4b71      	ldr	r3, [pc, #452]	@ (80056cc <Turnleft+0x23c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fa fe23 	bl	8000158 <__addsf3>
 8005512:	4603      	mov	r3, r0
 8005514:	461a      	mov	r2, r3
 8005516:	4b6d      	ldr	r3, [pc, #436]	@ (80056cc <Turnleft+0x23c>)
 8005518:	601a      	str	r2, [r3, #0]
		  derivativeT = errorT - prevErrorT;
 800551a:	4b6b      	ldr	r3, [pc, #428]	@ (80056c8 <Turnleft+0x238>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fa fece 	bl	80002c0 <__aeabi_i2f>
 8005524:	4602      	mov	r2, r0
 8005526:	4b6b      	ldr	r3, [pc, #428]	@ (80056d4 <Turnleft+0x244>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f7fa fe11 	bl	8000154 <__aeabi_fsub>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	4b66      	ldr	r3, [pc, #408]	@ (80056d0 <Turnleft+0x240>)
 8005538:	601a      	str	r2, [r3, #0]

		  pidOutputT = (KpTurn * errorT + KiTurn * integralT + KdTurn * derivativeT)/2;
 800553a:	4b63      	ldr	r3, [pc, #396]	@ (80056c8 <Turnleft+0x238>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fa febe 	bl	80002c0 <__aeabi_i2f>
 8005544:	4602      	mov	r2, r0
 8005546:	4b69      	ldr	r3, [pc, #420]	@ (80056ec <Turnleft+0x25c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fa ff0b 	bl	8000368 <__aeabi_fmul>
 8005552:	4603      	mov	r3, r0
 8005554:	461c      	mov	r4, r3
 8005556:	4b66      	ldr	r3, [pc, #408]	@ (80056f0 <Turnleft+0x260>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a5c      	ldr	r2, [pc, #368]	@ (80056cc <Turnleft+0x23c>)
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f7fa ff01 	bl	8000368 <__aeabi_fmul>
 8005566:	4603      	mov	r3, r0
 8005568:	4619      	mov	r1, r3
 800556a:	4620      	mov	r0, r4
 800556c:	f7fa fdf4 	bl	8000158 <__addsf3>
 8005570:	4603      	mov	r3, r0
 8005572:	461c      	mov	r4, r3
 8005574:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <Turnleft+0x264>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a55      	ldr	r2, [pc, #340]	@ (80056d0 <Turnleft+0x240>)
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	4611      	mov	r1, r2
 800557e:	4618      	mov	r0, r3
 8005580:	f7fa fef2 	bl	8000368 <__aeabi_fmul>
 8005584:	4603      	mov	r3, r0
 8005586:	4619      	mov	r1, r3
 8005588:	4620      	mov	r0, r4
 800558a:	f7fa fde5 	bl	8000158 <__addsf3>
 800558e:	4603      	mov	r3, r0
 8005590:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005594:	4618      	mov	r0, r3
 8005596:	f7fa ff9b 	bl	80004d0 <__aeabi_fdiv>
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
 800559e:	4b4e      	ldr	r3, [pc, #312]	@ (80056d8 <Turnleft+0x248>)
 80055a0:	601a      	str	r2, [r3, #0]
		  targetSpeed = constrain(abs(pidOutputT), 0, 150);
 80055a2:	4b4d      	ldr	r3, [pc, #308]	@ (80056d8 <Turnleft+0x248>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fb f82e 	bl	8000608 <__aeabi_f2iz>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bfb8      	it	lt
 80055b2:	425b      	neglt	r3, r3
 80055b4:	2296      	movs	r2, #150	@ 0x96
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 f8af 	bl	800571c <constrain>
 80055be:	4603      	mov	r3, r0
 80055c0:	4a47      	ldr	r2, [pc, #284]	@ (80056e0 <Turnleft+0x250>)
 80055c2:	6013      	str	r3, [r2, #0]

		  sprintf(leftEncoder, "%d", counterValueLeft);
 80055c4:	4b48      	ldr	r3, [pc, #288]	@ (80056e8 <Turnleft+0x258>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	494b      	ldr	r1, [pc, #300]	@ (80056f8 <Turnleft+0x268>)
 80055cc:	484b      	ldr	r0, [pc, #300]	@ (80056fc <Turnleft+0x26c>)
 80055ce:	f001 fa01 	bl	80069d4 <siprintf>
		  sprintf(rightEncoder, "%d",countValRightCorr);
 80055d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005700 <Turnleft+0x270>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	4947      	ldr	r1, [pc, #284]	@ (80056f8 <Turnleft+0x268>)
 80055da:	484a      	ldr	r0, [pc, #296]	@ (8005704 <Turnleft+0x274>)
 80055dc:	f001 f9fa 	bl	80069d4 <siprintf>
		  sprintf(strError, "%d", errorT);
 80055e0:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <Turnleft+0x238>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	4944      	ldr	r1, [pc, #272]	@ (80056f8 <Turnleft+0x268>)
 80055e8:	4847      	ldr	r0, [pc, #284]	@ (8005708 <Turnleft+0x278>)
 80055ea:	f001 f9f3 	bl	80069d4 <siprintf>

				  SSD1306_Clear();
 80055ee:	f7fb ff50 	bl	8001492 <SSD1306_Clear>
				  SSD1306_GotoXY (0, 0);
 80055f2:	2100      	movs	r1, #0
 80055f4:	2000      	movs	r0, #0
 80055f6:	f7fb fe93 	bl	8001320 <SSD1306_GotoXY>
				  SSD1306_Puts (leftEncoder, &Font_11x18, 1);
 80055fa:	2201      	movs	r2, #1
 80055fc:	4943      	ldr	r1, [pc, #268]	@ (800570c <Turnleft+0x27c>)
 80055fe:	483f      	ldr	r0, [pc, #252]	@ (80056fc <Turnleft+0x26c>)
 8005600:	f7fb ff22 	bl	8001448 <SSD1306_Puts>
				  SSD1306_GotoXY (0, 20);
 8005604:	2114      	movs	r1, #20
 8005606:	2000      	movs	r0, #0
 8005608:	f7fb fe8a 	bl	8001320 <SSD1306_GotoXY>
				  SSD1306_Puts (rightEncoder, &Font_11x18, 1);
 800560c:	2201      	movs	r2, #1
 800560e:	493f      	ldr	r1, [pc, #252]	@ (800570c <Turnleft+0x27c>)
 8005610:	483c      	ldr	r0, [pc, #240]	@ (8005704 <Turnleft+0x274>)
 8005612:	f7fb ff19 	bl	8001448 <SSD1306_Puts>
				  SSD1306_GotoXY (0, 40);
 8005616:	2128      	movs	r1, #40	@ 0x28
 8005618:	2000      	movs	r0, #0
 800561a:	f7fb fe81 	bl	8001320 <SSD1306_GotoXY>
				  SSD1306_Puts (strError, &Font_11x18, 1);
 800561e:	2201      	movs	r2, #1
 8005620:	493a      	ldr	r1, [pc, #232]	@ (800570c <Turnleft+0x27c>)
 8005622:	4839      	ldr	r0, [pc, #228]	@ (8005708 <Turnleft+0x278>)
 8005624:	f7fb ff10 	bl	8001448 <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8005628:	f7fb fdd6 	bl	80011d8 <SSD1306_UpdateScreen>

		  if (errorT > 0){
 800562c:	4b26      	ldr	r3, [pc, #152]	@ (80056c8 <Turnleft+0x238>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	dd28      	ble.n	8005686 <Turnleft+0x1f6>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);  // Enable motor LEFT
 8005634:	2201      	movs	r2, #1
 8005636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800563a:	4835      	ldr	r0, [pc, #212]	@ (8005710 <Turnleft+0x280>)
 800563c:	f7fc fd4a 	bl	80020d4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8005640:	2200      	movs	r2, #0
 8005642:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005646:	4832      	ldr	r0, [pc, #200]	@ (8005710 <Turnleft+0x280>)
 8005648:	f7fc fd44 	bl	80020d4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 800564c:	2201      	movs	r2, #1
 800564e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005652:	482f      	ldr	r0, [pc, #188]	@ (8005710 <Turnleft+0x280>)
 8005654:	f7fc fd3e 	bl	80020d4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8005658:	2200      	movs	r2, #0
 800565a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800565e:	482c      	ldr	r0, [pc, #176]	@ (8005710 <Turnleft+0x280>)
 8005660:	f7fc fd38 	bl	80020d4 <HAL_GPIO_WritePin>
				  TIM1->CCR1 = targetSpeed;
 8005664:	4b1e      	ldr	r3, [pc, #120]	@ (80056e0 <Turnleft+0x250>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b2a      	ldr	r3, [pc, #168]	@ (8005714 <Turnleft+0x284>)
 800566a:	635a      	str	r2, [r3, #52]	@ 0x34
				  TIM1->CCR2 = targetSpeed;// 50% duty cycle for TIM_CHANNEL_1
 800566c:	4b1c      	ldr	r3, [pc, #112]	@ (80056e0 <Turnleft+0x250>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b28      	ldr	r3, [pc, #160]	@ (8005714 <Turnleft+0x284>)
 8005672:	639a      	str	r2, [r3, #56]	@ 0x38
			  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005674:	2100      	movs	r1, #0
 8005676:	4828      	ldr	r0, [pc, #160]	@ (8005718 <Turnleft+0x288>)
 8005678:	f7fe fcda 	bl	8004030 <HAL_TIM_PWM_Start>
			  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800567c:	2104      	movs	r1, #4
 800567e:	4826      	ldr	r0, [pc, #152]	@ (8005718 <Turnleft+0x288>)
 8005680:	f7fe fcd6 	bl	8004030 <HAL_TIM_PWM_Start>
		  counterValueRight = TIM3->CNT;
 8005684:	e727      	b.n	80054d6 <Turnleft+0x46>
		  }

		  else{
			  break;
 8005686:	bf00      	nop
		  }
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);  // Enable motor LEFT
 8005688:	2200      	movs	r2, #0
 800568a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800568e:	4820      	ldr	r0, [pc, #128]	@ (8005710 <Turnleft+0x280>)
 8005690:	f7fc fd20 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8005694:	2200      	movs	r2, #0
 8005696:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800569a:	481d      	ldr	r0, [pc, #116]	@ (8005710 <Turnleft+0x280>)
 800569c:	f7fc fd1a 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056a6:	481a      	ldr	r0, [pc, #104]	@ (8005710 <Turnleft+0x280>)
 80056a8:	f7fc fd14 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80056ac:	2200      	movs	r2, #0
 80056ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056b2:	4817      	ldr	r0, [pc, #92]	@ (8005710 <Turnleft+0x280>)
 80056b4:	f7fc fd0e 	bl	80020d4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80056b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056bc:	f7fc fa54 	bl	8001b68 <HAL_Delay>
}
 80056c0:	bf00      	nop
 80056c2:	bd98      	pop	{r3, r4, r7, pc}
 80056c4:	40000400 	.word	0x40000400
 80056c8:	20000614 	.word	0x20000614
 80056cc:	20000618 	.word	0x20000618
 80056d0:	2000061c 	.word	0x2000061c
 80056d4:	20000624 	.word	0x20000624
 80056d8:	20000628 	.word	0x20000628
 80056dc:	20000620 	.word	0x20000620
 80056e0:	200005e4 	.word	0x200005e4
 80056e4:	20000634 	.word	0x20000634
 80056e8:	20000638 	.word	0x20000638
 80056ec:	2000001c 	.word	0x2000001c
 80056f0:	2000062c 	.word	0x2000062c
 80056f4:	20000630 	.word	0x20000630
 80056f8:	08007604 	.word	0x08007604
 80056fc:	200005e8 	.word	0x200005e8
 8005700:	20000610 	.word	0x20000610
 8005704:	200005f4 	.word	0x200005f4
 8005708:	20000600 	.word	0x20000600
 800570c:	20000000 	.word	0x20000000
 8005710:	40010800 	.word	0x40010800
 8005714:	40012c00 	.word	0x40012c00
 8005718:	20000500 	.word	0x20000500

0800571c <constrain>:

int constrain(int value, int min, int max) {
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
        if (value < min) return min;
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	da01      	bge.n	8005734 <constrain+0x18>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	e006      	b.n	8005742 <constrain+0x26>
        if (value > max) return max;
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	dd01      	ble.n	8005740 <constrain+0x24>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	e000      	b.n	8005742 <constrain+0x26>
        return value;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <queue_create>:
    struct node* head;
    struct node* tail;
    int size;
};

queue queue_create() {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
queue q = (queue) malloc(sizeof(struct _queue));
 8005752:	200c      	movs	r0, #12
 8005754:	f000 fe88 	bl	8006468 <malloc>
 8005758:	4603      	mov	r3, r0
 800575a:	607b      	str	r3, [r7, #4]
    if (q == NULL) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <queue_create+0x2a>
        fprintf(stderr, "Insufficient memory to \
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <queue_create+0x48>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2231      	movs	r2, #49	@ 0x31
 800576a:	2101      	movs	r1, #1
 800576c:	480a      	ldr	r0, [pc, #40]	@ (8005798 <queue_create+0x4c>)
 800576e:	f001 f8ef 	bl	8006950 <fwrite>
        initialize queue.\n");
        abort();
 8005772:	f000 fe71 	bl	8006458 <abort>
    }
    q->head = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
    q->tail = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	605a      	str	r2, [r3, #4]
    q->size = 0;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	609a      	str	r2, [r3, #8]
    return q;
 8005788:	687b      	ldr	r3, [r7, #4]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000030 	.word	0x20000030
 8005798:	08007608 	.word	0x08007608

0800579c <queue_push>:
    }
    queue_clear(q);
    free(q);
}

void queue_push(queue q, item_type elem) {
 800579c:	b084      	sub	sp, #16
 800579e:	b590      	push	{r4, r7, lr}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct node* n;
    n = (struct node*) malloc(sizeof(struct node));
 80057ae:	2014      	movs	r0, #20
 80057b0:	f000 fe5a 	bl	8006468 <malloc>
 80057b4:	4603      	mov	r3, r0
 80057b6:	60fb      	str	r3, [r7, #12]
    if (n == NULL) {
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <queue_push+0x36>
        fprintf(stderr, "Insufficient memory to \
 80057be:	4b19      	ldr	r3, [pc, #100]	@ (8005824 <queue_push+0x88>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	222c      	movs	r2, #44	@ 0x2c
 80057c6:	2101      	movs	r1, #1
 80057c8:	4817      	ldr	r0, [pc, #92]	@ (8005828 <queue_push+0x8c>)
 80057ca:	f001 f8c1 	bl	8006950 <fwrite>
        create node.\n");
        abort();
 80057ce:	f000 fe43 	bl	8006458 <abort>
    }
    n->data = elem;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	461c      	mov	r4, r3
 80057d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    n->next = NULL;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	611a      	str	r2, [r3, #16]
    if (q->head == NULL) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <queue_push+0x62>
        q->head = q->tail = n;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	605a      	str	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e006      	b.n	800580c <queue_push+0x70>
    } else {
        q->tail->next = n;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	611a      	str	r2, [r3, #16]
        q->tail = n;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
    }
    q->size += 1;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	609a      	str	r2, [r3, #8]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005820:	b004      	add	sp, #16
 8005822:	4770      	bx	lr
 8005824:	20000030 	.word	0x20000030
 8005828:	08007654 	.word	0x08007654

0800582c <queue_pop>:

item_type queue_pop(queue q) {
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b089      	sub	sp, #36	@ 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
    if (queue_is_empty(q)) {
 8005836:	6838      	ldr	r0, [r7, #0]
 8005838:	f000 f840 	bl	80058bc <queue_is_empty>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <queue_pop+0x2a>
    fprintf(stderr, "Can't pop element from queue: \
 8005842:	4b1c      	ldr	r3, [pc, #112]	@ (80058b4 <queue_pop+0x88>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2232      	movs	r2, #50	@ 0x32
 800584a:	2101      	movs	r1, #1
 800584c:	481a      	ldr	r0, [pc, #104]	@ (80058b8 <queue_pop+0x8c>)
 800584e:	f001 f87f 	bl	8006950 <fwrite>
    queue is empty.\n");
    abort();
 8005852:	f000 fe01 	bl	8006458 <abort>
    }
    struct node* head = q->head;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	61fb      	str	r3, [r7, #28]
    if (q->head == q->tail) {
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d106      	bne.n	8005876 <queue_pop+0x4a>
        q->head = NULL;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
        q->tail = NULL;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2200      	movs	r2, #0
 8005872:	605a      	str	r2, [r3, #4]
 8005874:	e004      	b.n	8005880 <queue_pop+0x54>
    } else {
        q->head = q->head->next;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	601a      	str	r2, [r3, #0]
    }
    q->size -= 1;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	609a      	str	r2, [r3, #8]
    item_type data = head->data;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f107 040c 	add.w	r4, r7, #12
 8005890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    free(head);
 8005896:	69f8      	ldr	r0, [r7, #28]
 8005898:	f000 fdee 	bl	8006478 <free>
    return data;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	461c      	mov	r4, r3
 80058a0:	f107 030c 	add.w	r3, r7, #12
 80058a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	3724      	adds	r7, #36	@ 0x24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd90      	pop	{r4, r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000030 	.word	0x20000030
 80058b8:	08007684 	.word	0x08007684

080058bc <queue_is_empty>:
        abort();
    }
    return q->head->data;
}

int queue_is_empty(queue q) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    if (q==NULL) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <queue_is_empty+0x22>
        fprintf(stderr, "Cannot work with NULL queue.\n");
 80058ca:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <queue_is_empty+0x38>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	221d      	movs	r2, #29
 80058d2:	2101      	movs	r1, #1
 80058d4:	4808      	ldr	r0, [pc, #32]	@ (80058f8 <queue_is_empty+0x3c>)
 80058d6:	f001 f83b 	bl	8006950 <fwrite>
        abort();
 80058da:	f000 fdbd 	bl	8006458 <abort>
    }
    return q->head == NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000030 	.word	0x20000030
 80058f8:	080076f4 	.word	0x080076f4

080058fc <checkTravelArray>:
Heading pathArray[MAZE_WIDTH][MAZE_HEIGHT] = {{NORTH}};
// keeps track of all of the cells that the mouse has visited
int travelArray[MAZE_WIDTH][MAZE_HEIGHT] = {{0}};

// given a coord, checks to see if the mouse has visited a certain cell before
int checkTravelArray(coord c) {return travelArray[c.x][c.y];}
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	463b      	mov	r3, r7
 8005904:	e883 0003 	stmia.w	r3, {r0, r1}
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4904      	ldr	r1, [pc, #16]	@ (8005920 <checkTravelArray+0x24>)
 800590e:	00d2      	lsls	r2, r2, #3
 8005910:	4413      	add	r3, r2
 8005912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr
 8005920:	200009c8 	.word	0x200009c8

08005924 <updateTravelArray>:
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) {travelArray[c.x][c.y] = 1;}
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	463b      	mov	r3, r7
 800592c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4905      	ldr	r1, [pc, #20]	@ (800594c <updateTravelArray+0x28>)
 8005936:	00d2      	lsls	r2, r2, #3
 8005938:	4413      	add	r3, r2
 800593a:	2201      	movs	r2, #1
 800593c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	200009c8 	.word	0x200009c8

08005950 <updateFloodArray>:
// given coordinate, updates the respective cell's floodfill value
void updateFloodArray(coord c, int val) {floodArray[c.x][c.y] = val;}
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	e883 0003 	stmia.w	r3, {r0, r1}
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4905      	ldr	r1, [pc, #20]	@ (800597c <updateFloodArray+0x2c>)
 8005966:	00d2      	lsls	r2, r2, #3
 8005968:	4413      	add	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000888 	.word	0x20000888

08005980 <getFloodArray>:
// given coordinate, gets the respective cell's floodfill value
int getFloodArray(coord c) {return floodArray[c.x][c.y];}
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	463b      	mov	r3, r7
 8005988:	e883 0003 	stmia.w	r3, {r0, r1}
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4904      	ldr	r1, [pc, #16]	@ (80059a4 <getFloodArray+0x24>)
 8005992:	00d2      	lsls	r2, r2, #3
 8005994:	4413      	add	r3, r2
 8005996:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	20000888 	.word	0x20000888

080059a8 <updatePathArray>:
// given coordinate, updates the respective cell's path heading
void updatePathArray(coord c, Heading h) {pathArray[c.x][c.y] = h;}
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	f107 0308 	add.w	r3, r7, #8
 80059b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80059b6:	4613      	mov	r3, r2
 80059b8:	71fb      	strb	r3, [r7, #7]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4905      	ldr	r1, [pc, #20]	@ (80059d4 <updatePathArray+0x2c>)
 80059c0:	00d2      	lsls	r2, r2, #3
 80059c2:	440a      	add	r2, r1
 80059c4:	4413      	add	r3, r2
 80059c6:	79fa      	ldrb	r2, [r7, #7]
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	20000988 	.word	0x20000988

080059d8 <getPathArray>:
// given cordinate, gets the respective cell's path heading
Heading getPathArray(coord c) {return pathArray[c.x][c.y];}
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	463b      	mov	r3, r7
 80059e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4904      	ldr	r1, [pc, #16]	@ (80059fc <getPathArray+0x24>)
 80059ea:	00d2      	lsls	r2, r2, #3
 80059ec:	440a      	add	r2, r1
 80059ee:	4413      	add	r3, r2
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr
 80059fc:	20000988 	.word	0x20000988

08005a00 <resetFloodArray>:
/* Floodfill Functions */


// resets the floodfill array to target the center as destination
void resetFloodArray()
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
    // set the entire flood array to blank values (-1)
    for (int x = 0; x < MAZE_WIDTH; x++)
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	e014      	b.n	8005a36 <resetFloodArray+0x36>
        for (int y = 0; y < MAZE_HEIGHT; y++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	e00b      	b.n	8005a2a <resetFloodArray+0x2a>
            floodArray[x][y] = -1;
 8005a12:	491e      	ldr	r1, [pc, #120]	@ (8005a8c <resetFloodArray+0x8c>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	00da      	lsls	r2, r3, #3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int y = 0; y < MAZE_HEIGHT; y++)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b07      	cmp	r3, #7
 8005a2e:	ddf0      	ble.n	8005a12 <resetFloodArray+0x12>
    for (int x = 0; x < MAZE_WIDTH; x++)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b07      	cmp	r3, #7
 8005a3a:	dde7      	ble.n	8005a0c <resetFloodArray+0xc>
    // set desired goal values 
    if (target) // target is goal (center)
 8005a3c:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <resetFloodArray+0x90>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01a      	beq.n	8005a7a <resetFloodArray+0x7a>
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8005a44:	2307      	movs	r3, #7
 8005a46:	607b      	str	r3, [r7, #4]
 8005a48:	e013      	b.n	8005a72 <resetFloodArray+0x72>
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
 8005a4a:	2307      	movs	r3, #7
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	e00a      	b.n	8005a66 <resetFloodArray+0x66>
                floodArray[x][y] = 0;
 8005a50:	490e      	ldr	r1, [pc, #56]	@ (8005a8c <resetFloodArray+0x8c>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	4413      	add	r3, r2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	ddf1      	ble.n	8005a50 <resetFloodArray+0x50>
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	dde8      	ble.n	8005a4a <resetFloodArray+0x4a>
    else // target is starting cell
        floodArray[STARTING_X][STARTING_Y] = 0;
}
 8005a78:	e002      	b.n	8005a80 <resetFloodArray+0x80>
        floodArray[STARTING_X][STARTING_Y] = 0;
 8005a7a:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <resetFloodArray+0x8c>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000888 	.word	0x20000888
 8005a90:	20000020 	.word	0x20000020

08005a94 <checkWall>:

// given heading and coordinate, check if there is a wall on that side of the cell
int checkWall(Heading heading, coord c) {
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	e883 0006 	stmia.w	r3, {r1, r2}
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d830      	bhi.n	8005b0c <checkWall+0x78>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <checkWall+0x1c>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005ad7 	.word	0x08005ad7
 8005ab8:	08005ae7 	.word	0x08005ae7
 8005abc:	08005afb 	.word	0x08005afb
        case NORTH: return horizontalWalls[c.x][c.y+1];
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	1c59      	adds	r1, r3, #1
 8005ac6:	4814      	ldr	r0, [pc, #80]	@ (8005b18 <checkWall+0x84>)
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	440b      	add	r3, r1
 8005ad0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ad4:	e01a      	b.n	8005b0c <checkWall+0x78>
        case WEST: return verticalWalls[c.x][c.y];
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4910      	ldr	r1, [pc, #64]	@ (8005b1c <checkWall+0x88>)
 8005adc:	00d2      	lsls	r2, r2, #3
 8005ade:	4413      	add	r3, r2
 8005ae0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ae4:	e012      	b.n	8005b0c <checkWall+0x78>
        case SOUTH: return horizontalWalls[c.x][c.y];
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	480b      	ldr	r0, [pc, #44]	@ (8005b18 <checkWall+0x84>)
 8005aec:	4613      	mov	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4413      	add	r3, r2
 8005af2:	440b      	add	r3, r1
 8005af4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005af8:	e008      	b.n	8005b0c <checkWall+0x78>
        case EAST: return verticalWalls[c.x+1][c.y];
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4906      	ldr	r1, [pc, #24]	@ (8005b1c <checkWall+0x88>)
 8005b02:	00d2      	lsls	r2, r2, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b0a:	e7ff      	b.n	8005b0c <checkWall+0x78>
    }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000768 	.word	0x20000768
 8005b1c:	20000648 	.word	0x20000648

08005b20 <incrementCoord>:
//    if (!checkWall(currentHeading, currentXY)) {
//        movefoward();  // Replace with your function that moves straight
//    }
//}
// Increments coord in the direction of the heading by input integer, then returns updated coord
coord incrementCoord(Heading heading, coord c, int numCells) {
 8005b20:	b480      	push	{r7}
 8005b22:	b08d      	sub	sp, #52	@ 0x34
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	4608      	mov	r0, r1
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	e881 000c 	stmia.w	r1, {r2, r3}
 8005b30:	4603      	mov	r3, r0
 8005b32:	72fb      	strb	r3, [r7, #11]
    switch (heading) {
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d836      	bhi.n	8005ba8 <incrementCoord+0x88>
 8005b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <incrementCoord+0x20>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b67 	.word	0x08005b67
 8005b48:	08005b7d 	.word	0x08005b7d
 8005b4c:	08005b93 	.word	0x08005b93
        case NORTH: return (coord){c.x, c.y += numCells};
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	4413      	add	r3, r2
 8005b58:	607b      	str	r3, [r7, #4]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6019      	str	r1, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	e021      	b.n	8005baa <incrementCoord+0x8a>
        case WEST: return (coord){c.x -= numCells, c.y};
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6019      	str	r1, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	e016      	b.n	8005baa <incrementCoord+0x8a>
        case SOUTH: return (coord){c.x, c.y -= numCells};
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6019      	str	r1, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	e00b      	b.n	8005baa <incrementCoord+0x8a>
        case EAST: return (coord){c.x += numCells, c.y};
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	4413      	add	r3, r2
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6019      	str	r1, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e000      	b.n	8005baa <incrementCoord+0x8a>
    }
}
 8005ba8:	bf00      	nop
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	3734      	adds	r7, #52	@ 0x34
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <turnLeft>:

// turns currentHeading global variable to the left based on the mouse's current heading,
// then returns LEFT action
Action turnLeft() {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
    Turnleft();
 8005bb8:	f7ff fc6a 	bl	8005490 <Turnleft>
    currentHeading = (currentHeading+1)%4;
 8005bbc:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <turnLeft+0x28>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	425a      	negs	r2, r3
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	f002 0203 	and.w	r2, r2, #3
 8005bcc:	bf58      	it	pl
 8005bce:	4253      	negpl	r3, r2
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	4b02      	ldr	r3, [pc, #8]	@ (8005bdc <turnLeft+0x28>)
 8005bd4:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000644 	.word	0x20000644

08005be0 <turnRight>:

// turns currentHeading global variable to the right based on the mouse's current heading,
// then returns RIGHT action
Action turnRight() {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
    Turnright();
 8005be4:	f7ff fb0e 	bl	8005204 <Turnright>
    currentHeading = (currentHeading-1)%4;
 8005be8:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <turnRight+0x28>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	425a      	negs	r2, r3
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	f002 0203 	and.w	r2, r2, #3
 8005bf8:	bf58      	it	pl
 8005bfa:	4253      	negpl	r3, r2
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	4b02      	ldr	r3, [pc, #8]	@ (8005c08 <turnRight+0x28>)
 8005c00:	701a      	strb	r2, [r3, #0]
    return RIGHT;
 8005c02:	2302      	movs	r3, #2
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000644 	.word	0x20000644

08005c0c <mouseInGoal>:

// returns whether the mouse is in the target
unsigned char mouseInGoal() {
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
    return (target == 1 && (currentXY.x >= LOWER_X_GOAL && currentXY.x <= UPPER_X_GOAL && currentXY.y >= LOWER_Y_GOAL && currentXY.y <= UPPER_Y_GOAL));
 8005c10:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <mouseInGoal+0x3c>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d111      	bne.n	8005c3c <mouseInGoal+0x30>
 8005c18:	4b0c      	ldr	r3, [pc, #48]	@ (8005c4c <mouseInGoal+0x40>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	dd0d      	ble.n	8005c3c <mouseInGoal+0x30>
 8005c20:	4b0a      	ldr	r3, [pc, #40]	@ (8005c4c <mouseInGoal+0x40>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	dc09      	bgt.n	8005c3c <mouseInGoal+0x30>
 8005c28:	4b08      	ldr	r3, [pc, #32]	@ (8005c4c <mouseInGoal+0x40>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	dd05      	ble.n	8005c3c <mouseInGoal+0x30>
 8005c30:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <mouseInGoal+0x40>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	dc01      	bgt.n	8005c3c <mouseInGoal+0x30>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <mouseInGoal+0x32>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr
 8005c48:	20000020 	.word	0x20000020
 8005c4c:	2000063c 	.word	0x2000063c

08005c50 <getNeighbor>:

// given heading and coordinates, returns the floodfill value of the corresponding neighbor cell.
// if the neighbor is off of the maze (argument cell is on the boundary of the maze), return -2
int getNeighbor(Heading heading, coord c)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	e883 0006 	stmia.w	r3, {r1, r2}
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d846      	bhi.n	8005cf4 <getNeighbor+0xa4>
 8005c66:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <getNeighbor+0x1c>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c9b 	.word	0x08005c9b
 8005c74:	08005cb9 	.word	0x08005cb9
 8005c78:	08005cd7 	.word	0x08005cd7
        case NORTH:
            if (c.y >= 15) return OUT_OF_BOUNDS;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	dd02      	ble.n	8005c88 <getNeighbor+0x38>
 8005c82:	f06f 0301 	mvn.w	r3, #1
 8005c86:	e035      	b.n	8005cf4 <getNeighbor+0xa4>
            else return floodArray[c.x][c.y+1];
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	491c      	ldr	r1, [pc, #112]	@ (8005d00 <getNeighbor+0xb0>)
 8005c90:	00d2      	lsls	r2, r2, #3
 8005c92:	4413      	add	r3, r2
 8005c94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c98:	e02c      	b.n	8005cf4 <getNeighbor+0xa4>
        case WEST:
            if (c.x <= 0) return OUT_OF_BOUNDS;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dc02      	bgt.n	8005ca6 <getNeighbor+0x56>
 8005ca0:	f06f 0301 	mvn.w	r3, #1
 8005ca4:	e026      	b.n	8005cf4 <getNeighbor+0xa4>
            else return floodArray[c.x-1][c.y];
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	1e5a      	subs	r2, r3, #1
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4914      	ldr	r1, [pc, #80]	@ (8005d00 <getNeighbor+0xb0>)
 8005cae:	00d2      	lsls	r2, r2, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cb6:	e01d      	b.n	8005cf4 <getNeighbor+0xa4>
        case SOUTH:
            if (c.y <= 0) return OUT_OF_BOUNDS;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	dc02      	bgt.n	8005cc4 <getNeighbor+0x74>
 8005cbe:	f06f 0301 	mvn.w	r3, #1
 8005cc2:	e017      	b.n	8005cf4 <getNeighbor+0xa4>
            else return floodArray[c.x][c.y-1];
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	490d      	ldr	r1, [pc, #52]	@ (8005d00 <getNeighbor+0xb0>)
 8005ccc:	00d2      	lsls	r2, r2, #3
 8005cce:	4413      	add	r3, r2
 8005cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cd4:	e00e      	b.n	8005cf4 <getNeighbor+0xa4>
        case EAST:
            if (c.x >= 15) return OUT_OF_BOUNDS;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b0e      	cmp	r3, #14
 8005cda:	dd02      	ble.n	8005ce2 <getNeighbor+0x92>
 8005cdc:	f06f 0301 	mvn.w	r3, #1
 8005ce0:	e008      	b.n	8005cf4 <getNeighbor+0xa4>
            else return floodArray[c.x+1][c.y];
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4905      	ldr	r1, [pc, #20]	@ (8005d00 <getNeighbor+0xb0>)
 8005cea:	00d2      	lsls	r2, r2, #3
 8005cec:	4413      	add	r3, r2
 8005cee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cf2:	e7ff      	b.n	8005cf4 <getNeighbor+0xa4>
    }
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000888 	.word	0x20000888

08005d04 <generateNeighbor>:

neighbor generateNeighbor(queue q, Heading heading, neighbor current, int currentVal) {
 8005d04:	b082      	sub	sp, #8
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b08e      	sub	sp, #56	@ 0x38
 8005d0a:	af02      	add	r7, sp, #8
 8005d0c:	6178      	str	r0, [r7, #20]
 8005d0e:	6139      	str	r1, [r7, #16]
 8005d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d12:	4613      	mov	r3, r2
 8005d14:	73fb      	strb	r3, [r7, #15]
    if (!checkWall(heading,current.coord)) {
 8005d16:	7bf8      	ldrb	r0, [r7, #15]
 8005d18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005d1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d20:	f7ff feb8 	bl	8005a94 <checkWall>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d15f      	bne.n	8005dea <generateNeighbor+0xe6>
        int nextVal = currentVal + TILE_SCORE;
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d2e:	4413      	add	r3, r2
 8005d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        neighbor next;
        // checks if the mouse would have to turn to go north from current cell
        if (current.heading != heading) {
 8005d32:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8005d36:	7bfa      	ldrb	r2, [r7, #15]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d006      	beq.n	8005d4a <generateNeighbor+0x46>
            nextVal += TURN_SCORE;
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d40:	4413      	add	r3, r2
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
            next.streak = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d48:	e00c      	b.n	8005d64 <generateNeighbor+0x60>
        } else { // if the mouse doesn't need to turn, records that is is on a straight streak
            nextVal += (STREAK_MULTIPLIER * (current.streak-1)) + STREAK_SCORE;
 8005d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	2200      	movs	r2, #0
 8005d50:	fb02 f303 	mul.w	r3, r2, r3
 8005d54:	2200      	movs	r2, #0
 8005d56:	4413      	add	r3, r2
 8005d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d5a:	4413      	add	r3, r2
 8005d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            next.streak = current.streak + 1;
 8005d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d60:	3301      	adds	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // prepare neighbor to add to the floodfill queue
        next.coord = incrementCoord(heading, current.coord, 1);
 8005d64:	4638      	mov	r0, r7
 8005d66:	7bf9      	ldrb	r1, [r7, #15]
 8005d68:	2301      	movs	r3, #1
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005d70:	cb0c      	ldmia	r3, {r2, r3}
 8005d72:	f7ff fed5 	bl	8005b20 <incrementCoord>
 8005d76:	f107 0318 	add.w	r3, r7, #24
 8005d7a:	463a      	mov	r2, r7
 8005d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d80:	e883 0003 	stmia.w	r3, {r0, r1}
        next.heading = heading;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	f887 3020 	strb.w	r3, [r7, #32]

        int neighborVal = getNeighbor(heading,current.coord);
 8005d8a:	7bf8      	ldrb	r0, [r7, #15]
 8005d8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005d90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d94:	f7ff ff5c 	bl	8005c50 <getNeighbor>
 8005d98:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (neighborVal == NOT_YET_SET || nextVal < neighborVal) {
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d003      	beq.n	8005daa <generateNeighbor+0xa6>
 8005da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	429a      	cmp	r2, r3
 8005da8:	da1f      	bge.n	8005dea <generateNeighbor+0xe6>
            queue_push(q,next);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	f107 0318 	add.w	r3, r7, #24
 8005db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f7ff fcf1 	bl	800579c <queue_push>
            updateFloodArray(next.coord,nextVal);
 8005dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dbc:	f107 0318 	add.w	r3, r7, #24
 8005dc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005dc4:	f7ff fdc4 	bl	8005950 <updateFloodArray>
            updatePathArray(next.coord,(heading+2)%4);
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	3302      	adds	r3, #2
 8005dcc:	425a      	negs	r2, r3
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	f002 0203 	and.w	r2, r2, #3
 8005dd6:	bf58      	it	pl
 8005dd8:	4253      	negpl	r3, r2
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f107 0318 	add.w	r3, r7, #24
 8005de2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005de6:	f7ff fddf 	bl	80059a8 <updatePathArray>
        }
    }
}
 8005dea:	bf00      	nop
 8005dec:	6978      	ldr	r0, [r7, #20]
 8005dee:	3730      	adds	r7, #48	@ 0x30
 8005df0:	46bd      	mov	sp, r7
 8005df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df6:	b002      	add	sp, #8
 8005df8:	4770      	bx	lr
	...

08005dfc <floodFill>:

// updates the floodfill array based on known walls
void floodFill() {
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b0aa      	sub	sp, #168	@ 0xa8
 8005e00:	af04      	add	r7, sp, #16
    // set non-goal values to blank so that the floodfill array can be recalculated
    resetFloodArray();
 8005e02:	f7ff fdfd 	bl	8005a00 <resetFloodArray>

    // declare/initialize relevant variables for queue for floodfill algorithm
    queue q = queue_create();
 8005e06:	f7ff fca1 	bl	800574c <queue_create>
 8005e0a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // iterate through the 2D array, find goal values and add them to the queue
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e14:	e06c      	b.n	8005ef0 <floodFill+0xf4>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e1c:	e05f      	b.n	8005ede <floodFill+0xe2>
            if (floodArray[x][y] == 0) {
 8005e1e:	4971      	ldr	r1, [pc, #452]	@ (8005fe4 <floodFill+0x1e8>)
 8005e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e24:	00da      	lsls	r2, r3, #3
 8005e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d14f      	bne.n	8005ed4 <floodFill+0xd8>
                // for the starting goal values, it doesn't matter which direction you approach them from.
                // as such, they should be oriented from all directions
                queue_push(q,(neighbor){(coord){x,y},NORTH,0});
 8005e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e38:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8005e46:	2300      	movs	r3, #0
 8005e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e54:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8005e58:	f7ff fca0 	bl	800579c <queue_push>
                queue_push(q,(neighbor){(coord){x,y},WEST,0});
 8005e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8005e6e:	2300      	movs	r3, #0
 8005e70:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e7c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8005e80:	f7ff fc8c 	bl	800579c <queue_push>
                queue_push(q,(neighbor){(coord){x,y},SOUTH,0});
 8005e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e90:	2302      	movs	r3, #2
 8005e92:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8005e96:	2300      	movs	r3, #0
 8005e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ea4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8005ea8:	f7ff fc78 	bl	800579c <queue_push>
                queue_push(q,(neighbor){(coord){x,y},EAST,0});
 8005eac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eb8:	2303      	movs	r3, #3
 8005eba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ecc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8005ed0:	f7ff fc64 	bl	800579c <queue_push>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 8005ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ed8:	3301      	adds	r3, #1
 8005eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ee2:	2b07      	cmp	r3, #7
 8005ee4:	dd9b      	ble.n	8005e1e <floodFill+0x22>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8005ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005eea:	3301      	adds	r3, #1
 8005eec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ef4:	2b07      	cmp	r3, #7
 8005ef6:	dd8e      	ble.n	8005e16 <floodFill+0x1a>
            }
        }
    }

    // adds available neighbors to queue and updates their floodfill values
    while (!queue_is_empty(q)) {
 8005ef8:	e067      	b.n	8005fca <floodFill+0x1ce>
        // initializes values for calculating floodfills for neighbors
        neighbor current = queue_pop(q);
 8005efa:	f107 0318 	add.w	r3, r7, #24
 8005efe:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fc92 	bl	800582c <queue_pop>
        int currentVal = getFloodArray(current.coord);
 8005f08:	f107 0318 	add.w	r3, r7, #24
 8005f0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f10:	f7ff fd36 	bl	8005980 <getFloodArray>
 8005f14:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

        // prints the current cell's floodfill number to the simulation screen
        char forSetText[6] = ""; sprintf(forSetText, "%d", getFloodArray(current.coord));
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	82bb      	strh	r3, [r7, #20]
 8005f20:	f107 0318 	add.w	r3, r7, #24
 8005f24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f28:	f7ff fd2a 	bl	8005980 <getFloodArray>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	f107 0310 	add.w	r3, r7, #16
 8005f32:	492d      	ldr	r1, [pc, #180]	@ (8005fe8 <floodFill+0x1ec>)
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fd4d 	bl	80069d4 <siprintf>
        
        // pushes neighbors if available
        generateNeighbor(q,NORTH,current,currentVal);
 8005f3a:	463d      	mov	r5, r7
 8005f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	466c      	mov	r4, sp
 8005f44:	f107 031c 	add.w	r3, r7, #28
 8005f48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f7ff fed3 	bl	8005d04 <generateNeighbor>
        generateNeighbor(q,WEST,current,currentVal);
 8005f5e:	463d      	mov	r5, r7
 8005f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f64:	9303      	str	r3, [sp, #12]
 8005f66:	466c      	mov	r4, sp
 8005f68:	f107 031c 	add.w	r3, r7, #28
 8005f6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff fec1 	bl	8005d04 <generateNeighbor>
        generateNeighbor(q,SOUTH,current,currentVal);
 8005f82:	463d      	mov	r5, r7
 8005f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	466c      	mov	r4, sp
 8005f8c:	f107 031c 	add.w	r3, r7, #28
 8005f90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f7ff feaf 	bl	8005d04 <generateNeighbor>
        generateNeighbor(q,EAST,current,currentVal);        
 8005fa6:	463d      	mov	r5, r7
 8005fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	466c      	mov	r4, sp
 8005fb0:	f107 031c 	add.w	r3, r7, #28
 8005fb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff fe9d 	bl	8005d04 <generateNeighbor>
    while (!queue_is_empty(q)) {
 8005fca:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8005fce:	f7ff fc75 	bl	80058bc <queue_is_empty>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d090      	beq.n	8005efa <floodFill+0xfe>
    }
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	3798      	adds	r7, #152	@ 0x98
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000888 	.word	0x20000888
 8005fe8:	08007714 	.word	0x08007714

08005fec <updateWalls>:
//    if (wallFront()) placeWall(currentHeading,currentXY);
//    if (wallLeft()) placeWall((currentHeading+1)%4,currentXY);
//    if (wallRight()) placeWall((currentHeading-1)%4,currentXY);
//}

void updateWalls() {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
    if (wallFront()) {
 8005ff0:	f000 f9b6 	bl	8006360 <wallFront>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d03d      	beq.n	8006076 <updateWalls+0x8a>
        if (currentHeading == NORTH) horizontalWalls[currentXY.x][currentXY.y + 1] = 1;
 8005ffa:	4b63      	ldr	r3, [pc, #396]	@ (8006188 <updateWalls+0x19c>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10c      	bne.n	800601c <updateWalls+0x30>
 8006002:	4b62      	ldr	r3, [pc, #392]	@ (800618c <updateWalls+0x1a0>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b61      	ldr	r3, [pc, #388]	@ (800618c <updateWalls+0x1a0>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	4860      	ldr	r0, [pc, #384]	@ (8006190 <updateWalls+0x1a4>)
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	440b      	add	r3, r1
 8006016:	2201      	movs	r2, #1
 8006018:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (currentHeading == SOUTH) horizontalWalls[currentXY.x][currentXY.y] = 1;
 800601c:	4b5a      	ldr	r3, [pc, #360]	@ (8006188 <updateWalls+0x19c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d10b      	bne.n	800603c <updateWalls+0x50>
 8006024:	4b59      	ldr	r3, [pc, #356]	@ (800618c <updateWalls+0x1a0>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b58      	ldr	r3, [pc, #352]	@ (800618c <updateWalls+0x1a0>)
 800602a:	6859      	ldr	r1, [r3, #4]
 800602c:	4858      	ldr	r0, [pc, #352]	@ (8006190 <updateWalls+0x1a4>)
 800602e:	4613      	mov	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4413      	add	r3, r2
 8006034:	440b      	add	r3, r1
 8006036:	2201      	movs	r2, #1
 8006038:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (currentHeading == EAST) verticalWalls[currentXY.x + 1][currentXY.y] = 1;
 800603c:	4b52      	ldr	r3, [pc, #328]	@ (8006188 <updateWalls+0x19c>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b03      	cmp	r3, #3
 8006042:	d10a      	bne.n	800605a <updateWalls+0x6e>
 8006044:	4b51      	ldr	r3, [pc, #324]	@ (800618c <updateWalls+0x1a0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	4b50      	ldr	r3, [pc, #320]	@ (800618c <updateWalls+0x1a0>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4951      	ldr	r1, [pc, #324]	@ (8006194 <updateWalls+0x1a8>)
 8006050:	00d2      	lsls	r2, r2, #3
 8006052:	4413      	add	r3, r2
 8006054:	2201      	movs	r2, #1
 8006056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (currentHeading == WEST) verticalWalls[currentXY.x][currentXY.y] = 1;
 800605a:	4b4b      	ldr	r3, [pc, #300]	@ (8006188 <updateWalls+0x19c>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d109      	bne.n	8006076 <updateWalls+0x8a>
 8006062:	4b4a      	ldr	r3, [pc, #296]	@ (800618c <updateWalls+0x1a0>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b49      	ldr	r3, [pc, #292]	@ (800618c <updateWalls+0x1a0>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	494a      	ldr	r1, [pc, #296]	@ (8006194 <updateWalls+0x1a8>)
 800606c:	00d2      	lsls	r2, r2, #3
 800606e:	4413      	add	r3, r2
 8006070:	2201      	movs	r2, #1
 8006072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    if (wallLeft()) {
 8006076:	f000 f989 	bl	800638c <wallLeft>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03d      	beq.n	80060fc <updateWalls+0x110>
        if (currentHeading == NORTH) verticalWalls[currentXY.x][currentXY.y] = 1;
 8006080:	4b41      	ldr	r3, [pc, #260]	@ (8006188 <updateWalls+0x19c>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <updateWalls+0xb0>
 8006088:	4b40      	ldr	r3, [pc, #256]	@ (800618c <updateWalls+0x1a0>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4b3f      	ldr	r3, [pc, #252]	@ (800618c <updateWalls+0x1a0>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4940      	ldr	r1, [pc, #256]	@ (8006194 <updateWalls+0x1a8>)
 8006092:	00d2      	lsls	r2, r2, #3
 8006094:	4413      	add	r3, r2
 8006096:	2201      	movs	r2, #1
 8006098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (currentHeading == SOUTH) verticalWalls[currentXY.x + 1][currentXY.y] = 1;
 800609c:	4b3a      	ldr	r3, [pc, #232]	@ (8006188 <updateWalls+0x19c>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d10a      	bne.n	80060ba <updateWalls+0xce>
 80060a4:	4b39      	ldr	r3, [pc, #228]	@ (800618c <updateWalls+0x1a0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	4b38      	ldr	r3, [pc, #224]	@ (800618c <updateWalls+0x1a0>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4939      	ldr	r1, [pc, #228]	@ (8006194 <updateWalls+0x1a8>)
 80060b0:	00d2      	lsls	r2, r2, #3
 80060b2:	4413      	add	r3, r2
 80060b4:	2201      	movs	r2, #1
 80060b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (currentHeading == EAST) horizontalWalls[currentXY.x][currentXY.y] = 1;
 80060ba:	4b33      	ldr	r3, [pc, #204]	@ (8006188 <updateWalls+0x19c>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d10b      	bne.n	80060da <updateWalls+0xee>
 80060c2:	4b32      	ldr	r3, [pc, #200]	@ (800618c <updateWalls+0x1a0>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4b31      	ldr	r3, [pc, #196]	@ (800618c <updateWalls+0x1a0>)
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	4831      	ldr	r0, [pc, #196]	@ (8006190 <updateWalls+0x1a4>)
 80060cc:	4613      	mov	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4413      	add	r3, r2
 80060d2:	440b      	add	r3, r1
 80060d4:	2201      	movs	r2, #1
 80060d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (currentHeading == WEST) horizontalWalls[currentXY.x][currentXY.y + 1] = 1;
 80060da:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <updateWalls+0x19c>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10c      	bne.n	80060fc <updateWalls+0x110>
 80060e2:	4b2a      	ldr	r3, [pc, #168]	@ (800618c <updateWalls+0x1a0>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b29      	ldr	r3, [pc, #164]	@ (800618c <updateWalls+0x1a0>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	1c59      	adds	r1, r3, #1
 80060ec:	4828      	ldr	r0, [pc, #160]	@ (8006190 <updateWalls+0x1a4>)
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	440b      	add	r3, r1
 80060f6:	2201      	movs	r2, #1
 80060f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }

    if (wallRight()) {
 80060fc:	f000 f95c 	bl	80063b8 <wallRight>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d03d      	beq.n	8006182 <updateWalls+0x196>
        if (currentHeading == NORTH) verticalWalls[currentXY.x + 1][currentXY.y] = 1;
 8006106:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <updateWalls+0x19c>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <updateWalls+0x138>
 800610e:	4b1f      	ldr	r3, [pc, #124]	@ (800618c <updateWalls+0x1a0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <updateWalls+0x1a0>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	491e      	ldr	r1, [pc, #120]	@ (8006194 <updateWalls+0x1a8>)
 800611a:	00d2      	lsls	r2, r2, #3
 800611c:	4413      	add	r3, r2
 800611e:	2201      	movs	r2, #1
 8006120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (currentHeading == SOUTH) verticalWalls[currentXY.x][currentXY.y] = 1;
 8006124:	4b18      	ldr	r3, [pc, #96]	@ (8006188 <updateWalls+0x19c>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d109      	bne.n	8006140 <updateWalls+0x154>
 800612c:	4b17      	ldr	r3, [pc, #92]	@ (800618c <updateWalls+0x1a0>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	4b16      	ldr	r3, [pc, #88]	@ (800618c <updateWalls+0x1a0>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4917      	ldr	r1, [pc, #92]	@ (8006194 <updateWalls+0x1a8>)
 8006136:	00d2      	lsls	r2, r2, #3
 8006138:	4413      	add	r3, r2
 800613a:	2201      	movs	r2, #1
 800613c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (currentHeading == EAST) horizontalWalls[currentXY.x][currentXY.y + 1] = 1;
 8006140:	4b11      	ldr	r3, [pc, #68]	@ (8006188 <updateWalls+0x19c>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b03      	cmp	r3, #3
 8006146:	d10c      	bne.n	8006162 <updateWalls+0x176>
 8006148:	4b10      	ldr	r3, [pc, #64]	@ (800618c <updateWalls+0x1a0>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b0f      	ldr	r3, [pc, #60]	@ (800618c <updateWalls+0x1a0>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	480f      	ldr	r0, [pc, #60]	@ (8006190 <updateWalls+0x1a4>)
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	440b      	add	r3, r1
 800615c:	2201      	movs	r2, #1
 800615e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (currentHeading == WEST) horizontalWalls[currentXY.x][currentXY.y] = 1;
 8006162:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <updateWalls+0x19c>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10b      	bne.n	8006182 <updateWalls+0x196>
 800616a:	4b08      	ldr	r3, [pc, #32]	@ (800618c <updateWalls+0x1a0>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b07      	ldr	r3, [pc, #28]	@ (800618c <updateWalls+0x1a0>)
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	4807      	ldr	r0, [pc, #28]	@ (8006190 <updateWalls+0x1a4>)
 8006174:	4613      	mov	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	440b      	add	r3, r1
 800617c:	2201      	movs	r2, #1
 800617e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000644 	.word	0x20000644
 800618c:	2000063c 	.word	0x2000063c
 8006190:	20000768 	.word	0x20000768
 8006194:	20000648 	.word	0x20000648

08006198 <nextAction>:


// based on updated wall and floodfill information, return the next action that the mouse should do
Action nextAction()
{
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b08b      	sub	sp, #44	@ 0x2c
 800619c:	af02      	add	r7, sp, #8
    // stay at center if already in center
    if (target && mouseInGoal() && STAY_AT_CENTER)
 800619e:	4b4b      	ldr	r3, [pc, #300]	@ (80062cc <nextAction+0x134>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <nextAction+0x22>
 80061a6:	f7ff fd31 	bl	8005c0c <mouseInGoal>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <nextAction+0x22>
 80061b0:	2300      	movs	r3, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <nextAction+0x22>
        return IDLE;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e083      	b.n	80062c2 <nextAction+0x12a>

    Heading newHeading = getPathArray(currentXY);
 80061ba:	4b45      	ldr	r3, [pc, #276]	@ (80062d0 <nextAction+0x138>)
 80061bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061c0:	f7ff fc0a 	bl	80059d8 <getPathArray>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]
    updateTravelArray(currentXY);
 80061c8:	4b41      	ldr	r3, [pc, #260]	@ (80062d0 <nextAction+0x138>)
 80061ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061ce:	f7ff fba9 	bl	8005924 <updateTravelArray>
    coord originalCoord = currentXY;
 80061d2:	4a3f      	ldr	r2, [pc, #252]	@ (80062d0 <nextAction+0x138>)
 80061d4:	f107 030c 	add.w	r3, r7, #12
 80061d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061dc:	e883 0003 	stmia.w	r3, {r0, r1}

    // moves forward if the mouse is already facing the correct heading
    if (newHeading == currentHeading) {
 80061e0:	4b3c      	ldr	r3, [pc, #240]	@ (80062d4 <nextAction+0x13c>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	7dfa      	ldrb	r2, [r7, #23]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d142      	bne.n	8006270 <nextAction+0xd8>
        int moveNumber = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 80061ee:	e016      	b.n	800621e <nextAction+0x86>
        && getPathArray(currentXY) == currentHeading) {
            moveNumber++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
            updateTravelArray(currentXY);
 80061f6:	4b36      	ldr	r3, [pc, #216]	@ (80062d0 <nextAction+0x138>)
 80061f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061fc:	f7ff fb92 	bl	8005924 <updateTravelArray>
            currentXY = incrementCoord(newHeading,currentXY,1);
 8006200:	4c33      	ldr	r4, [pc, #204]	@ (80062d0 <nextAction+0x138>)
 8006202:	4638      	mov	r0, r7
 8006204:	4b32      	ldr	r3, [pc, #200]	@ (80062d0 <nextAction+0x138>)
 8006206:	7df9      	ldrb	r1, [r7, #23]
 8006208:	2201      	movs	r2, #1
 800620a:	9200      	str	r2, [sp, #0]
 800620c:	cb0c      	ldmia	r3, {r2, r3}
 800620e:	f7ff fc87 	bl	8005b20 <incrementCoord>
 8006212:	4622      	mov	r2, r4
 8006214:	463b      	mov	r3, r7
 8006216:	e893 0003 	ldmia.w	r3, {r0, r1}
 800621a:	e882 0003 	stmia.w	r2, {r0, r1}
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 800621e:	4b2c      	ldr	r3, [pc, #176]	@ (80062d0 <nextAction+0x138>)
 8006220:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006224:	f7ff fb6a 	bl	80058fc <checkTravelArray>
 8006228:	4603      	mov	r3, r0
        && getPathArray(currentXY) == currentHeading) {
 800622a:	2b01      	cmp	r3, #1
 800622c:	d113      	bne.n	8006256 <nextAction+0xbe>
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 800622e:	4a28      	ldr	r2, [pc, #160]	@ (80062d0 <nextAction+0x138>)
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	ca06      	ldmia	r2, {r1, r2}
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fc2d 	bl	8005a94 <checkWall>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <nextAction+0xbe>
        && getPathArray(currentXY) == currentHeading) {
 8006240:	4b23      	ldr	r3, [pc, #140]	@ (80062d0 <nextAction+0x138>)
 8006242:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006246:	f7ff fbc7 	bl	80059d8 <getPathArray>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	4b21      	ldr	r3, [pc, #132]	@ (80062d4 <nextAction+0x13c>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d0cc      	beq.n	80061f0 <nextAction+0x58>

//        char forSetText[4] = "";
//        sprintf(forSetText, "%d", moveNumber);
//        debug_log(forSetText);

        for (int i = 0; i < 1; i++)
 8006256:	2300      	movs	r3, #0
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e004      	b.n	8006266 <nextAction+0xce>
            foward();
 800625c:	f7fe fed2 	bl	8005004 <foward>
        for (int i = 0; i < 1; i++)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	3301      	adds	r3, #1
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	ddf7      	ble.n	800625c <nextAction+0xc4>
        return FORWARD;
 800626c:	2301      	movs	r3, #1
 800626e:	e028      	b.n	80062c2 <nextAction+0x12a>
    }

    // determines which way to turn based on current direction and desired direction
    if (currentHeading == (newHeading+1)%4)
 8006270:	4b18      	ldr	r3, [pc, #96]	@ (80062d4 <nextAction+0x13c>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	4619      	mov	r1, r3
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	3301      	adds	r3, #1
 800627a:	425a      	negs	r2, r3
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	f002 0203 	and.w	r2, r2, #3
 8006284:	bf58      	it	pl
 8006286:	4253      	negpl	r3, r2
 8006288:	4299      	cmp	r1, r3
 800628a:	d103      	bne.n	8006294 <nextAction+0xfc>
        return turnRight();
 800628c:	f7ff fca8 	bl	8005be0 <turnRight>
 8006290:	4603      	mov	r3, r0
 8006292:	e016      	b.n	80062c2 <nextAction+0x12a>
    else if (currentHeading == (newHeading-1)%4)
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <nextAction+0x13c>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	4619      	mov	r1, r3
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	3b01      	subs	r3, #1
 800629e:	425a      	negs	r2, r3
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	f002 0203 	and.w	r2, r2, #3
 80062a8:	bf58      	it	pl
 80062aa:	4253      	negpl	r3, r2
 80062ac:	4299      	cmp	r1, r3
 80062ae:	d103      	bne.n	80062b8 <nextAction+0x120>
        return turnLeft();
 80062b0:	f7ff fc80 	bl	8005bb4 <turnLeft>
 80062b4:	4603      	mov	r3, r0
 80062b6:	e004      	b.n	80062c2 <nextAction+0x12a>
    else {
//        debug_log("turned 180");
        turnLeft();
 80062b8:	f7ff fc7c 	bl	8005bb4 <turnLeft>
        return turnLeft();
 80062bc:	f7ff fc7a 	bl	8005bb4 <turnLeft>
 80062c0:	4603      	mov	r3, r0
    }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3724      	adds	r7, #36	@ 0x24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd90      	pop	{r4, r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000020 	.word	0x20000020
 80062d0:	2000063c 	.word	0x2000063c
 80062d4:	20000644 	.word	0x20000644

080062d8 <checkDestination>:
//}


// checks if the mouse has reached its target
void checkDestination()
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
    if (target) {
 80062de:	4b16      	ldr	r3, [pc, #88]	@ (8006338 <checkDestination+0x60>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d018      	beq.n	8006318 <checkDestination+0x40>
        if (mouseInGoal()) {
 80062e6:	f7ff fc91 	bl	8005c0c <mouseInGoal>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01e      	beq.n	800632e <checkDestination+0x56>
            if (RESET_AT_CENTER) {
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <checkDestination+0x32>
                //API_ackReset();
                currentXY = (coord){0,0};
 80062f6:	4b11      	ldr	r3, [pc, #68]	@ (800633c <checkDestination+0x64>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	4b0f      	ldr	r3, [pc, #60]	@ (800633c <checkDestination+0x64>)
 80062fe:	2200      	movs	r2, #0
 8006300:	605a      	str	r2, [r3, #4]
                currentHeading = NORTH;
 8006302:	4b0f      	ldr	r3, [pc, #60]	@ (8006340 <checkDestination+0x68>)
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
            else if (!STAY_AT_CENTER)
                target = 0;       
        }
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y)
        target = 1;
}
 8006308:	e011      	b.n	800632e <checkDestination+0x56>
            else if (!STAY_AT_CENTER)
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10e      	bne.n	800632e <checkDestination+0x56>
                target = 0;       
 8006310:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <checkDestination+0x60>)
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]
}
 8006316:	e00a      	b.n	800632e <checkDestination+0x56>
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y)
 8006318:	4b08      	ldr	r3, [pc, #32]	@ (800633c <checkDestination+0x64>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <checkDestination+0x56>
 8006320:	4b06      	ldr	r3, [pc, #24]	@ (800633c <checkDestination+0x64>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <checkDestination+0x56>
        target = 1;
 8006328:	4b03      	ldr	r3, [pc, #12]	@ (8006338 <checkDestination+0x60>)
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000020 	.word	0x20000020
 800633c:	2000063c 	.word	0x2000063c
 8006340:	20000644 	.word	0x20000644

08006344 <solver>:
//            API_setColor(x,y,'w');
//    API_setColor(STARTING_X,STARTING_Y,'w');
//}

// sends the mouse's recommended next action back to main
Action solver() {
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
    checkDestination();
 8006348:	f7ff ffc6 	bl	80062d8 <checkDestination>
    updateWalls();    
 800634c:	f7ff fe4e 	bl	8005fec <updateWalls>
    floodFill();
 8006350:	f7ff fd54 	bl	8005dfc <floodFill>
//    if (HIGHLIGHT_PATH) highlightPath();
    return nextAction();
 8006354:	f7ff ff20 	bl	8006198 <nextAction>
 8006358:	4603      	mov	r3, r0
}
 800635a:	4618      	mov	r0, r3
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <wallFront>:

uint16_t distance1;
uint16_t distance2;
uint16_t distance3;

int wallFront(){
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
	distance3 = readDistance(0x33);
 8006364:	2033      	movs	r0, #51	@ 0x33
 8006366:	f7fa fa3f 	bl	80007e8 <readDistance>
 800636a:	4603      	mov	r3, r0
 800636c:	461a      	mov	r2, r3
 800636e:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <wallFront+0x28>)
 8006370:	801a      	strh	r2, [r3, #0]
	if(distance3<300){
 8006372:	4b05      	ldr	r3, [pc, #20]	@ (8006388 <wallFront+0x28>)
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800637a:	d201      	bcs.n	8006380 <wallFront+0x20>
		return 1;
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <wallFront+0x22>
	}
	else{
		return 0;
 8006380:	2300      	movs	r3, #0
	}
}
 8006382:	4618      	mov	r0, r3
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000acc 	.word	0x20000acc

0800638c <wallLeft>:

int wallLeft(){
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
	distance2 = readDistance(0x32);
 8006390:	2032      	movs	r0, #50	@ 0x32
 8006392:	f7fa fa29 	bl	80007e8 <readDistance>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <wallLeft+0x28>)
 800639c:	801a      	strh	r2, [r3, #0]
	if(distance2<300){
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <wallLeft+0x28>)
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80063a6:	d201      	bcs.n	80063ac <wallLeft+0x20>
		return 1;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <wallLeft+0x22>
	}
	else{
		return 0;
 80063ac:	2300      	movs	r3, #0
	}
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000aca 	.word	0x20000aca

080063b8 <wallRight>:

int wallRight(){
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
	distance3 = readDistance(0x31);
 80063bc:	2031      	movs	r0, #49	@ 0x31
 80063be:	f7fa fa13 	bl	80007e8 <readDistance>
 80063c2:	4603      	mov	r3, r0
 80063c4:	461a      	mov	r2, r3
 80063c6:	4b06      	ldr	r3, [pc, #24]	@ (80063e0 <wallRight+0x28>)
 80063c8:	801a      	strh	r2, [r3, #0]
	if(distance1<300){
 80063ca:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <wallRight+0x2c>)
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80063d2:	d201      	bcs.n	80063d8 <wallRight+0x20>
		return 1;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <wallRight+0x22>
	}
	else{
		return 0;
 80063d8:	2300      	movs	r3, #0
	}
}
 80063da:	4618      	mov	r0, r3
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000acc 	.word	0x20000acc
 80063e4:	20000ac8 	.word	0x20000ac8

080063e8 <calculateCorrection>:
#include "wallFollow.h"
#include "stdio.h"
float prevError = 0;

int calculateCorrection(uint16_t d1,uint16_t d2,float Kp,float Kd){
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b089      	sub	sp, #36	@ 0x24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60ba      	str	r2, [r7, #8]
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	4603      	mov	r3, r0
 80063f4:	81fb      	strh	r3, [r7, #14]
 80063f6:	460b      	mov	r3, r1
 80063f8:	81bb      	strh	r3, [r7, #12]
	float Error = d1 - d2;
 80063fa:	89fa      	ldrh	r2, [r7, #14]
 80063fc:	89bb      	ldrh	r3, [r7, #12]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	4618      	mov	r0, r3
 8006402:	f7f9 ff5d 	bl	80002c0 <__aeabi_i2f>
 8006406:	4603      	mov	r3, r0
 8006408:	61fb      	str	r3, [r7, #28]
	float derivative = Error-prevError;
 800640a:	4b12      	ldr	r3, [pc, #72]	@ (8006454 <calculateCorrection+0x6c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	69f8      	ldr	r0, [r7, #28]
 8006412:	f7f9 fe9f 	bl	8000154 <__aeabi_fsub>
 8006416:	4603      	mov	r3, r0
 8006418:	61bb      	str	r3, [r7, #24]

	prevError = Error;
 800641a:	4a0e      	ldr	r2, [pc, #56]	@ (8006454 <calculateCorrection+0x6c>)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	6013      	str	r3, [r2, #0]

	int Correction = ((Kp*Error)+Kd*derivative);
 8006420:	69f9      	ldr	r1, [r7, #28]
 8006422:	68b8      	ldr	r0, [r7, #8]
 8006424:	f7f9 ffa0 	bl	8000368 <__aeabi_fmul>
 8006428:	4603      	mov	r3, r0
 800642a:	461c      	mov	r4, r3
 800642c:	69b9      	ldr	r1, [r7, #24]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7f9 ff9a 	bl	8000368 <__aeabi_fmul>
 8006434:	4603      	mov	r3, r0
 8006436:	4619      	mov	r1, r3
 8006438:	4620      	mov	r0, r4
 800643a:	f7f9 fe8d 	bl	8000158 <__addsf3>
 800643e:	4603      	mov	r3, r0
 8006440:	4618      	mov	r0, r3
 8006442:	f7fa f8e1 	bl	8000608 <__aeabi_f2iz>
 8006446:	4603      	mov	r3, r0
 8006448:	617b      	str	r3, [r7, #20]
	return Correction;
 800644a:	697b      	ldr	r3, [r7, #20]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3724      	adds	r7, #36	@ 0x24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd90      	pop	{r4, r7, pc}
 8006454:	20000ad0 	.word	0x20000ad0

08006458 <abort>:
 8006458:	2006      	movs	r0, #6
 800645a:	b508      	push	{r3, lr}
 800645c:	f000 fbe2 	bl	8006c24 <raise>
 8006460:	2001      	movs	r0, #1
 8006462:	f7fb fa48 	bl	80018f6 <_exit>
	...

08006468 <malloc>:
 8006468:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <malloc+0xc>)
 800646a:	4601      	mov	r1, r0
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f000 b82d 	b.w	80064cc <_malloc_r>
 8006472:	bf00      	nop
 8006474:	20000030 	.word	0x20000030

08006478 <free>:
 8006478:	4b02      	ldr	r3, [pc, #8]	@ (8006484 <free+0xc>)
 800647a:	4601      	mov	r1, r0
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f000 bc8d 	b.w	8006d9c <_free_r>
 8006482:	bf00      	nop
 8006484:	20000030 	.word	0x20000030

08006488 <sbrk_aligned>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4e0f      	ldr	r6, [pc, #60]	@ (80064c8 <sbrk_aligned+0x40>)
 800648c:	460c      	mov	r4, r1
 800648e:	6831      	ldr	r1, [r6, #0]
 8006490:	4605      	mov	r5, r0
 8006492:	b911      	cbnz	r1, 800649a <sbrk_aligned+0x12>
 8006494:	f000 fc16 	bl	8006cc4 <_sbrk_r>
 8006498:	6030      	str	r0, [r6, #0]
 800649a:	4621      	mov	r1, r4
 800649c:	4628      	mov	r0, r5
 800649e:	f000 fc11 	bl	8006cc4 <_sbrk_r>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d103      	bne.n	80064ae <sbrk_aligned+0x26>
 80064a6:	f04f 34ff 	mov.w	r4, #4294967295
 80064aa:	4620      	mov	r0, r4
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
 80064ae:	1cc4      	adds	r4, r0, #3
 80064b0:	f024 0403 	bic.w	r4, r4, #3
 80064b4:	42a0      	cmp	r0, r4
 80064b6:	d0f8      	beq.n	80064aa <sbrk_aligned+0x22>
 80064b8:	1a21      	subs	r1, r4, r0
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 fc02 	bl	8006cc4 <_sbrk_r>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d1f2      	bne.n	80064aa <sbrk_aligned+0x22>
 80064c4:	e7ef      	b.n	80064a6 <sbrk_aligned+0x1e>
 80064c6:	bf00      	nop
 80064c8:	20000ad4 	.word	0x20000ad4

080064cc <_malloc_r>:
 80064cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d0:	1ccd      	adds	r5, r1, #3
 80064d2:	f025 0503 	bic.w	r5, r5, #3
 80064d6:	3508      	adds	r5, #8
 80064d8:	2d0c      	cmp	r5, #12
 80064da:	bf38      	it	cc
 80064dc:	250c      	movcc	r5, #12
 80064de:	2d00      	cmp	r5, #0
 80064e0:	4606      	mov	r6, r0
 80064e2:	db01      	blt.n	80064e8 <_malloc_r+0x1c>
 80064e4:	42a9      	cmp	r1, r5
 80064e6:	d904      	bls.n	80064f2 <_malloc_r+0x26>
 80064e8:	230c      	movs	r3, #12
 80064ea:	6033      	str	r3, [r6, #0]
 80064ec:	2000      	movs	r0, #0
 80064ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065c8 <_malloc_r+0xfc>
 80064f6:	f000 f869 	bl	80065cc <__malloc_lock>
 80064fa:	f8d8 3000 	ldr.w	r3, [r8]
 80064fe:	461c      	mov	r4, r3
 8006500:	bb44      	cbnz	r4, 8006554 <_malloc_r+0x88>
 8006502:	4629      	mov	r1, r5
 8006504:	4630      	mov	r0, r6
 8006506:	f7ff ffbf 	bl	8006488 <sbrk_aligned>
 800650a:	1c43      	adds	r3, r0, #1
 800650c:	4604      	mov	r4, r0
 800650e:	d158      	bne.n	80065c2 <_malloc_r+0xf6>
 8006510:	f8d8 4000 	ldr.w	r4, [r8]
 8006514:	4627      	mov	r7, r4
 8006516:	2f00      	cmp	r7, #0
 8006518:	d143      	bne.n	80065a2 <_malloc_r+0xd6>
 800651a:	2c00      	cmp	r4, #0
 800651c:	d04b      	beq.n	80065b6 <_malloc_r+0xea>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	4639      	mov	r1, r7
 8006522:	4630      	mov	r0, r6
 8006524:	eb04 0903 	add.w	r9, r4, r3
 8006528:	f000 fbcc 	bl	8006cc4 <_sbrk_r>
 800652c:	4581      	cmp	r9, r0
 800652e:	d142      	bne.n	80065b6 <_malloc_r+0xea>
 8006530:	6821      	ldr	r1, [r4, #0]
 8006532:	4630      	mov	r0, r6
 8006534:	1a6d      	subs	r5, r5, r1
 8006536:	4629      	mov	r1, r5
 8006538:	f7ff ffa6 	bl	8006488 <sbrk_aligned>
 800653c:	3001      	adds	r0, #1
 800653e:	d03a      	beq.n	80065b6 <_malloc_r+0xea>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	442b      	add	r3, r5
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	f8d8 3000 	ldr.w	r3, [r8]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	bb62      	cbnz	r2, 80065a8 <_malloc_r+0xdc>
 800654e:	f8c8 7000 	str.w	r7, [r8]
 8006552:	e00f      	b.n	8006574 <_malloc_r+0xa8>
 8006554:	6822      	ldr	r2, [r4, #0]
 8006556:	1b52      	subs	r2, r2, r5
 8006558:	d420      	bmi.n	800659c <_malloc_r+0xd0>
 800655a:	2a0b      	cmp	r2, #11
 800655c:	d917      	bls.n	800658e <_malloc_r+0xc2>
 800655e:	1961      	adds	r1, r4, r5
 8006560:	42a3      	cmp	r3, r4
 8006562:	6025      	str	r5, [r4, #0]
 8006564:	bf18      	it	ne
 8006566:	6059      	strne	r1, [r3, #4]
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	bf08      	it	eq
 800656c:	f8c8 1000 	streq.w	r1, [r8]
 8006570:	5162      	str	r2, [r4, r5]
 8006572:	604b      	str	r3, [r1, #4]
 8006574:	4630      	mov	r0, r6
 8006576:	f000 f82f 	bl	80065d8 <__malloc_unlock>
 800657a:	f104 000b 	add.w	r0, r4, #11
 800657e:	1d23      	adds	r3, r4, #4
 8006580:	f020 0007 	bic.w	r0, r0, #7
 8006584:	1ac2      	subs	r2, r0, r3
 8006586:	bf1c      	itt	ne
 8006588:	1a1b      	subne	r3, r3, r0
 800658a:	50a3      	strne	r3, [r4, r2]
 800658c:	e7af      	b.n	80064ee <_malloc_r+0x22>
 800658e:	6862      	ldr	r2, [r4, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	bf0c      	ite	eq
 8006594:	f8c8 2000 	streq.w	r2, [r8]
 8006598:	605a      	strne	r2, [r3, #4]
 800659a:	e7eb      	b.n	8006574 <_malloc_r+0xa8>
 800659c:	4623      	mov	r3, r4
 800659e:	6864      	ldr	r4, [r4, #4]
 80065a0:	e7ae      	b.n	8006500 <_malloc_r+0x34>
 80065a2:	463c      	mov	r4, r7
 80065a4:	687f      	ldr	r7, [r7, #4]
 80065a6:	e7b6      	b.n	8006516 <_malloc_r+0x4a>
 80065a8:	461a      	mov	r2, r3
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d1fb      	bne.n	80065a8 <_malloc_r+0xdc>
 80065b0:	2300      	movs	r3, #0
 80065b2:	6053      	str	r3, [r2, #4]
 80065b4:	e7de      	b.n	8006574 <_malloc_r+0xa8>
 80065b6:	230c      	movs	r3, #12
 80065b8:	4630      	mov	r0, r6
 80065ba:	6033      	str	r3, [r6, #0]
 80065bc:	f000 f80c 	bl	80065d8 <__malloc_unlock>
 80065c0:	e794      	b.n	80064ec <_malloc_r+0x20>
 80065c2:	6005      	str	r5, [r0, #0]
 80065c4:	e7d6      	b.n	8006574 <_malloc_r+0xa8>
 80065c6:	bf00      	nop
 80065c8:	20000ad8 	.word	0x20000ad8

080065cc <__malloc_lock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	@ (80065d4 <__malloc_lock+0x8>)
 80065ce:	f000 bbc6 	b.w	8006d5e <__retarget_lock_acquire_recursive>
 80065d2:	bf00      	nop
 80065d4:	20000c1c 	.word	0x20000c1c

080065d8 <__malloc_unlock>:
 80065d8:	4801      	ldr	r0, [pc, #4]	@ (80065e0 <__malloc_unlock+0x8>)
 80065da:	f000 bbc1 	b.w	8006d60 <__retarget_lock_release_recursive>
 80065de:	bf00      	nop
 80065e0:	20000c1c 	.word	0x20000c1c

080065e4 <__sflush_r>:
 80065e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	0716      	lsls	r6, r2, #28
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	d454      	bmi.n	800669c <__sflush_r+0xb8>
 80065f2:	684b      	ldr	r3, [r1, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc02      	bgt.n	80065fe <__sflush_r+0x1a>
 80065f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dd48      	ble.n	8006690 <__sflush_r+0xac>
 80065fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006600:	2e00      	cmp	r6, #0
 8006602:	d045      	beq.n	8006690 <__sflush_r+0xac>
 8006604:	2300      	movs	r3, #0
 8006606:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800660a:	682f      	ldr	r7, [r5, #0]
 800660c:	6a21      	ldr	r1, [r4, #32]
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	d030      	beq.n	8006674 <__sflush_r+0x90>
 8006612:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	0759      	lsls	r1, r3, #29
 8006618:	d505      	bpl.n	8006626 <__sflush_r+0x42>
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006620:	b10b      	cbz	r3, 8006626 <__sflush_r+0x42>
 8006622:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006624:	1ad2      	subs	r2, r2, r3
 8006626:	2300      	movs	r3, #0
 8006628:	4628      	mov	r0, r5
 800662a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800662c:	6a21      	ldr	r1, [r4, #32]
 800662e:	47b0      	blx	r6
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	d106      	bne.n	8006644 <__sflush_r+0x60>
 8006636:	6829      	ldr	r1, [r5, #0]
 8006638:	291d      	cmp	r1, #29
 800663a:	d82b      	bhi.n	8006694 <__sflush_r+0xb0>
 800663c:	4a28      	ldr	r2, [pc, #160]	@ (80066e0 <__sflush_r+0xfc>)
 800663e:	410a      	asrs	r2, r1
 8006640:	07d6      	lsls	r6, r2, #31
 8006642:	d427      	bmi.n	8006694 <__sflush_r+0xb0>
 8006644:	2200      	movs	r2, #0
 8006646:	6062      	str	r2, [r4, #4]
 8006648:	6922      	ldr	r2, [r4, #16]
 800664a:	04d9      	lsls	r1, r3, #19
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	d504      	bpl.n	800665a <__sflush_r+0x76>
 8006650:	1c42      	adds	r2, r0, #1
 8006652:	d101      	bne.n	8006658 <__sflush_r+0x74>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b903      	cbnz	r3, 800665a <__sflush_r+0x76>
 8006658:	6560      	str	r0, [r4, #84]	@ 0x54
 800665a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800665c:	602f      	str	r7, [r5, #0]
 800665e:	b1b9      	cbz	r1, 8006690 <__sflush_r+0xac>
 8006660:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006664:	4299      	cmp	r1, r3
 8006666:	d002      	beq.n	800666e <__sflush_r+0x8a>
 8006668:	4628      	mov	r0, r5
 800666a:	f000 fb97 	bl	8006d9c <_free_r>
 800666e:	2300      	movs	r3, #0
 8006670:	6363      	str	r3, [r4, #52]	@ 0x34
 8006672:	e00d      	b.n	8006690 <__sflush_r+0xac>
 8006674:	2301      	movs	r3, #1
 8006676:	4628      	mov	r0, r5
 8006678:	47b0      	blx	r6
 800667a:	4602      	mov	r2, r0
 800667c:	1c50      	adds	r0, r2, #1
 800667e:	d1c9      	bne.n	8006614 <__sflush_r+0x30>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0c6      	beq.n	8006614 <__sflush_r+0x30>
 8006686:	2b1d      	cmp	r3, #29
 8006688:	d001      	beq.n	800668e <__sflush_r+0xaa>
 800668a:	2b16      	cmp	r3, #22
 800668c:	d11d      	bne.n	80066ca <__sflush_r+0xe6>
 800668e:	602f      	str	r7, [r5, #0]
 8006690:	2000      	movs	r0, #0
 8006692:	e021      	b.n	80066d8 <__sflush_r+0xf4>
 8006694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006698:	b21b      	sxth	r3, r3
 800669a:	e01a      	b.n	80066d2 <__sflush_r+0xee>
 800669c:	690f      	ldr	r7, [r1, #16]
 800669e:	2f00      	cmp	r7, #0
 80066a0:	d0f6      	beq.n	8006690 <__sflush_r+0xac>
 80066a2:	0793      	lsls	r3, r2, #30
 80066a4:	bf18      	it	ne
 80066a6:	2300      	movne	r3, #0
 80066a8:	680e      	ldr	r6, [r1, #0]
 80066aa:	bf08      	it	eq
 80066ac:	694b      	ldreq	r3, [r1, #20]
 80066ae:	1bf6      	subs	r6, r6, r7
 80066b0:	600f      	str	r7, [r1, #0]
 80066b2:	608b      	str	r3, [r1, #8]
 80066b4:	2e00      	cmp	r6, #0
 80066b6:	ddeb      	ble.n	8006690 <__sflush_r+0xac>
 80066b8:	4633      	mov	r3, r6
 80066ba:	463a      	mov	r2, r7
 80066bc:	4628      	mov	r0, r5
 80066be:	6a21      	ldr	r1, [r4, #32]
 80066c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80066c4:	47e0      	blx	ip
 80066c6:	2800      	cmp	r0, #0
 80066c8:	dc07      	bgt.n	80066da <__sflush_r+0xf6>
 80066ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066da:	4407      	add	r7, r0
 80066dc:	1a36      	subs	r6, r6, r0
 80066de:	e7e9      	b.n	80066b4 <__sflush_r+0xd0>
 80066e0:	dfbffffe 	.word	0xdfbffffe

080066e4 <_fflush_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	690b      	ldr	r3, [r1, #16]
 80066e8:	4605      	mov	r5, r0
 80066ea:	460c      	mov	r4, r1
 80066ec:	b913      	cbnz	r3, 80066f4 <_fflush_r+0x10>
 80066ee:	2500      	movs	r5, #0
 80066f0:	4628      	mov	r0, r5
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	b118      	cbz	r0, 80066fe <_fflush_r+0x1a>
 80066f6:	6a03      	ldr	r3, [r0, #32]
 80066f8:	b90b      	cbnz	r3, 80066fe <_fflush_r+0x1a>
 80066fa:	f000 f8a7 	bl	800684c <__sinit>
 80066fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f3      	beq.n	80066ee <_fflush_r+0xa>
 8006706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006708:	07d0      	lsls	r0, r2, #31
 800670a:	d404      	bmi.n	8006716 <_fflush_r+0x32>
 800670c:	0599      	lsls	r1, r3, #22
 800670e:	d402      	bmi.n	8006716 <_fflush_r+0x32>
 8006710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006712:	f000 fb24 	bl	8006d5e <__retarget_lock_acquire_recursive>
 8006716:	4628      	mov	r0, r5
 8006718:	4621      	mov	r1, r4
 800671a:	f7ff ff63 	bl	80065e4 <__sflush_r>
 800671e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006720:	4605      	mov	r5, r0
 8006722:	07da      	lsls	r2, r3, #31
 8006724:	d4e4      	bmi.n	80066f0 <_fflush_r+0xc>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	059b      	lsls	r3, r3, #22
 800672a:	d4e1      	bmi.n	80066f0 <_fflush_r+0xc>
 800672c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800672e:	f000 fb17 	bl	8006d60 <__retarget_lock_release_recursive>
 8006732:	e7dd      	b.n	80066f0 <_fflush_r+0xc>

08006734 <std>:
 8006734:	2300      	movs	r3, #0
 8006736:	b510      	push	{r4, lr}
 8006738:	4604      	mov	r4, r0
 800673a:	e9c0 3300 	strd	r3, r3, [r0]
 800673e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006742:	6083      	str	r3, [r0, #8]
 8006744:	8181      	strh	r1, [r0, #12]
 8006746:	6643      	str	r3, [r0, #100]	@ 0x64
 8006748:	81c2      	strh	r2, [r0, #14]
 800674a:	6183      	str	r3, [r0, #24]
 800674c:	4619      	mov	r1, r3
 800674e:	2208      	movs	r2, #8
 8006750:	305c      	adds	r0, #92	@ 0x5c
 8006752:	f000 fa37 	bl	8006bc4 <memset>
 8006756:	4b0d      	ldr	r3, [pc, #52]	@ (800678c <std+0x58>)
 8006758:	6224      	str	r4, [r4, #32]
 800675a:	6263      	str	r3, [r4, #36]	@ 0x24
 800675c:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <std+0x5c>)
 800675e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006760:	4b0c      	ldr	r3, [pc, #48]	@ (8006794 <std+0x60>)
 8006762:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006764:	4b0c      	ldr	r3, [pc, #48]	@ (8006798 <std+0x64>)
 8006766:	6323      	str	r3, [r4, #48]	@ 0x30
 8006768:	4b0c      	ldr	r3, [pc, #48]	@ (800679c <std+0x68>)
 800676a:	429c      	cmp	r4, r3
 800676c:	d006      	beq.n	800677c <std+0x48>
 800676e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006772:	4294      	cmp	r4, r2
 8006774:	d002      	beq.n	800677c <std+0x48>
 8006776:	33d0      	adds	r3, #208	@ 0xd0
 8006778:	429c      	cmp	r4, r3
 800677a:	d105      	bne.n	8006788 <std+0x54>
 800677c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006784:	f000 baea 	b.w	8006d5c <__retarget_lock_init_recursive>
 8006788:	bd10      	pop	{r4, pc}
 800678a:	bf00      	nop
 800678c:	08006a15 	.word	0x08006a15
 8006790:	08006a37 	.word	0x08006a37
 8006794:	08006a6f 	.word	0x08006a6f
 8006798:	08006a93 	.word	0x08006a93
 800679c:	20000adc 	.word	0x20000adc

080067a0 <stdio_exit_handler>:
 80067a0:	4a02      	ldr	r2, [pc, #8]	@ (80067ac <stdio_exit_handler+0xc>)
 80067a2:	4903      	ldr	r1, [pc, #12]	@ (80067b0 <stdio_exit_handler+0x10>)
 80067a4:	4803      	ldr	r0, [pc, #12]	@ (80067b4 <stdio_exit_handler+0x14>)
 80067a6:	f000 b869 	b.w	800687c <_fwalk_sglue>
 80067aa:	bf00      	nop
 80067ac:	20000024 	.word	0x20000024
 80067b0:	080066e5 	.word	0x080066e5
 80067b4:	20000034 	.word	0x20000034

080067b8 <cleanup_stdio>:
 80067b8:	6841      	ldr	r1, [r0, #4]
 80067ba:	4b0c      	ldr	r3, [pc, #48]	@ (80067ec <cleanup_stdio+0x34>)
 80067bc:	b510      	push	{r4, lr}
 80067be:	4299      	cmp	r1, r3
 80067c0:	4604      	mov	r4, r0
 80067c2:	d001      	beq.n	80067c8 <cleanup_stdio+0x10>
 80067c4:	f7ff ff8e 	bl	80066e4 <_fflush_r>
 80067c8:	68a1      	ldr	r1, [r4, #8]
 80067ca:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <cleanup_stdio+0x38>)
 80067cc:	4299      	cmp	r1, r3
 80067ce:	d002      	beq.n	80067d6 <cleanup_stdio+0x1e>
 80067d0:	4620      	mov	r0, r4
 80067d2:	f7ff ff87 	bl	80066e4 <_fflush_r>
 80067d6:	68e1      	ldr	r1, [r4, #12]
 80067d8:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <cleanup_stdio+0x3c>)
 80067da:	4299      	cmp	r1, r3
 80067dc:	d004      	beq.n	80067e8 <cleanup_stdio+0x30>
 80067de:	4620      	mov	r0, r4
 80067e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e4:	f7ff bf7e 	b.w	80066e4 <_fflush_r>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	20000adc 	.word	0x20000adc
 80067f0:	20000b44 	.word	0x20000b44
 80067f4:	20000bac 	.word	0x20000bac

080067f8 <global_stdio_init.part.0>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006828 <global_stdio_init.part.0+0x30>)
 80067fc:	4c0b      	ldr	r4, [pc, #44]	@ (800682c <global_stdio_init.part.0+0x34>)
 80067fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006830 <global_stdio_init.part.0+0x38>)
 8006800:	4620      	mov	r0, r4
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	2104      	movs	r1, #4
 8006806:	2200      	movs	r2, #0
 8006808:	f7ff ff94 	bl	8006734 <std>
 800680c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006810:	2201      	movs	r2, #1
 8006812:	2109      	movs	r1, #9
 8006814:	f7ff ff8e 	bl	8006734 <std>
 8006818:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800681c:	2202      	movs	r2, #2
 800681e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006822:	2112      	movs	r1, #18
 8006824:	f7ff bf86 	b.w	8006734 <std>
 8006828:	20000c14 	.word	0x20000c14
 800682c:	20000adc 	.word	0x20000adc
 8006830:	080067a1 	.word	0x080067a1

08006834 <__sfp_lock_acquire>:
 8006834:	4801      	ldr	r0, [pc, #4]	@ (800683c <__sfp_lock_acquire+0x8>)
 8006836:	f000 ba92 	b.w	8006d5e <__retarget_lock_acquire_recursive>
 800683a:	bf00      	nop
 800683c:	20000c1d 	.word	0x20000c1d

08006840 <__sfp_lock_release>:
 8006840:	4801      	ldr	r0, [pc, #4]	@ (8006848 <__sfp_lock_release+0x8>)
 8006842:	f000 ba8d 	b.w	8006d60 <__retarget_lock_release_recursive>
 8006846:	bf00      	nop
 8006848:	20000c1d 	.word	0x20000c1d

0800684c <__sinit>:
 800684c:	b510      	push	{r4, lr}
 800684e:	4604      	mov	r4, r0
 8006850:	f7ff fff0 	bl	8006834 <__sfp_lock_acquire>
 8006854:	6a23      	ldr	r3, [r4, #32]
 8006856:	b11b      	cbz	r3, 8006860 <__sinit+0x14>
 8006858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685c:	f7ff bff0 	b.w	8006840 <__sfp_lock_release>
 8006860:	4b04      	ldr	r3, [pc, #16]	@ (8006874 <__sinit+0x28>)
 8006862:	6223      	str	r3, [r4, #32]
 8006864:	4b04      	ldr	r3, [pc, #16]	@ (8006878 <__sinit+0x2c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f5      	bne.n	8006858 <__sinit+0xc>
 800686c:	f7ff ffc4 	bl	80067f8 <global_stdio_init.part.0>
 8006870:	e7f2      	b.n	8006858 <__sinit+0xc>
 8006872:	bf00      	nop
 8006874:	080067b9 	.word	0x080067b9
 8006878:	20000c14 	.word	0x20000c14

0800687c <_fwalk_sglue>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4607      	mov	r7, r0
 8006882:	4688      	mov	r8, r1
 8006884:	4614      	mov	r4, r2
 8006886:	2600      	movs	r6, #0
 8006888:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800688c:	f1b9 0901 	subs.w	r9, r9, #1
 8006890:	d505      	bpl.n	800689e <_fwalk_sglue+0x22>
 8006892:	6824      	ldr	r4, [r4, #0]
 8006894:	2c00      	cmp	r4, #0
 8006896:	d1f7      	bne.n	8006888 <_fwalk_sglue+0xc>
 8006898:	4630      	mov	r0, r6
 800689a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800689e:	89ab      	ldrh	r3, [r5, #12]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d907      	bls.n	80068b4 <_fwalk_sglue+0x38>
 80068a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068a8:	3301      	adds	r3, #1
 80068aa:	d003      	beq.n	80068b4 <_fwalk_sglue+0x38>
 80068ac:	4629      	mov	r1, r5
 80068ae:	4638      	mov	r0, r7
 80068b0:	47c0      	blx	r8
 80068b2:	4306      	orrs	r6, r0
 80068b4:	3568      	adds	r5, #104	@ 0x68
 80068b6:	e7e9      	b.n	800688c <_fwalk_sglue+0x10>

080068b8 <_fwrite_r>:
 80068b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	9c08      	ldr	r4, [sp, #32]
 80068be:	468a      	mov	sl, r1
 80068c0:	4690      	mov	r8, r2
 80068c2:	4606      	mov	r6, r0
 80068c4:	fb02 f903 	mul.w	r9, r2, r3
 80068c8:	b118      	cbz	r0, 80068d2 <_fwrite_r+0x1a>
 80068ca:	6a03      	ldr	r3, [r0, #32]
 80068cc:	b90b      	cbnz	r3, 80068d2 <_fwrite_r+0x1a>
 80068ce:	f7ff ffbd 	bl	800684c <__sinit>
 80068d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068d4:	07dd      	lsls	r5, r3, #31
 80068d6:	d405      	bmi.n	80068e4 <_fwrite_r+0x2c>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	0598      	lsls	r0, r3, #22
 80068dc:	d402      	bmi.n	80068e4 <_fwrite_r+0x2c>
 80068de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068e0:	f000 fa3d 	bl	8006d5e <__retarget_lock_acquire_recursive>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	0719      	lsls	r1, r3, #28
 80068e8:	d516      	bpl.n	8006918 <_fwrite_r+0x60>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	b1a3      	cbz	r3, 8006918 <_fwrite_r+0x60>
 80068ee:	2500      	movs	r5, #0
 80068f0:	454d      	cmp	r5, r9
 80068f2:	d01f      	beq.n	8006934 <_fwrite_r+0x7c>
 80068f4:	68a7      	ldr	r7, [r4, #8]
 80068f6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80068fa:	3f01      	subs	r7, #1
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	60a7      	str	r7, [r4, #8]
 8006900:	da04      	bge.n	800690c <_fwrite_r+0x54>
 8006902:	69a3      	ldr	r3, [r4, #24]
 8006904:	429f      	cmp	r7, r3
 8006906:	db0f      	blt.n	8006928 <_fwrite_r+0x70>
 8006908:	290a      	cmp	r1, #10
 800690a:	d00d      	beq.n	8006928 <_fwrite_r+0x70>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	7019      	strb	r1, [r3, #0]
 8006914:	3501      	adds	r5, #1
 8006916:	e7eb      	b.n	80068f0 <_fwrite_r+0x38>
 8006918:	4621      	mov	r1, r4
 800691a:	4630      	mov	r0, r6
 800691c:	f000 f8fc 	bl	8006b18 <__swsetup_r>
 8006920:	2800      	cmp	r0, #0
 8006922:	d0e4      	beq.n	80068ee <_fwrite_r+0x36>
 8006924:	2500      	movs	r5, #0
 8006926:	e005      	b.n	8006934 <_fwrite_r+0x7c>
 8006928:	4622      	mov	r2, r4
 800692a:	4630      	mov	r0, r6
 800692c:	f000 f8b5 	bl	8006a9a <__swbuf_r>
 8006930:	3001      	adds	r0, #1
 8006932:	d1ef      	bne.n	8006914 <_fwrite_r+0x5c>
 8006934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006936:	07da      	lsls	r2, r3, #31
 8006938:	d405      	bmi.n	8006946 <_fwrite_r+0x8e>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	059b      	lsls	r3, r3, #22
 800693e:	d402      	bmi.n	8006946 <_fwrite_r+0x8e>
 8006940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006942:	f000 fa0d 	bl	8006d60 <__retarget_lock_release_recursive>
 8006946:	fbb5 f0f8 	udiv	r0, r5, r8
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006950 <fwrite>:
 8006950:	b507      	push	{r0, r1, r2, lr}
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	460a      	mov	r2, r1
 8006958:	4601      	mov	r1, r0
 800695a:	4803      	ldr	r0, [pc, #12]	@ (8006968 <fwrite+0x18>)
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f7ff ffab 	bl	80068b8 <_fwrite_r>
 8006962:	b003      	add	sp, #12
 8006964:	f85d fb04 	ldr.w	pc, [sp], #4
 8006968:	20000030 	.word	0x20000030

0800696c <sniprintf>:
 800696c:	b40c      	push	{r2, r3}
 800696e:	b530      	push	{r4, r5, lr}
 8006970:	4b17      	ldr	r3, [pc, #92]	@ (80069d0 <sniprintf+0x64>)
 8006972:	1e0c      	subs	r4, r1, #0
 8006974:	681d      	ldr	r5, [r3, #0]
 8006976:	b09d      	sub	sp, #116	@ 0x74
 8006978:	da08      	bge.n	800698c <sniprintf+0x20>
 800697a:	238b      	movs	r3, #139	@ 0x8b
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	b01d      	add	sp, #116	@ 0x74
 8006984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006988:	b002      	add	sp, #8
 800698a:	4770      	bx	lr
 800698c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006990:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006994:	bf0c      	ite	eq
 8006996:	4623      	moveq	r3, r4
 8006998:	f104 33ff 	addne.w	r3, r4, #4294967295
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069a4:	9002      	str	r0, [sp, #8]
 80069a6:	9006      	str	r0, [sp, #24]
 80069a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069ac:	4628      	mov	r0, r5
 80069ae:	ab21      	add	r3, sp, #132	@ 0x84
 80069b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80069b2:	a902      	add	r1, sp, #8
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	f000 fa95 	bl	8006ee4 <_svfiprintf_r>
 80069ba:	1c43      	adds	r3, r0, #1
 80069bc:	bfbc      	itt	lt
 80069be:	238b      	movlt	r3, #139	@ 0x8b
 80069c0:	602b      	strlt	r3, [r5, #0]
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	d0dd      	beq.n	8006982 <sniprintf+0x16>
 80069c6:	2200      	movs	r2, #0
 80069c8:	9b02      	ldr	r3, [sp, #8]
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e7d9      	b.n	8006982 <sniprintf+0x16>
 80069ce:	bf00      	nop
 80069d0:	20000030 	.word	0x20000030

080069d4 <siprintf>:
 80069d4:	b40e      	push	{r1, r2, r3}
 80069d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069da:	b500      	push	{lr}
 80069dc:	b09c      	sub	sp, #112	@ 0x70
 80069de:	ab1d      	add	r3, sp, #116	@ 0x74
 80069e0:	9002      	str	r0, [sp, #8]
 80069e2:	9006      	str	r0, [sp, #24]
 80069e4:	9107      	str	r1, [sp, #28]
 80069e6:	9104      	str	r1, [sp, #16]
 80069e8:	4808      	ldr	r0, [pc, #32]	@ (8006a0c <siprintf+0x38>)
 80069ea:	4909      	ldr	r1, [pc, #36]	@ (8006a10 <siprintf+0x3c>)
 80069ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f0:	9105      	str	r1, [sp, #20]
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	a902      	add	r1, sp, #8
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	f000 fa74 	bl	8006ee4 <_svfiprintf_r>
 80069fc:	2200      	movs	r2, #0
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	b01c      	add	sp, #112	@ 0x70
 8006a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a08:	b003      	add	sp, #12
 8006a0a:	4770      	bx	lr
 8006a0c:	20000030 	.word	0x20000030
 8006a10:	ffff0208 	.word	0xffff0208

08006a14 <__sread>:
 8006a14:	b510      	push	{r4, lr}
 8006a16:	460c      	mov	r4, r1
 8006a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1c:	f000 f92c 	bl	8006c78 <_read_r>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	bfab      	itete	ge
 8006a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a26:	89a3      	ldrhlt	r3, [r4, #12]
 8006a28:	181b      	addge	r3, r3, r0
 8006a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a2e:	bfac      	ite	ge
 8006a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a32:	81a3      	strhlt	r3, [r4, #12]
 8006a34:	bd10      	pop	{r4, pc}

08006a36 <__swrite>:
 8006a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3a:	461f      	mov	r7, r3
 8006a3c:	898b      	ldrh	r3, [r1, #12]
 8006a3e:	4605      	mov	r5, r0
 8006a40:	05db      	lsls	r3, r3, #23
 8006a42:	460c      	mov	r4, r1
 8006a44:	4616      	mov	r6, r2
 8006a46:	d505      	bpl.n	8006a54 <__swrite+0x1e>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a50:	f000 f900 	bl	8006c54 <_lseek_r>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	4632      	mov	r2, r6
 8006a58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	4628      	mov	r0, r5
 8006a60:	463b      	mov	r3, r7
 8006a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	f000 b93b 	b.w	8006ce4 <_write_r>

08006a6e <__sseek>:
 8006a6e:	b510      	push	{r4, lr}
 8006a70:	460c      	mov	r4, r1
 8006a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a76:	f000 f8ed 	bl	8006c54 <_lseek_r>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	bf15      	itete	ne
 8006a80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a8a:	81a3      	strheq	r3, [r4, #12]
 8006a8c:	bf18      	it	ne
 8006a8e:	81a3      	strhne	r3, [r4, #12]
 8006a90:	bd10      	pop	{r4, pc}

08006a92 <__sclose>:
 8006a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a96:	f000 b8cd 	b.w	8006c34 <_close_r>

08006a9a <__swbuf_r>:
 8006a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9c:	460e      	mov	r6, r1
 8006a9e:	4614      	mov	r4, r2
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	b118      	cbz	r0, 8006aac <__swbuf_r+0x12>
 8006aa4:	6a03      	ldr	r3, [r0, #32]
 8006aa6:	b90b      	cbnz	r3, 8006aac <__swbuf_r+0x12>
 8006aa8:	f7ff fed0 	bl	800684c <__sinit>
 8006aac:	69a3      	ldr	r3, [r4, #24]
 8006aae:	60a3      	str	r3, [r4, #8]
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	071a      	lsls	r2, r3, #28
 8006ab4:	d501      	bpl.n	8006aba <__swbuf_r+0x20>
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	b943      	cbnz	r3, 8006acc <__swbuf_r+0x32>
 8006aba:	4621      	mov	r1, r4
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 f82b 	bl	8006b18 <__swsetup_r>
 8006ac2:	b118      	cbz	r0, 8006acc <__swbuf_r+0x32>
 8006ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ac8:	4638      	mov	r0, r7
 8006aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	b2f6      	uxtb	r6, r6
 8006ad2:	1a98      	subs	r0, r3, r2
 8006ad4:	6963      	ldr	r3, [r4, #20]
 8006ad6:	4637      	mov	r7, r6
 8006ad8:	4283      	cmp	r3, r0
 8006ada:	dc05      	bgt.n	8006ae8 <__swbuf_r+0x4e>
 8006adc:	4621      	mov	r1, r4
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f7ff fe00 	bl	80066e4 <_fflush_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d1ed      	bne.n	8006ac4 <__swbuf_r+0x2a>
 8006ae8:	68a3      	ldr	r3, [r4, #8]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	701e      	strb	r6, [r3, #0]
 8006af6:	6962      	ldr	r2, [r4, #20]
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d004      	beq.n	8006b08 <__swbuf_r+0x6e>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	07db      	lsls	r3, r3, #31
 8006b02:	d5e1      	bpl.n	8006ac8 <__swbuf_r+0x2e>
 8006b04:	2e0a      	cmp	r6, #10
 8006b06:	d1df      	bne.n	8006ac8 <__swbuf_r+0x2e>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f7ff fdea 	bl	80066e4 <_fflush_r>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d0d9      	beq.n	8006ac8 <__swbuf_r+0x2e>
 8006b14:	e7d6      	b.n	8006ac4 <__swbuf_r+0x2a>
	...

08006b18 <__swsetup_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4b29      	ldr	r3, [pc, #164]	@ (8006bc0 <__swsetup_r+0xa8>)
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	460c      	mov	r4, r1
 8006b22:	b118      	cbz	r0, 8006b2c <__swsetup_r+0x14>
 8006b24:	6a03      	ldr	r3, [r0, #32]
 8006b26:	b90b      	cbnz	r3, 8006b2c <__swsetup_r+0x14>
 8006b28:	f7ff fe90 	bl	800684c <__sinit>
 8006b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b30:	0719      	lsls	r1, r3, #28
 8006b32:	d422      	bmi.n	8006b7a <__swsetup_r+0x62>
 8006b34:	06da      	lsls	r2, r3, #27
 8006b36:	d407      	bmi.n	8006b48 <__swsetup_r+0x30>
 8006b38:	2209      	movs	r2, #9
 8006b3a:	602a      	str	r2, [r5, #0]
 8006b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	e033      	b.n	8006bb0 <__swsetup_r+0x98>
 8006b48:	0758      	lsls	r0, r3, #29
 8006b4a:	d512      	bpl.n	8006b72 <__swsetup_r+0x5a>
 8006b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b4e:	b141      	cbz	r1, 8006b62 <__swsetup_r+0x4a>
 8006b50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b54:	4299      	cmp	r1, r3
 8006b56:	d002      	beq.n	8006b5e <__swsetup_r+0x46>
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 f91f 	bl	8006d9c <_free_r>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b68:	81a3      	strh	r3, [r4, #12]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6063      	str	r3, [r4, #4]
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f043 0308 	orr.w	r3, r3, #8
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	b94b      	cbnz	r3, 8006b92 <__swsetup_r+0x7a>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b88:	d003      	beq.n	8006b92 <__swsetup_r+0x7a>
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 fc5c 	bl	800744a <__smakebuf_r>
 8006b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b96:	f013 0201 	ands.w	r2, r3, #1
 8006b9a:	d00a      	beq.n	8006bb2 <__swsetup_r+0x9a>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	60a2      	str	r2, [r4, #8]
 8006ba0:	6962      	ldr	r2, [r4, #20]
 8006ba2:	4252      	negs	r2, r2
 8006ba4:	61a2      	str	r2, [r4, #24]
 8006ba6:	6922      	ldr	r2, [r4, #16]
 8006ba8:	b942      	cbnz	r2, 8006bbc <__swsetup_r+0xa4>
 8006baa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006bae:	d1c5      	bne.n	8006b3c <__swsetup_r+0x24>
 8006bb0:	bd38      	pop	{r3, r4, r5, pc}
 8006bb2:	0799      	lsls	r1, r3, #30
 8006bb4:	bf58      	it	pl
 8006bb6:	6962      	ldrpl	r2, [r4, #20]
 8006bb8:	60a2      	str	r2, [r4, #8]
 8006bba:	e7f4      	b.n	8006ba6 <__swsetup_r+0x8e>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e7f7      	b.n	8006bb0 <__swsetup_r+0x98>
 8006bc0:	20000030 	.word	0x20000030

08006bc4 <memset>:
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4402      	add	r2, r0
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d100      	bne.n	8006bce <memset+0xa>
 8006bcc:	4770      	bx	lr
 8006bce:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd2:	e7f9      	b.n	8006bc8 <memset+0x4>

08006bd4 <_raise_r>:
 8006bd4:	291f      	cmp	r1, #31
 8006bd6:	b538      	push	{r3, r4, r5, lr}
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	d904      	bls.n	8006be8 <_raise_r+0x14>
 8006bde:	2316      	movs	r3, #22
 8006be0:	6003      	str	r3, [r0, #0]
 8006be2:	f04f 30ff 	mov.w	r0, #4294967295
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006bea:	b112      	cbz	r2, 8006bf2 <_raise_r+0x1e>
 8006bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bf0:	b94b      	cbnz	r3, 8006c06 <_raise_r+0x32>
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f000 f864 	bl	8006cc0 <_getpid_r>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4601      	mov	r1, r0
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c02:	f000 b84b 	b.w	8006c9c <_kill_r>
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d00a      	beq.n	8006c20 <_raise_r+0x4c>
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	d103      	bne.n	8006c16 <_raise_r+0x42>
 8006c0e:	2316      	movs	r3, #22
 8006c10:	6003      	str	r3, [r0, #0]
 8006c12:	2001      	movs	r0, #1
 8006c14:	e7e7      	b.n	8006be6 <_raise_r+0x12>
 8006c16:	2100      	movs	r1, #0
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006c1e:	4798      	blx	r3
 8006c20:	2000      	movs	r0, #0
 8006c22:	e7e0      	b.n	8006be6 <_raise_r+0x12>

08006c24 <raise>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	@ (8006c30 <raise+0xc>)
 8006c26:	4601      	mov	r1, r0
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f7ff bfd3 	b.w	8006bd4 <_raise_r>
 8006c2e:	bf00      	nop
 8006c30:	20000030 	.word	0x20000030

08006c34 <_close_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	2300      	movs	r3, #0
 8006c38:	4d05      	ldr	r5, [pc, #20]	@ (8006c50 <_close_r+0x1c>)
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	f7fa fe9d 	bl	800197e <_close>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_close_r+0x1a>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_close_r+0x1a>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	20000c18 	.word	0x20000c18

08006c54 <_lseek_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4d05      	ldr	r5, [pc, #20]	@ (8006c74 <_lseek_r+0x20>)
 8006c60:	602a      	str	r2, [r5, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f7fa feaf 	bl	80019c6 <_lseek>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_lseek_r+0x1e>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_lseek_r+0x1e>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	20000c18 	.word	0x20000c18

08006c78 <_read_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	4611      	mov	r1, r2
 8006c80:	2200      	movs	r2, #0
 8006c82:	4d05      	ldr	r5, [pc, #20]	@ (8006c98 <_read_r+0x20>)
 8006c84:	602a      	str	r2, [r5, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f7fa fe40 	bl	800190c <_read>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_read_r+0x1e>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_read_r+0x1e>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	20000c18 	.word	0x20000c18

08006c9c <_kill_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	4d06      	ldr	r5, [pc, #24]	@ (8006cbc <_kill_r+0x20>)
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	f7fa fe14 	bl	80018d6 <_kill>
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	d102      	bne.n	8006cb8 <_kill_r+0x1c>
 8006cb2:	682b      	ldr	r3, [r5, #0]
 8006cb4:	b103      	cbz	r3, 8006cb8 <_kill_r+0x1c>
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	bd38      	pop	{r3, r4, r5, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000c18 	.word	0x20000c18

08006cc0 <_getpid_r>:
 8006cc0:	f7fa be02 	b.w	80018c8 <_getpid>

08006cc4 <_sbrk_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4d05      	ldr	r5, [pc, #20]	@ (8006ce0 <_sbrk_r+0x1c>)
 8006cca:	4604      	mov	r4, r0
 8006ccc:	4608      	mov	r0, r1
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	f7fa fe86 	bl	80019e0 <_sbrk>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_sbrk_r+0x1a>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_sbrk_r+0x1a>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20000c18 	.word	0x20000c18

08006ce4 <_write_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	2200      	movs	r2, #0
 8006cee:	4d05      	ldr	r5, [pc, #20]	@ (8006d04 <_write_r+0x20>)
 8006cf0:	602a      	str	r2, [r5, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f7fa fe27 	bl	8001946 <_write>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d102      	bne.n	8006d02 <_write_r+0x1e>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	b103      	cbz	r3, 8006d02 <_write_r+0x1e>
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	20000c18 	.word	0x20000c18

08006d08 <__errno>:
 8006d08:	4b01      	ldr	r3, [pc, #4]	@ (8006d10 <__errno+0x8>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000030 	.word	0x20000030

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	2600      	movs	r6, #0
 8006d18:	4d0c      	ldr	r5, [pc, #48]	@ (8006d4c <__libc_init_array+0x38>)
 8006d1a:	4c0d      	ldr	r4, [pc, #52]	@ (8006d50 <__libc_init_array+0x3c>)
 8006d1c:	1b64      	subs	r4, r4, r5
 8006d1e:	10a4      	asrs	r4, r4, #2
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	f000 fc40 	bl	80075a8 <_init>
 8006d28:	2600      	movs	r6, #0
 8006d2a:	4d0a      	ldr	r5, [pc, #40]	@ (8006d54 <__libc_init_array+0x40>)
 8006d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8006d58 <__libc_init_array+0x44>)
 8006d2e:	1b64      	subs	r4, r4, r5
 8006d30:	10a4      	asrs	r4, r4, #2
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	080084d4 	.word	0x080084d4
 8006d50:	080084d4 	.word	0x080084d4
 8006d54:	080084d4 	.word	0x080084d4
 8006d58:	080084d8 	.word	0x080084d8

08006d5c <__retarget_lock_init_recursive>:
 8006d5c:	4770      	bx	lr

08006d5e <__retarget_lock_acquire_recursive>:
 8006d5e:	4770      	bx	lr

08006d60 <__retarget_lock_release_recursive>:
 8006d60:	4770      	bx	lr

08006d62 <memchr>:
 8006d62:	4603      	mov	r3, r0
 8006d64:	b510      	push	{r4, lr}
 8006d66:	b2c9      	uxtb	r1, r1
 8006d68:	4402      	add	r2, r0
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	d101      	bne.n	8006d74 <memchr+0x12>
 8006d70:	2000      	movs	r0, #0
 8006d72:	e003      	b.n	8006d7c <memchr+0x1a>
 8006d74:	7804      	ldrb	r4, [r0, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	428c      	cmp	r4, r1
 8006d7a:	d1f6      	bne.n	8006d6a <memchr+0x8>
 8006d7c:	bd10      	pop	{r4, pc}

08006d7e <memcpy>:
 8006d7e:	440a      	add	r2, r1
 8006d80:	4291      	cmp	r1, r2
 8006d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d86:	d100      	bne.n	8006d8a <memcpy+0xc>
 8006d88:	4770      	bx	lr
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d90:	4291      	cmp	r1, r2
 8006d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d96:	d1f9      	bne.n	8006d8c <memcpy+0xe>
 8006d98:	bd10      	pop	{r4, pc}
	...

08006d9c <_free_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d040      	beq.n	8006e26 <_free_r+0x8a>
 8006da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da8:	1f0c      	subs	r4, r1, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bfb8      	it	lt
 8006dae:	18e4      	addlt	r4, r4, r3
 8006db0:	f7ff fc0c 	bl	80065cc <__malloc_lock>
 8006db4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e28 <_free_r+0x8c>)
 8006db6:	6813      	ldr	r3, [r2, #0]
 8006db8:	b933      	cbnz	r3, 8006dc8 <_free_r+0x2c>
 8006dba:	6063      	str	r3, [r4, #4]
 8006dbc:	6014      	str	r4, [r2, #0]
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc4:	f7ff bc08 	b.w	80065d8 <__malloc_unlock>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d908      	bls.n	8006dde <_free_r+0x42>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	e7ed      	b.n	8006dba <_free_r+0x1e>
 8006dde:	461a      	mov	r2, r3
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b10b      	cbz	r3, 8006de8 <_free_r+0x4c>
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	d9fa      	bls.n	8006dde <_free_r+0x42>
 8006de8:	6811      	ldr	r1, [r2, #0]
 8006dea:	1850      	adds	r0, r2, r1
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d10b      	bne.n	8006e08 <_free_r+0x6c>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	4401      	add	r1, r0
 8006df4:	1850      	adds	r0, r2, r1
 8006df6:	4283      	cmp	r3, r0
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	d1e0      	bne.n	8006dbe <_free_r+0x22>
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4408      	add	r0, r1
 8006e02:	6010      	str	r0, [r2, #0]
 8006e04:	6053      	str	r3, [r2, #4]
 8006e06:	e7da      	b.n	8006dbe <_free_r+0x22>
 8006e08:	d902      	bls.n	8006e10 <_free_r+0x74>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	e7d6      	b.n	8006dbe <_free_r+0x22>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	1821      	adds	r1, r4, r0
 8006e14:	428b      	cmp	r3, r1
 8006e16:	bf01      	itttt	eq
 8006e18:	6819      	ldreq	r1, [r3, #0]
 8006e1a:	685b      	ldreq	r3, [r3, #4]
 8006e1c:	1809      	addeq	r1, r1, r0
 8006e1e:	6021      	streq	r1, [r4, #0]
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6054      	str	r4, [r2, #4]
 8006e24:	e7cb      	b.n	8006dbe <_free_r+0x22>
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20000ad8 	.word	0x20000ad8

08006e2c <__ssputs_r>:
 8006e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	461f      	mov	r7, r3
 8006e32:	688e      	ldr	r6, [r1, #8]
 8006e34:	4682      	mov	sl, r0
 8006e36:	42be      	cmp	r6, r7
 8006e38:	460c      	mov	r4, r1
 8006e3a:	4690      	mov	r8, r2
 8006e3c:	680b      	ldr	r3, [r1, #0]
 8006e3e:	d82d      	bhi.n	8006e9c <__ssputs_r+0x70>
 8006e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e48:	d026      	beq.n	8006e98 <__ssputs_r+0x6c>
 8006e4a:	6965      	ldr	r5, [r4, #20]
 8006e4c:	6909      	ldr	r1, [r1, #16]
 8006e4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e52:	eba3 0901 	sub.w	r9, r3, r1
 8006e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e5a:	1c7b      	adds	r3, r7, #1
 8006e5c:	444b      	add	r3, r9
 8006e5e:	106d      	asrs	r5, r5, #1
 8006e60:	429d      	cmp	r5, r3
 8006e62:	bf38      	it	cc
 8006e64:	461d      	movcc	r5, r3
 8006e66:	0553      	lsls	r3, r2, #21
 8006e68:	d527      	bpl.n	8006eba <__ssputs_r+0x8e>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7ff fb2e 	bl	80064cc <_malloc_r>
 8006e70:	4606      	mov	r6, r0
 8006e72:	b360      	cbz	r0, 8006ece <__ssputs_r+0xa2>
 8006e74:	464a      	mov	r2, r9
 8006e76:	6921      	ldr	r1, [r4, #16]
 8006e78:	f7ff ff81 	bl	8006d7e <memcpy>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	6126      	str	r6, [r4, #16]
 8006e8a:	444e      	add	r6, r9
 8006e8c:	6026      	str	r6, [r4, #0]
 8006e8e:	463e      	mov	r6, r7
 8006e90:	6165      	str	r5, [r4, #20]
 8006e92:	eba5 0509 	sub.w	r5, r5, r9
 8006e96:	60a5      	str	r5, [r4, #8]
 8006e98:	42be      	cmp	r6, r7
 8006e9a:	d900      	bls.n	8006e9e <__ssputs_r+0x72>
 8006e9c:	463e      	mov	r6, r7
 8006e9e:	4632      	mov	r2, r6
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	6820      	ldr	r0, [r4, #0]
 8006ea4:	f000 fb0d 	bl	80074c2 <memmove>
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	1b9b      	subs	r3, r3, r6
 8006eae:	60a3      	str	r3, [r4, #8]
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	4433      	add	r3, r6
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eba:	462a      	mov	r2, r5
 8006ebc:	f000 fb3e 	bl	800753c <_realloc_r>
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d1e0      	bne.n	8006e88 <__ssputs_r+0x5c>
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	6921      	ldr	r1, [r4, #16]
 8006eca:	f7ff ff67 	bl	8006d9c <_free_r>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	f8ca 3000 	str.w	r3, [sl]
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	e7e9      	b.n	8006eb6 <__ssputs_r+0x8a>
	...

08006ee4 <_svfiprintf_r>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	4698      	mov	r8, r3
 8006eea:	898b      	ldrh	r3, [r1, #12]
 8006eec:	4607      	mov	r7, r0
 8006eee:	061b      	lsls	r3, r3, #24
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	b09d      	sub	sp, #116	@ 0x74
 8006ef6:	d510      	bpl.n	8006f1a <_svfiprintf_r+0x36>
 8006ef8:	690b      	ldr	r3, [r1, #16]
 8006efa:	b973      	cbnz	r3, 8006f1a <_svfiprintf_r+0x36>
 8006efc:	2140      	movs	r1, #64	@ 0x40
 8006efe:	f7ff fae5 	bl	80064cc <_malloc_r>
 8006f02:	6028      	str	r0, [r5, #0]
 8006f04:	6128      	str	r0, [r5, #16]
 8006f06:	b930      	cbnz	r0, 8006f16 <_svfiprintf_r+0x32>
 8006f08:	230c      	movs	r3, #12
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	b01d      	add	sp, #116	@ 0x74
 8006f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f16:	2340      	movs	r3, #64	@ 0x40
 8006f18:	616b      	str	r3, [r5, #20]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f1e:	2320      	movs	r3, #32
 8006f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f24:	2330      	movs	r3, #48	@ 0x30
 8006f26:	f04f 0901 	mov.w	r9, #1
 8006f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80070c8 <_svfiprintf_r+0x1e4>
 8006f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f36:	4623      	mov	r3, r4
 8006f38:	469a      	mov	sl, r3
 8006f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f3e:	b10a      	cbz	r2, 8006f44 <_svfiprintf_r+0x60>
 8006f40:	2a25      	cmp	r2, #37	@ 0x25
 8006f42:	d1f9      	bne.n	8006f38 <_svfiprintf_r+0x54>
 8006f44:	ebba 0b04 	subs.w	fp, sl, r4
 8006f48:	d00b      	beq.n	8006f62 <_svfiprintf_r+0x7e>
 8006f4a:	465b      	mov	r3, fp
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff ff6b 	bl	8006e2c <__ssputs_r>
 8006f56:	3001      	adds	r0, #1
 8006f58:	f000 80a7 	beq.w	80070aa <_svfiprintf_r+0x1c6>
 8006f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f5e:	445a      	add	r2, fp
 8006f60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f62:	f89a 3000 	ldrb.w	r3, [sl]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 809f 	beq.w	80070aa <_svfiprintf_r+0x1c6>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f76:	f10a 0a01 	add.w	sl, sl, #1
 8006f7a:	9304      	str	r3, [sp, #16]
 8006f7c:	9307      	str	r3, [sp, #28]
 8006f7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f84:	4654      	mov	r4, sl
 8006f86:	2205      	movs	r2, #5
 8006f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8c:	484e      	ldr	r0, [pc, #312]	@ (80070c8 <_svfiprintf_r+0x1e4>)
 8006f8e:	f7ff fee8 	bl	8006d62 <memchr>
 8006f92:	9a04      	ldr	r2, [sp, #16]
 8006f94:	b9d8      	cbnz	r0, 8006fce <_svfiprintf_r+0xea>
 8006f96:	06d0      	lsls	r0, r2, #27
 8006f98:	bf44      	itt	mi
 8006f9a:	2320      	movmi	r3, #32
 8006f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fa0:	0711      	lsls	r1, r2, #28
 8006fa2:	bf44      	itt	mi
 8006fa4:	232b      	movmi	r3, #43	@ 0x2b
 8006fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006faa:	f89a 3000 	ldrb.w	r3, [sl]
 8006fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fb0:	d015      	beq.n	8006fde <_svfiprintf_r+0xfa>
 8006fb2:	4654      	mov	r4, sl
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f04f 0c0a 	mov.w	ip, #10
 8006fba:	9a07      	ldr	r2, [sp, #28]
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc2:	3b30      	subs	r3, #48	@ 0x30
 8006fc4:	2b09      	cmp	r3, #9
 8006fc6:	d94b      	bls.n	8007060 <_svfiprintf_r+0x17c>
 8006fc8:	b1b0      	cbz	r0, 8006ff8 <_svfiprintf_r+0x114>
 8006fca:	9207      	str	r2, [sp, #28]
 8006fcc:	e014      	b.n	8006ff8 <_svfiprintf_r+0x114>
 8006fce:	eba0 0308 	sub.w	r3, r0, r8
 8006fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	46a2      	mov	sl, r4
 8006fda:	9304      	str	r3, [sp, #16]
 8006fdc:	e7d2      	b.n	8006f84 <_svfiprintf_r+0xa0>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	1d19      	adds	r1, r3, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	9103      	str	r1, [sp, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bfbb      	ittet	lt
 8006fea:	425b      	neglt	r3, r3
 8006fec:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff0:	9307      	strge	r3, [sp, #28]
 8006ff2:	9307      	strlt	r3, [sp, #28]
 8006ff4:	bfb8      	it	lt
 8006ff6:	9204      	strlt	r2, [sp, #16]
 8006ff8:	7823      	ldrb	r3, [r4, #0]
 8006ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ffc:	d10a      	bne.n	8007014 <_svfiprintf_r+0x130>
 8006ffe:	7863      	ldrb	r3, [r4, #1]
 8007000:	2b2a      	cmp	r3, #42	@ 0x2a
 8007002:	d132      	bne.n	800706a <_svfiprintf_r+0x186>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	3402      	adds	r4, #2
 8007008:	1d1a      	adds	r2, r3, #4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	9203      	str	r2, [sp, #12]
 800700e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80070cc <_svfiprintf_r+0x1e8>
 8007018:	2203      	movs	r2, #3
 800701a:	4650      	mov	r0, sl
 800701c:	7821      	ldrb	r1, [r4, #0]
 800701e:	f7ff fea0 	bl	8006d62 <memchr>
 8007022:	b138      	cbz	r0, 8007034 <_svfiprintf_r+0x150>
 8007024:	2240      	movs	r2, #64	@ 0x40
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	eba0 000a 	sub.w	r0, r0, sl
 800702c:	4082      	lsls	r2, r0
 800702e:	4313      	orrs	r3, r2
 8007030:	3401      	adds	r4, #1
 8007032:	9304      	str	r3, [sp, #16]
 8007034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007038:	2206      	movs	r2, #6
 800703a:	4825      	ldr	r0, [pc, #148]	@ (80070d0 <_svfiprintf_r+0x1ec>)
 800703c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007040:	f7ff fe8f 	bl	8006d62 <memchr>
 8007044:	2800      	cmp	r0, #0
 8007046:	d036      	beq.n	80070b6 <_svfiprintf_r+0x1d2>
 8007048:	4b22      	ldr	r3, [pc, #136]	@ (80070d4 <_svfiprintf_r+0x1f0>)
 800704a:	bb1b      	cbnz	r3, 8007094 <_svfiprintf_r+0x1b0>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	3307      	adds	r3, #7
 8007050:	f023 0307 	bic.w	r3, r3, #7
 8007054:	3308      	adds	r3, #8
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800705a:	4433      	add	r3, r6
 800705c:	9309      	str	r3, [sp, #36]	@ 0x24
 800705e:	e76a      	b.n	8006f36 <_svfiprintf_r+0x52>
 8007060:	460c      	mov	r4, r1
 8007062:	2001      	movs	r0, #1
 8007064:	fb0c 3202 	mla	r2, ip, r2, r3
 8007068:	e7a8      	b.n	8006fbc <_svfiprintf_r+0xd8>
 800706a:	2300      	movs	r3, #0
 800706c:	f04f 0c0a 	mov.w	ip, #10
 8007070:	4619      	mov	r1, r3
 8007072:	3401      	adds	r4, #1
 8007074:	9305      	str	r3, [sp, #20]
 8007076:	4620      	mov	r0, r4
 8007078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800707c:	3a30      	subs	r2, #48	@ 0x30
 800707e:	2a09      	cmp	r2, #9
 8007080:	d903      	bls.n	800708a <_svfiprintf_r+0x1a6>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0c6      	beq.n	8007014 <_svfiprintf_r+0x130>
 8007086:	9105      	str	r1, [sp, #20]
 8007088:	e7c4      	b.n	8007014 <_svfiprintf_r+0x130>
 800708a:	4604      	mov	r4, r0
 800708c:	2301      	movs	r3, #1
 800708e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007092:	e7f0      	b.n	8007076 <_svfiprintf_r+0x192>
 8007094:	ab03      	add	r3, sp, #12
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	462a      	mov	r2, r5
 800709a:	4638      	mov	r0, r7
 800709c:	4b0e      	ldr	r3, [pc, #56]	@ (80070d8 <_svfiprintf_r+0x1f4>)
 800709e:	a904      	add	r1, sp, #16
 80070a0:	f3af 8000 	nop.w
 80070a4:	1c42      	adds	r2, r0, #1
 80070a6:	4606      	mov	r6, r0
 80070a8:	d1d6      	bne.n	8007058 <_svfiprintf_r+0x174>
 80070aa:	89ab      	ldrh	r3, [r5, #12]
 80070ac:	065b      	lsls	r3, r3, #25
 80070ae:	f53f af2d 	bmi.w	8006f0c <_svfiprintf_r+0x28>
 80070b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070b4:	e72c      	b.n	8006f10 <_svfiprintf_r+0x2c>
 80070b6:	ab03      	add	r3, sp, #12
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	462a      	mov	r2, r5
 80070bc:	4638      	mov	r0, r7
 80070be:	4b06      	ldr	r3, [pc, #24]	@ (80070d8 <_svfiprintf_r+0x1f4>)
 80070c0:	a904      	add	r1, sp, #16
 80070c2:	f000 f87d 	bl	80071c0 <_printf_i>
 80070c6:	e7ed      	b.n	80070a4 <_svfiprintf_r+0x1c0>
 80070c8:	0800849e 	.word	0x0800849e
 80070cc:	080084a4 	.word	0x080084a4
 80070d0:	080084a8 	.word	0x080084a8
 80070d4:	00000000 	.word	0x00000000
 80070d8:	08006e2d 	.word	0x08006e2d

080070dc <_printf_common>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	4616      	mov	r6, r2
 80070e2:	4698      	mov	r8, r3
 80070e4:	688a      	ldr	r2, [r1, #8]
 80070e6:	690b      	ldr	r3, [r1, #16]
 80070e8:	4607      	mov	r7, r0
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bfb8      	it	lt
 80070ee:	4613      	movlt	r3, r2
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070f6:	460c      	mov	r4, r1
 80070f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070fc:	b10a      	cbz	r2, 8007102 <_printf_common+0x26>
 80070fe:	3301      	adds	r3, #1
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	0699      	lsls	r1, r3, #26
 8007106:	bf42      	ittt	mi
 8007108:	6833      	ldrmi	r3, [r6, #0]
 800710a:	3302      	addmi	r3, #2
 800710c:	6033      	strmi	r3, [r6, #0]
 800710e:	6825      	ldr	r5, [r4, #0]
 8007110:	f015 0506 	ands.w	r5, r5, #6
 8007114:	d106      	bne.n	8007124 <_printf_common+0x48>
 8007116:	f104 0a19 	add.w	sl, r4, #25
 800711a:	68e3      	ldr	r3, [r4, #12]
 800711c:	6832      	ldr	r2, [r6, #0]
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	42ab      	cmp	r3, r5
 8007122:	dc2b      	bgt.n	800717c <_printf_common+0xa0>
 8007124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007128:	6822      	ldr	r2, [r4, #0]
 800712a:	3b00      	subs	r3, #0
 800712c:	bf18      	it	ne
 800712e:	2301      	movne	r3, #1
 8007130:	0692      	lsls	r2, r2, #26
 8007132:	d430      	bmi.n	8007196 <_printf_common+0xba>
 8007134:	4641      	mov	r1, r8
 8007136:	4638      	mov	r0, r7
 8007138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800713c:	47c8      	blx	r9
 800713e:	3001      	adds	r0, #1
 8007140:	d023      	beq.n	800718a <_printf_common+0xae>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	6922      	ldr	r2, [r4, #16]
 8007146:	f003 0306 	and.w	r3, r3, #6
 800714a:	2b04      	cmp	r3, #4
 800714c:	bf14      	ite	ne
 800714e:	2500      	movne	r5, #0
 8007150:	6833      	ldreq	r3, [r6, #0]
 8007152:	f04f 0600 	mov.w	r6, #0
 8007156:	bf08      	it	eq
 8007158:	68e5      	ldreq	r5, [r4, #12]
 800715a:	f104 041a 	add.w	r4, r4, #26
 800715e:	bf08      	it	eq
 8007160:	1aed      	subeq	r5, r5, r3
 8007162:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007166:	bf08      	it	eq
 8007168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800716c:	4293      	cmp	r3, r2
 800716e:	bfc4      	itt	gt
 8007170:	1a9b      	subgt	r3, r3, r2
 8007172:	18ed      	addgt	r5, r5, r3
 8007174:	42b5      	cmp	r5, r6
 8007176:	d11a      	bne.n	80071ae <_printf_common+0xd2>
 8007178:	2000      	movs	r0, #0
 800717a:	e008      	b.n	800718e <_printf_common+0xb2>
 800717c:	2301      	movs	r3, #1
 800717e:	4652      	mov	r2, sl
 8007180:	4641      	mov	r1, r8
 8007182:	4638      	mov	r0, r7
 8007184:	47c8      	blx	r9
 8007186:	3001      	adds	r0, #1
 8007188:	d103      	bne.n	8007192 <_printf_common+0xb6>
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	3501      	adds	r5, #1
 8007194:	e7c1      	b.n	800711a <_printf_common+0x3e>
 8007196:	2030      	movs	r0, #48	@ 0x30
 8007198:	18e1      	adds	r1, r4, r3
 800719a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071a4:	4422      	add	r2, r4
 80071a6:	3302      	adds	r3, #2
 80071a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071ac:	e7c2      	b.n	8007134 <_printf_common+0x58>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4622      	mov	r2, r4
 80071b2:	4641      	mov	r1, r8
 80071b4:	4638      	mov	r0, r7
 80071b6:	47c8      	blx	r9
 80071b8:	3001      	adds	r0, #1
 80071ba:	d0e6      	beq.n	800718a <_printf_common+0xae>
 80071bc:	3601      	adds	r6, #1
 80071be:	e7d9      	b.n	8007174 <_printf_common+0x98>

080071c0 <_printf_i>:
 80071c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	7e0f      	ldrb	r7, [r1, #24]
 80071c6:	4691      	mov	r9, r2
 80071c8:	2f78      	cmp	r7, #120	@ 0x78
 80071ca:	4680      	mov	r8, r0
 80071cc:	460c      	mov	r4, r1
 80071ce:	469a      	mov	sl, r3
 80071d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071d6:	d807      	bhi.n	80071e8 <_printf_i+0x28>
 80071d8:	2f62      	cmp	r7, #98	@ 0x62
 80071da:	d80a      	bhi.n	80071f2 <_printf_i+0x32>
 80071dc:	2f00      	cmp	r7, #0
 80071de:	f000 80d3 	beq.w	8007388 <_printf_i+0x1c8>
 80071e2:	2f58      	cmp	r7, #88	@ 0x58
 80071e4:	f000 80ba 	beq.w	800735c <_printf_i+0x19c>
 80071e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071f0:	e03a      	b.n	8007268 <_printf_i+0xa8>
 80071f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071f6:	2b15      	cmp	r3, #21
 80071f8:	d8f6      	bhi.n	80071e8 <_printf_i+0x28>
 80071fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007200 <_printf_i+0x40>)
 80071fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007200:	08007259 	.word	0x08007259
 8007204:	0800726d 	.word	0x0800726d
 8007208:	080071e9 	.word	0x080071e9
 800720c:	080071e9 	.word	0x080071e9
 8007210:	080071e9 	.word	0x080071e9
 8007214:	080071e9 	.word	0x080071e9
 8007218:	0800726d 	.word	0x0800726d
 800721c:	080071e9 	.word	0x080071e9
 8007220:	080071e9 	.word	0x080071e9
 8007224:	080071e9 	.word	0x080071e9
 8007228:	080071e9 	.word	0x080071e9
 800722c:	0800736f 	.word	0x0800736f
 8007230:	08007297 	.word	0x08007297
 8007234:	08007329 	.word	0x08007329
 8007238:	080071e9 	.word	0x080071e9
 800723c:	080071e9 	.word	0x080071e9
 8007240:	08007391 	.word	0x08007391
 8007244:	080071e9 	.word	0x080071e9
 8007248:	08007297 	.word	0x08007297
 800724c:	080071e9 	.word	0x080071e9
 8007250:	080071e9 	.word	0x080071e9
 8007254:	08007331 	.word	0x08007331
 8007258:	6833      	ldr	r3, [r6, #0]
 800725a:	1d1a      	adds	r2, r3, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6032      	str	r2, [r6, #0]
 8007260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007268:	2301      	movs	r3, #1
 800726a:	e09e      	b.n	80073aa <_printf_i+0x1ea>
 800726c:	6833      	ldr	r3, [r6, #0]
 800726e:	6820      	ldr	r0, [r4, #0]
 8007270:	1d19      	adds	r1, r3, #4
 8007272:	6031      	str	r1, [r6, #0]
 8007274:	0606      	lsls	r6, r0, #24
 8007276:	d501      	bpl.n	800727c <_printf_i+0xbc>
 8007278:	681d      	ldr	r5, [r3, #0]
 800727a:	e003      	b.n	8007284 <_printf_i+0xc4>
 800727c:	0645      	lsls	r5, r0, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0xb8>
 8007280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007284:	2d00      	cmp	r5, #0
 8007286:	da03      	bge.n	8007290 <_printf_i+0xd0>
 8007288:	232d      	movs	r3, #45	@ 0x2d
 800728a:	426d      	negs	r5, r5
 800728c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007290:	230a      	movs	r3, #10
 8007292:	4859      	ldr	r0, [pc, #356]	@ (80073f8 <_printf_i+0x238>)
 8007294:	e011      	b.n	80072ba <_printf_i+0xfa>
 8007296:	6821      	ldr	r1, [r4, #0]
 8007298:	6833      	ldr	r3, [r6, #0]
 800729a:	0608      	lsls	r0, r1, #24
 800729c:	f853 5b04 	ldr.w	r5, [r3], #4
 80072a0:	d402      	bmi.n	80072a8 <_printf_i+0xe8>
 80072a2:	0649      	lsls	r1, r1, #25
 80072a4:	bf48      	it	mi
 80072a6:	b2ad      	uxthmi	r5, r5
 80072a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80072aa:	6033      	str	r3, [r6, #0]
 80072ac:	bf14      	ite	ne
 80072ae:	230a      	movne	r3, #10
 80072b0:	2308      	moveq	r3, #8
 80072b2:	4851      	ldr	r0, [pc, #324]	@ (80073f8 <_printf_i+0x238>)
 80072b4:	2100      	movs	r1, #0
 80072b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072ba:	6866      	ldr	r6, [r4, #4]
 80072bc:	2e00      	cmp	r6, #0
 80072be:	bfa8      	it	ge
 80072c0:	6821      	ldrge	r1, [r4, #0]
 80072c2:	60a6      	str	r6, [r4, #8]
 80072c4:	bfa4      	itt	ge
 80072c6:	f021 0104 	bicge.w	r1, r1, #4
 80072ca:	6021      	strge	r1, [r4, #0]
 80072cc:	b90d      	cbnz	r5, 80072d2 <_printf_i+0x112>
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d04b      	beq.n	800736a <_printf_i+0x1aa>
 80072d2:	4616      	mov	r6, r2
 80072d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80072d8:	fb03 5711 	mls	r7, r3, r1, r5
 80072dc:	5dc7      	ldrb	r7, [r0, r7]
 80072de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072e2:	462f      	mov	r7, r5
 80072e4:	42bb      	cmp	r3, r7
 80072e6:	460d      	mov	r5, r1
 80072e8:	d9f4      	bls.n	80072d4 <_printf_i+0x114>
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d10b      	bne.n	8007306 <_printf_i+0x146>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	07df      	lsls	r7, r3, #31
 80072f2:	d508      	bpl.n	8007306 <_printf_i+0x146>
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	6861      	ldr	r1, [r4, #4]
 80072f8:	4299      	cmp	r1, r3
 80072fa:	bfde      	ittt	le
 80072fc:	2330      	movle	r3, #48	@ 0x30
 80072fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007302:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007306:	1b92      	subs	r2, r2, r6
 8007308:	6122      	str	r2, [r4, #16]
 800730a:	464b      	mov	r3, r9
 800730c:	4621      	mov	r1, r4
 800730e:	4640      	mov	r0, r8
 8007310:	f8cd a000 	str.w	sl, [sp]
 8007314:	aa03      	add	r2, sp, #12
 8007316:	f7ff fee1 	bl	80070dc <_printf_common>
 800731a:	3001      	adds	r0, #1
 800731c:	d14a      	bne.n	80073b4 <_printf_i+0x1f4>
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	b004      	add	sp, #16
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	f043 0320 	orr.w	r3, r3, #32
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	2778      	movs	r7, #120	@ 0x78
 8007332:	4832      	ldr	r0, [pc, #200]	@ (80073fc <_printf_i+0x23c>)
 8007334:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	6831      	ldr	r1, [r6, #0]
 800733c:	061f      	lsls	r7, r3, #24
 800733e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007342:	d402      	bmi.n	800734a <_printf_i+0x18a>
 8007344:	065f      	lsls	r7, r3, #25
 8007346:	bf48      	it	mi
 8007348:	b2ad      	uxthmi	r5, r5
 800734a:	6031      	str	r1, [r6, #0]
 800734c:	07d9      	lsls	r1, r3, #31
 800734e:	bf44      	itt	mi
 8007350:	f043 0320 	orrmi.w	r3, r3, #32
 8007354:	6023      	strmi	r3, [r4, #0]
 8007356:	b11d      	cbz	r5, 8007360 <_printf_i+0x1a0>
 8007358:	2310      	movs	r3, #16
 800735a:	e7ab      	b.n	80072b4 <_printf_i+0xf4>
 800735c:	4826      	ldr	r0, [pc, #152]	@ (80073f8 <_printf_i+0x238>)
 800735e:	e7e9      	b.n	8007334 <_printf_i+0x174>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	f023 0320 	bic.w	r3, r3, #32
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	e7f6      	b.n	8007358 <_printf_i+0x198>
 800736a:	4616      	mov	r6, r2
 800736c:	e7bd      	b.n	80072ea <_printf_i+0x12a>
 800736e:	6833      	ldr	r3, [r6, #0]
 8007370:	6825      	ldr	r5, [r4, #0]
 8007372:	1d18      	adds	r0, r3, #4
 8007374:	6961      	ldr	r1, [r4, #20]
 8007376:	6030      	str	r0, [r6, #0]
 8007378:	062e      	lsls	r6, r5, #24
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	d501      	bpl.n	8007382 <_printf_i+0x1c2>
 800737e:	6019      	str	r1, [r3, #0]
 8007380:	e002      	b.n	8007388 <_printf_i+0x1c8>
 8007382:	0668      	lsls	r0, r5, #25
 8007384:	d5fb      	bpl.n	800737e <_printf_i+0x1be>
 8007386:	8019      	strh	r1, [r3, #0]
 8007388:	2300      	movs	r3, #0
 800738a:	4616      	mov	r6, r2
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	e7bc      	b.n	800730a <_printf_i+0x14a>
 8007390:	6833      	ldr	r3, [r6, #0]
 8007392:	2100      	movs	r1, #0
 8007394:	1d1a      	adds	r2, r3, #4
 8007396:	6032      	str	r2, [r6, #0]
 8007398:	681e      	ldr	r6, [r3, #0]
 800739a:	6862      	ldr	r2, [r4, #4]
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff fce0 	bl	8006d62 <memchr>
 80073a2:	b108      	cbz	r0, 80073a8 <_printf_i+0x1e8>
 80073a4:	1b80      	subs	r0, r0, r6
 80073a6:	6060      	str	r0, [r4, #4]
 80073a8:	6863      	ldr	r3, [r4, #4]
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	2300      	movs	r3, #0
 80073ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073b2:	e7aa      	b.n	800730a <_printf_i+0x14a>
 80073b4:	4632      	mov	r2, r6
 80073b6:	4649      	mov	r1, r9
 80073b8:	4640      	mov	r0, r8
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	47d0      	blx	sl
 80073be:	3001      	adds	r0, #1
 80073c0:	d0ad      	beq.n	800731e <_printf_i+0x15e>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	079b      	lsls	r3, r3, #30
 80073c6:	d413      	bmi.n	80073f0 <_printf_i+0x230>
 80073c8:	68e0      	ldr	r0, [r4, #12]
 80073ca:	9b03      	ldr	r3, [sp, #12]
 80073cc:	4298      	cmp	r0, r3
 80073ce:	bfb8      	it	lt
 80073d0:	4618      	movlt	r0, r3
 80073d2:	e7a6      	b.n	8007322 <_printf_i+0x162>
 80073d4:	2301      	movs	r3, #1
 80073d6:	4632      	mov	r2, r6
 80073d8:	4649      	mov	r1, r9
 80073da:	4640      	mov	r0, r8
 80073dc:	47d0      	blx	sl
 80073de:	3001      	adds	r0, #1
 80073e0:	d09d      	beq.n	800731e <_printf_i+0x15e>
 80073e2:	3501      	adds	r5, #1
 80073e4:	68e3      	ldr	r3, [r4, #12]
 80073e6:	9903      	ldr	r1, [sp, #12]
 80073e8:	1a5b      	subs	r3, r3, r1
 80073ea:	42ab      	cmp	r3, r5
 80073ec:	dcf2      	bgt.n	80073d4 <_printf_i+0x214>
 80073ee:	e7eb      	b.n	80073c8 <_printf_i+0x208>
 80073f0:	2500      	movs	r5, #0
 80073f2:	f104 0619 	add.w	r6, r4, #25
 80073f6:	e7f5      	b.n	80073e4 <_printf_i+0x224>
 80073f8:	080084af 	.word	0x080084af
 80073fc:	080084c0 	.word	0x080084c0

08007400 <__swhatbuf_r>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	460c      	mov	r4, r1
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	4615      	mov	r5, r2
 800740a:	2900      	cmp	r1, #0
 800740c:	461e      	mov	r6, r3
 800740e:	b096      	sub	sp, #88	@ 0x58
 8007410:	da0c      	bge.n	800742c <__swhatbuf_r+0x2c>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	2100      	movs	r1, #0
 8007416:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800741a:	bf14      	ite	ne
 800741c:	2340      	movne	r3, #64	@ 0x40
 800741e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007422:	2000      	movs	r0, #0
 8007424:	6031      	str	r1, [r6, #0]
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	b016      	add	sp, #88	@ 0x58
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	466a      	mov	r2, sp
 800742e:	f000 f863 	bl	80074f8 <_fstat_r>
 8007432:	2800      	cmp	r0, #0
 8007434:	dbed      	blt.n	8007412 <__swhatbuf_r+0x12>
 8007436:	9901      	ldr	r1, [sp, #4]
 8007438:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800743c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007440:	4259      	negs	r1, r3
 8007442:	4159      	adcs	r1, r3
 8007444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007448:	e7eb      	b.n	8007422 <__swhatbuf_r+0x22>

0800744a <__smakebuf_r>:
 800744a:	898b      	ldrh	r3, [r1, #12]
 800744c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800744e:	079d      	lsls	r5, r3, #30
 8007450:	4606      	mov	r6, r0
 8007452:	460c      	mov	r4, r1
 8007454:	d507      	bpl.n	8007466 <__smakebuf_r+0x1c>
 8007456:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	2301      	movs	r3, #1
 8007460:	6163      	str	r3, [r4, #20]
 8007462:	b003      	add	sp, #12
 8007464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007466:	466a      	mov	r2, sp
 8007468:	ab01      	add	r3, sp, #4
 800746a:	f7ff ffc9 	bl	8007400 <__swhatbuf_r>
 800746e:	9f00      	ldr	r7, [sp, #0]
 8007470:	4605      	mov	r5, r0
 8007472:	4639      	mov	r1, r7
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff f829 	bl	80064cc <_malloc_r>
 800747a:	b948      	cbnz	r0, 8007490 <__smakebuf_r+0x46>
 800747c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007480:	059a      	lsls	r2, r3, #22
 8007482:	d4ee      	bmi.n	8007462 <__smakebuf_r+0x18>
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	f043 0302 	orr.w	r3, r3, #2
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7e2      	b.n	8007456 <__smakebuf_r+0xc>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800749a:	81a3      	strh	r3, [r4, #12]
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	6020      	str	r0, [r4, #0]
 80074a0:	b15b      	cbz	r3, 80074ba <__smakebuf_r+0x70>
 80074a2:	4630      	mov	r0, r6
 80074a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a8:	f000 f838 	bl	800751c <_isatty_r>
 80074ac:	b128      	cbz	r0, 80074ba <__smakebuf_r+0x70>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f023 0303 	bic.w	r3, r3, #3
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	81a3      	strh	r3, [r4, #12]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	431d      	orrs	r5, r3
 80074be:	81a5      	strh	r5, [r4, #12]
 80074c0:	e7cf      	b.n	8007462 <__smakebuf_r+0x18>

080074c2 <memmove>:
 80074c2:	4288      	cmp	r0, r1
 80074c4:	b510      	push	{r4, lr}
 80074c6:	eb01 0402 	add.w	r4, r1, r2
 80074ca:	d902      	bls.n	80074d2 <memmove+0x10>
 80074cc:	4284      	cmp	r4, r0
 80074ce:	4623      	mov	r3, r4
 80074d0:	d807      	bhi.n	80074e2 <memmove+0x20>
 80074d2:	1e43      	subs	r3, r0, #1
 80074d4:	42a1      	cmp	r1, r4
 80074d6:	d008      	beq.n	80074ea <memmove+0x28>
 80074d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074e0:	e7f8      	b.n	80074d4 <memmove+0x12>
 80074e2:	4601      	mov	r1, r0
 80074e4:	4402      	add	r2, r0
 80074e6:	428a      	cmp	r2, r1
 80074e8:	d100      	bne.n	80074ec <memmove+0x2a>
 80074ea:	bd10      	pop	{r4, pc}
 80074ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074f4:	e7f7      	b.n	80074e6 <memmove+0x24>
	...

080074f8 <_fstat_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	2300      	movs	r3, #0
 80074fc:	4d06      	ldr	r5, [pc, #24]	@ (8007518 <_fstat_r+0x20>)
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	4611      	mov	r1, r2
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	f7fa fa45 	bl	8001994 <_fstat>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d102      	bne.n	8007514 <_fstat_r+0x1c>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b103      	cbz	r3, 8007514 <_fstat_r+0x1c>
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	20000c18 	.word	0x20000c18

0800751c <_isatty_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	2300      	movs	r3, #0
 8007520:	4d05      	ldr	r5, [pc, #20]	@ (8007538 <_isatty_r+0x1c>)
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7fa fa43 	bl	80019b2 <_isatty>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_isatty_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_isatty_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20000c18 	.word	0x20000c18

0800753c <_realloc_r>:
 800753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007540:	4680      	mov	r8, r0
 8007542:	4615      	mov	r5, r2
 8007544:	460c      	mov	r4, r1
 8007546:	b921      	cbnz	r1, 8007552 <_realloc_r+0x16>
 8007548:	4611      	mov	r1, r2
 800754a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800754e:	f7fe bfbd 	b.w	80064cc <_malloc_r>
 8007552:	b92a      	cbnz	r2, 8007560 <_realloc_r+0x24>
 8007554:	f7ff fc22 	bl	8006d9c <_free_r>
 8007558:	2400      	movs	r4, #0
 800755a:	4620      	mov	r0, r4
 800755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007560:	f000 f81a 	bl	8007598 <_malloc_usable_size_r>
 8007564:	4285      	cmp	r5, r0
 8007566:	4606      	mov	r6, r0
 8007568:	d802      	bhi.n	8007570 <_realloc_r+0x34>
 800756a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800756e:	d8f4      	bhi.n	800755a <_realloc_r+0x1e>
 8007570:	4629      	mov	r1, r5
 8007572:	4640      	mov	r0, r8
 8007574:	f7fe ffaa 	bl	80064cc <_malloc_r>
 8007578:	4607      	mov	r7, r0
 800757a:	2800      	cmp	r0, #0
 800757c:	d0ec      	beq.n	8007558 <_realloc_r+0x1c>
 800757e:	42b5      	cmp	r5, r6
 8007580:	462a      	mov	r2, r5
 8007582:	4621      	mov	r1, r4
 8007584:	bf28      	it	cs
 8007586:	4632      	movcs	r2, r6
 8007588:	f7ff fbf9 	bl	8006d7e <memcpy>
 800758c:	4621      	mov	r1, r4
 800758e:	4640      	mov	r0, r8
 8007590:	f7ff fc04 	bl	8006d9c <_free_r>
 8007594:	463c      	mov	r4, r7
 8007596:	e7e0      	b.n	800755a <_realloc_r+0x1e>

08007598 <_malloc_usable_size_r>:
 8007598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759c:	1f18      	subs	r0, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfbc      	itt	lt
 80075a2:	580b      	ldrlt	r3, [r1, r0]
 80075a4:	18c0      	addlt	r0, r0, r3
 80075a6:	4770      	bx	lr

080075a8 <_init>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	bf00      	nop
 80075ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ae:	bc08      	pop	{r3}
 80075b0:	469e      	mov	lr, r3
 80075b2:	4770      	bx	lr

080075b4 <_fini>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	bf00      	nop
 80075b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ba:	bc08      	pop	{r3}
 80075bc:	469e      	mov	lr, r3
 80075be:	4770      	bx	lr
